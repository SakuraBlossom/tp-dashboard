[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Address Book (Level 3)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "https://travis-ci.org/brianyenna/main[image:https://travis-ci.org/brianyenna/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level3?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level3/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level3?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level3\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* This is a desktop Address Book application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* It is a Java sample application intended for students learning Software Engineering while using Java as the main programming language."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 35
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        \u0027site-name\u0027: \u0027Alfred\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-1/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 4,
      "-": 153
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user with many persons in the address book |sort persons by name |locate a person easily"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 424
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook Level 3 (AB3) is for those who *prefer to use a desktop app for managing contacts*. More importantly, AB3 is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 t/criminal`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::delete[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from the address book. +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "// end::delete[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "_{explain how the user can enable/disable data encryption}_"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/AlfredException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public abstract class AlfredException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(Exception cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/AlfredRuntimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class AlfredRuntimeException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredRuntimeException(String message){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //TODO: Update this with the 4 different EntityLists"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_TYPE \u003d \"Unknown entity type\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_INPUT \u003d \"User input is incomplete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The entity index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // to set restrictions as some operations can only be applied to some entity"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"The type of entity is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Joanna-YJA": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class DataConversionException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "   "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /** Constructs an instance of DataConversionException."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param cause Can have one of two main causes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * 1) IOException from error reading from JSON file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * 2) Illegal value exception, thrown when there are illegal values in json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "Joanna-YJA": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class IllegalValueException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "john0227": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Capitalizes given string and returns it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * The first letter is capitalized while the rest are lower-cased. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * e.g."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"\") -\u003e \"\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"alfred\") -\u003e \"Alfred\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"aLFRed\") -\u003e \"Alfred\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param s String to be capitalized."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Capitalized string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String capitalize(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (s.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "john0227": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddMentorCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields: */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Mentor mentor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddMentorCommand(Mentor mentor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(mentor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See AddIssueCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddParticipantCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "     /* Possible Fields */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "     private static final String MESSAGE_SUCCESS \u003d \"New participant added: %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "     private static final String MESSAGE_DUPLICATE_PARTICIPANT \u003d \"This participant already exists in this Hackathon\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     private Participant participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddParticipantCommand(Participant participant) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(participant);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.participant \u003d participant;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addParticipant(this.participant);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Should Model be checking if there are duplicate persons?"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PARTICIPANT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.participant.toString()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddTeamCommand extends AddCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields: */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Team team;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddTeamCommand(Team team) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(team);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.team \u003d team;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See AddIssueCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected DeleteCommand(Id id) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteMentorCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteMentorCommand(Id id) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // see DeleteIssueCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteParticipantCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Later, update this constant to say participant name is invalid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d \"The participant ID provided is invalid\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_DELETE_PARTICIPANT_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteParticipantCommand(Id id) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToBeDeleted;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToBeDeleted \u003d model.deleteParticipant(this.id);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Model checking if index is invalid?"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PARTICIPANT_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                               participantToBeDeleted.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteTeamCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteTeamCommand(Id id) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See DeleteIssueCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_TYPE \u003d \"edit\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    EditCommand(Id id) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditEntityDescriptor {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        protected Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        protected Id id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditEntityDescriptor() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditEntityDescriptor(EditEntityDescriptor toCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setName(toCopy.name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setId(toCopy.id);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cId\u003e getId() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.id);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Setters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setId(Id id) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!(other instanceof EditEntityDescriptor)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "            EditEntityDescriptor e \u003d (EditEntityDescriptor) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.getName().equals(e.getName())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 this.getId().equals(e.getId());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditMentorCommand extends EditCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditMentorDescriptor editMentorDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorCommand(Id id, EditMentorDescriptor editMentorDescriptor) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editMentorDescriptor);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editMentorDescriptor \u003d editMentorDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // see EditIssueCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Mentor createEditedMentor(Mentor mentorToEdit, EditMentorDescriptor editMentorDescriptor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Set each field to updated value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See EditCommand#EditPersonDescriptor for more context"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        return new Mentor(/* Necessary Fields */);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditMentorDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Implement the remaining attributes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditParticipantCommand extends EditCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_EDIT_PARTICIPANT_SUCCESS \u003d \"Edited Participant: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\"; // to be used in Parser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARTICIPANT \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d \"The participant index provided is invalid\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditParticipantDescriptor editParticipantDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantCommand(Id id, EditParticipantDescriptor editParticipantDescriptor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editParticipantDescriptor);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editParticipantDescriptor \u003d editParticipantDescriptor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToEdit;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToEdit \u003d model.getParticipant(this.id);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant editedParticipant \u003d this.createEditedParticipant(participantToEdit,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                                     this.editParticipantDescriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Model should check if there exists duplicates in list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * i.e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "         *     throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (model.updateParticipant(this.id, editedParticipant)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PARTICIPANT_SUCCESS, editedParticipant.toString()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(MESSAGE_DUPLICATE_PARTICIPANT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Participant createEditedParticipant(Participant participantToEdit,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                EditParticipantDescriptor editParticipantDescriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert participantToEdit !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name updatedName \u003d editParticipantDescriptor.getName().orElse(participantToEdit.getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id updatedId \u003d editParticipantDescriptor.getId().orElse(participantToEdit.getId());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Email updatedEmail \u003d editParticipantDescriptor.getEmail().orElse(participantToEdit.getEmail());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Phone updatedPhone \u003d editParticipantDescriptor.getPhone().orElse(participantToEdit.getPhone());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Reorder parameters as necessary"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Participant(updatedName, updatedId, updatedEmail, updatedPhone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditParticipantDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditParticipantDescriptor() {}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditParticipantDescriptor(EditParticipantDescriptor toCopy) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "            super(toCopy);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setEmail(toCopy.email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.isAnyFieldEdited()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 CollectionUtil.isAnyNonNull(this.email, this.phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.email);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.phone);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Setters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!(other instanceof EditParticipantDescriptor)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "            EditParticipantDescriptor e \u003d (EditParticipantDescriptor) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.equals(other)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditTeamCommand extends EditCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditTeamDescriptor editTeamDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamCommand(Id id, EditTeamDescriptor editTeamDescriptor) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editTeamDescriptor);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editTeamDescriptor \u003d editTeamDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // see EditIssueCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Team createEditedTeam(Team teamToEdit, EditTeamDescriptor editTeamDescriptor) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Set each field to updated value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See EditCommand#EditPersonDescriptor for more context"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        return new Team(/* Necessary Fields */);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditTeamDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Implement the remaining attributes"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * There are 4 main scenario where CommandException is thrown:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 1) Could not store data to file"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 2) Person index is invalid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 3) Duplicate person with the same identity is added to model"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 4) Type of entity(mentor, participant, team) is invalid)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class CommandException extends AlfredException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "Joanna-YJA": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This Command is for listing everything (issue, mentor, participant, team)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_TYPE \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Possible format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // TeamList teamList \u003d model.getTeamList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // I think Team should have a method that lists its connections (e.g. Team#showConnection)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // i.e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Team: \u003cTeam Name\u003e (Mentor: \u003cMentor Name\u003e)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Participants:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //    \u003cParticipant 1\u003e (in this team)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //    ..."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //    \u003cParticipant n\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * // List teams and its connections"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * for (Team team : teamList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "         *     print(team.showConnection());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * // or teamList.stream().forEach(Team::showConnection());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "         *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * // List issues"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * (new ListIssueCommand()).execute(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListMentorCommand extends ListCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See ListIssueCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListParticipantCommand extends ListCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all participants\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.getParticipantList().list().stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                  .forEach(p -\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      HashMap\u003cString, String\u003e fieldMap \u003d p.viewMinimal();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      for (String key : fieldMap.keySet()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                          toPrint.append(StringUtil.capitalize(key))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                 .append(\" : \")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                 .append(fieldMap.get(key))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                 .append(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      System.out.println(toPrint.toString().trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                  });"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListTeamCommand extends ListCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // see ListIssueCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ViewCommand(Id id) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewMentorCommand extends ViewCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewMentorCommand(Id id) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See ViewIssueCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewParticipantCommand extends ViewCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed specified participant\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d \"The participant index provided is invalid\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Eventually change to take in Name (or add a new constructor)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewParticipantCommand(Id id) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToView \u003d model.getParticipant(this.id);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        HashMap\u003cString, String\u003e fieldMap \u003d participantToView.viewDetailed();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (String key : fieldMap.keySet()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "            toPrint.append(StringUtil.capitalize(key))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "                   .append(\" : \")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "                   .append(fieldMap.get(key))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "                   .append(\" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.out.println(toPrint.toString().trim());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewTeamCommand extends ViewCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewTeamCommand(Id id) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See ViewIssueCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Entity Types */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Can change to enum. Just following the above convention"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Or maybe we can define an EntityType class?"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_ISSUE \u003d \"issue\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_MENTOR \u003d \"mentor\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_PARTICIPANT \u003d \"participant\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_TEAM \u003d \"team\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "john0227": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * ParseException is thrown is one of the 4 scenario:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 1) When the command is unknown"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 2) When the specific operation cannot be applied on an entity(invalid entity)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 3) When the command format is inaccurate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 4) When user input is incomplete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "Joanna-YJA": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Issue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ReadableEntityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the ParticipantList."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadableEntityList getParticipantList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the TeamList."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadableEntityList getTeamList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the IssueList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadableEntityList getIssueList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the MentorList."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadableEntityList getMentorList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Below is the API exposed for the controllers to call */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Participant methods */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Participant getParticipant(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addParticipant(Participant participant) throws AlfredException;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean updateParticipant(Id id, Participant participant);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Participant deleteParticipant(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Team methods */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeam(Id teamId) throws AlfredException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeamByParticipantId(Id participantId) throws AlfredException;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeamByMentorId(Id mentorId) throws AlfredException;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addTeam(Team team) throws AlfredException;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean updateTeam(Id teamId, Team team);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team deleteTeam(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Mentor methods */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Mentor getMentor(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addMentor(Mentor mentor) throws AlfredException;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean updateMentor(Id id, Mentor mentor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Mentor deleteMentor(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Issue methods */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Issue getIssue(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addIssue(Issue issue) throws AlfredException;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean updateIssue(Id id, Issue issue);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Issue deleteIssue(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "hcwong": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Issue;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.IssueList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ReadableEntityList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // EntityLists"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final ParticipantList participantList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final TeamList teamList;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final IssueList issueList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final MentorList mentorList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EntityListMethods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the participant list located in the Model Manager."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadableEntityList getParticipantList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the team list located in the Model Manager."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadableEntityList getTeamList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the issue list located in the Model Manager."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadableEntityList getIssueList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.issueList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the mentor list located in the Model Manager."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadableEntityList getMentorList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Entity Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Participant Methods */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the participant by id."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant Object"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the Participant cannot be found."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant getParticipant(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList.get(id);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the participant into the list."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addParticipant(Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participantList.add(participant);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the participant in the list, if any."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateParticipant(Id id, Participant participant) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList.update(id, participant);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the participant by id."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant deleteParticipant(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList.delete(id);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Team Methods*/"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets team by id."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeam(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList.get(id);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the team by participant id."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participantId"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeamByParticipantId(Id participantId) throws AlfredException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cTeam\u003e teams \u003d this.teamList.getSpecificTypedList();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: teams) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            for (Participant p: t.getParticipants()) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                if (p.getId() \u003d\u003d participantId) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Team with said participant cannot be found.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the team by mentor id."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentorId"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeamByMentorId(Id mentorId) throws AlfredException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cTeam\u003e teams \u003d this.teamList.getSpecificTypedList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: teams) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cMentor\u003e mentor \u003d t.getMentor();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (mentor.isPresent()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                if(mentor.get().getId() \u003d\u003d mentorId) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Team with said participant cannot be found.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the team."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamId"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedTeam"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateTeam(Id teamId, Team updatedTeam) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList.update(teamId, updatedTeam);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the team."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param team"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addTeam(Team team) throws AlfredException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teamList.add(team);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the team."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team deleteTeam(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList.delete(id);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Mentor Methods */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the mentor by id."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor getMentor(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList.get(id);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds mentor into the list."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addMentor(Mentor mentor) throws AlfredException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentorList.add(mentor);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the mentor."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedMentor"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateMentor(Id id, Mentor updatedMentor) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList.update(id, updatedMentor);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the mentor."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor that is deleted"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor deleteMentor(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList.delete(id);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Issue Methods */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets issue by Id."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Issue"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Issue getIssue(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.issueList.get(id);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds issue into the list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param issue"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addIssue(Issue issue) throws AlfredException {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.issueList.add(issue);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the issue in the list."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param issue"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateIssue(Id id, Issue issue) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.issueList.update(id, issue);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the issue in the list."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Issue"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Issue deleteIssue(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.issueList.delete(id);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 162,
      "hcwong": 273
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path teamListFilePath \u003d Paths.get(\"data\" , \"teamlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path participantListFilePath \u003d Paths.get(\"data\" , \"participantlist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path issueListFilePath \u003d Paths.get(\"data\" , \"issuelist.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path mentorListFilePath \u003d Paths.get(\"data\" , \"mentorlist.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //TODO: Remove this method after integration"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return teamListFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return participantListFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mentorListFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getIssueListFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return issueListFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setTeamListFilePath(Path teamListFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(teamListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teamListFilePath \u003d teamListFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setParticipantListFilePath(Path participantListFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(participantListFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.participantListFilePath \u003d participantListFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setMentorListFilePath(Path mentorListFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(mentorListFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentorListFilePath \u003d mentorListFilePath;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setIssueListFilePath(Path issueListFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(issueListFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.issueListFilePath \u003d issueListFilePath;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //TODO: Remove this method after integration"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 42,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Email."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid email format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 14,
      "hcwong": 67,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Entity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public abstract class Entity {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    protected final Id id; // Note: id is unique and should never be mutable."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Entity(Id id, Name name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getter methods"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the name."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the id."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Id"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setter methods"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Sets the name of the entity."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * View the bare details of the entity There is the default implementation."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return HashMap\u003cString, String\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fields.put(\"name\", this.getName().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fields.put(\"id\", this.getId().toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fields;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * View the full details of the entity."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    abstract public HashMap\u003cString, String\u003e viewDetailed();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Id.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_INVALID_NUMBER \u003d \"Number should be of the format integer,\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"and adhere to the following constraints: \\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"1. It should  number which can be any digit.\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"The number must: \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -be at least one digit long\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -contain only digits from 0 to 9\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String NUMBER_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private PrefixType prefix;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final int number;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Id}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param prefix PrefixType to indicate type of entity."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param number Index number of entity."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id(PrefixType prefix, int number) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidNumber(number), MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if number is a valid number."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param number Number."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean Whether number is in valid format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidNumber(int number) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Integer.toString(number).matches(NUMBER_REGEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int getNumber() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPrefix(PrefixType prefix) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(this.prefix, this.number);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Id)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Id otherId \u003d ((Id) other);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherId.getPrefix() \u003d\u003d this.getPrefix()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherId.getNumber() \u003d\u003d this.getNumber();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(getPrefix())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\"-\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getNumber());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hcwong": 56,
      "Joanna-YJA": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Issue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Issue extends Entity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private IssueType type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Optional\u003cDate\u003e time;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor with date."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param isCompleted"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Issue("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Id id,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            String description,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            IssueType type,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cDate\u003e time,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            boolean isCompleted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public IssueType getType() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cDate\u003e getTime() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setCompleted(boolean completed) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        isCompleted \u003d completed;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setType(IssueType type) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setTime(Optional\u003cDate\u003e time) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the minimal view of this entity."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return HashMap\u003cString, String\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", this.name.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", this.id.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"type\", this.type.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"isCompleted\", Boolean.toString(this.isCompleted));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the detailed view of this entity."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return HashMap\u003cString, String\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", this.name.toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", this.id.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"type\", this.type.toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"description\", this.description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"time\", this.time.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"isCompleted\", Boolean.toString(this.isCompleted));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Id: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\"isCompleted\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(isCompleted());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(name, id, type, description, time, isCompleted);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Issue)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Issue otherIssue \u003d ((Issue) other);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.getName() \u003d\u003d otherIssue.getName()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.getId() \u003d\u003d otherIssue.getId()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.getType() \u003d\u003d otherIssue.getType()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.getDescription() \u003d\u003d otherIssue.getDescription()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.getTime() \u003d\u003d otherIssue.getTime()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.isCompleted() \u003d\u003d otherIssue.isCompleted();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/IssueType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum IssueType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    TODO(\"Todo\"),"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    DEADLINE(\"Deadline\"),"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    EVENT(\"Event\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final String stringFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private IssueType(String stringFormat) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.stringFormat \u003d stringFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.stringFormat;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final int tableNumber;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER \u003d \"Table number should be an integer\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"1. The tableNumber can be any digit.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"The tableNumber must:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -be at least one digit long\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -contain only digits from 0 to 9\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String TABLE_NUMBER_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor without team."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param tableNumber Table that team is seated on."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Location(int tableNumber) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(tableNumber);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidNumber(tableNumber), MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given tableNumber is a valid number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param tableNumber tableNumber that team is seated on."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid tableNumber format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidNumber(int tableNumber){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Integer.toString(tableNumber).matches(TABLE_NUMBER_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int getTableNumber() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return tableNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setter"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Objects.hash(this.tableNumber);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Location otherLocation \u003d ((Location) other);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherLocation \u003d\u003d this |"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                otherLocation.getTableNumber() \u003d\u003d this.getTableNumber();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Location in string format."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Table Number: \")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                .append(getTableNumber());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Location in string format."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int toStorageValue(){"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.tableNumber;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 41,
      "Joanna-YJA": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Mentor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Mentor extends Entity {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Name organization;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName subject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param organization"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param subject"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Id id,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Phone phone,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Email email,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name organization,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName subject"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getOrganization() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return organization;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public SubjectName getSubject() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setOrganization(Name organization) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setSubject(SubjectName subject) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"organization\", getOrganization().toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"subject\", getSubject().toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" ID: \")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Organization: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getOrganization())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Subject: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getSubject());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Mentor)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Mentor otherMentor \u003d ((Mentor) other);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherMentor.getName() \u003d\u003d this.getName()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getId() \u003d\u003d this.getId()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getPhone() \u003d\u003d this.getPhone()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getEmail() \u003d\u003d this.getEmail()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getOrganization() \u003d\u003d this.getOrganization()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getSubject() \u003d\u003d this.getSubject();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \",.-\u0027\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"Names should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            +\"1. It should contain alphabets, spaces, and these special characters, excluding\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"2.Contain at least one character\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^[\" + SPECIAL_CHARACTERS + \" a-zA-Z\" + \"]+$\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid name format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Name in string format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Name in string format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hcwong": 49,
      "Joanna-YJA": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Participant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Participant extends Entity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor without team."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant(Name name, Id id, Email email, Phone phone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getters - Note the return types will be changed from phone and email to the respective types - Just for demo"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the email."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the phone number."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Phone"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setters - Argument types will be changed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Sets the phone."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       this.phone \u003d phone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Sets the email."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(id, name, email, phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Participant)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Participant otherParticipant \u003d ((Participant) other);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherParticipant.getName() \u003d\u003d this.getName()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherParticipant.getId() \u003d\u003d this.getId()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherParticipant.getPhone() \u003d\u003d this.getPhone()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherParticipant.getEmail() \u003d\u003d this.getEmail();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" ID: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 117
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"-. \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"Phone numbers be of the format (optional)country-code + phone-number \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"and should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"1. The country code, if it is not existent in constructor, the country code \u0027+65\u0027 will be added. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"2. The phone number should be at least three digit long.\\n \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"The phone number must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -contain numbers\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -contain these special characters only, excluding parentheses,\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"(\" + SPECIAL_CHARACTERS + \").\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final  String DIGITS \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String COUNTRY_CODE_REGEX \u003d \"\\\\+\" + DIGITS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String PHONE_NUMBER_PART_REGEX \u003d \"[\" + SPECIAL_CHARACTERS + \"]\" + \"?\" + DIGITS ;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String PHONE_NUMBER_REGEX \u003d \"(\" + PHONE_NUMBER_PART_REGEX + \")\" + \"*\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d COUNTRY_CODE_REGEX +  PHONE_NUMBER_REGEX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if(!(phone.charAt(0) \u003d\u003d \u0027+\u0027)){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "          String newPhone \u003d \"+65 \" + phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            checkArgument(isValidPhone(newPhone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            value \u003d newPhone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            value \u003d phone;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid phone number."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Phone number."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid phone number format."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue(){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 49,
      "Joanna-YJA": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/PrefixType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum PrefixType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    P, // Participant"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    M, // Mentor"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    T, // Team"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    I; // Issue"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Prefix type should be a string of either one of the following values:\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"P: to indicate Entity is a Participant\\n\" +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"M: to indicate Entity is a Mentor\\n\" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"I: to indicate Entity is an Issue\\n\" +"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"T: to indicate Entity is  a Team\\n\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue(){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.name();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public boolean isValidPrefix(String test){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    try{"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        PrefixType result \u003d PrefixType.valueOf(test);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    } catch (IllegalArgumentException e){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 7,
      "Joanna-YJA": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/ProjectType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum ProjectType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    PLACEHOLDER(\"placeholder\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final String projectTypeString;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private ProjectType(String projectTypeString) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectTypeString \u003d projectTypeString;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Project type in string format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.projectTypeString;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Project type in string format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 16,
      "Joanna-YJA": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Score.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String MESSAGE_CONSTRAINTS \u003d \"Score should contain only positive integers from 0 to 100\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a {@code Score}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param score A valid score of a team."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Score(int score) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidScore(score), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid score."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param score Score."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether score is in valid score format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidScore(int score) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return score \u003e\u003d 0 \u0026\u0026 score \u003c\u003d 100;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Score in string format."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "   public String toString(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    return Integer.toString(this.score);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "   }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Score in string format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "   public int toStorageValue(){"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    return this.score;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "   }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 19,
      "Joanna-YJA": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/SubjectName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum SubjectName {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    PLACEHOLDER(\"placeholder\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"-\u0027\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"SubjectName should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    +\"1. It should contain alphabets, spaces, and these special characters, excluding\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"2.Contain at least one character\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^[\" + SPECIAL_CHARACTERS + \" a-zA-Z\" + \"]+$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final String subjectNameString;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName(String subjectNameString) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(subjectNameString);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidSubjectName(subjectNameString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subjectNameString \u003d subjectNameString;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid name format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidSubjectName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.subjectNameString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue(){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 11,
      "Joanna-YJA": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Team.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Team extends Entity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cParticipant\u003e participants;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Optional\u003cMentor\u003e mentor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName subject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Name projectName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private ProjectType projectType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor with mentor."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamId"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamName"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participants"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param subject"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param projectName"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param projectType"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param location"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Id teamId,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name teamName,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            List\u003cParticipant\u003e participants,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cMentor\u003e mentor,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName subject,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Score score,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name projectName,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ProjectType projectType,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Location location"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(teamId, teamName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants \u003d participants;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectType \u003d projectType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cParticipant\u003e getParticipants() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participants;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cMentor\u003e getMentor() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public SubjectName getSubject() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.subject;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getProjectName() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.projectName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ProjectType getProjectType() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.projectType;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setters"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setParticipants(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants \u003d participants;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setMentor(Optional\u003cMentor\u003e mentor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setSubject(SubjectName subject) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setScore(Score score) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setProjectName(Name projectName) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setProjectType(ProjectType projectType) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectType \u003d projectType;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setLocation(Location location) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Mentor mentor \u003d getMentor().orElse(null);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"subject\", getSubject().toString());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"location\", getLocation().toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"mentor\", mentor.toString());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"score\", score.toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"projectName\", projectName.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"projectType\", projectType.toString());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(id, name, participants, mentor, subject, score,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                projectName, projectType, location);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "           return true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       if (!(other instanceof Team)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": "           return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       Team otherTeam \u003d ((Team) other);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       return otherTeam.getName() \u003d\u003d this.getName()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getId() \u003d\u003d this.getId()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getParticipants() \u003d\u003d this.getParticipants()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getSubject() \u003d\u003d this.getSubject()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getLocation() \u003d\u003d this.getLocation()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getMentor() \u003d\u003d this.getMentor()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getScore() \u003d\u003d this.getScore()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getProjectName() \u003d\u003d this.getProjectName()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getProjectType() \u003d\u003d this.getProjectType();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" ID: \")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Subject: \")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getSubject())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Mentor: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getMentor().orElse(null))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Score: \")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getScore())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Project Name: \")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getProjectName())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Project Type: \")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getProjectType())"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Participants: \")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(participantsString);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 202
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/EntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Each child of EntityList should behave as a singleton."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public abstract class EntityList implements ReadableEntityList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * Gets the entity from the entityList."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * @param id"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * @return Entity"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    abstract Entity get(Id id);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    // This exception will be ModelException - Pending Joanna\u0027s PR."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * Updates the given entity in the list using the id of the entity argument."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * @param entity"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * @return boolean"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    abstract boolean update(Entity entity);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    // As above, exception will be generalized."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * Deletes the entity from the entity list using the ID."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * @param id"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * @throws Exception"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    abstract  delete(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * Adds the entity into the entity list"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * @param entity"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     * @throws Exception"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//    abstract void add(Entity entity) throws AlfredException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This generates the id for the next entity object to be created."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    abstract Id generateID();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    abstract public boolean contains(Id id);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    abstract public List\u003c? extends Entity\u003e list();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/IssueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Issue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class IssueList extends EntityList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cIssue\u003e issues;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int lastUsedId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public IssueList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.issues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets Issue by ID."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Issue"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Issue get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Issue to get cannot be found.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates Issue by ID."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedIssue"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean update(Id id, Issue updatedIssue) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.issues.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.issues.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.issues.set(i, updatedIssue);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the issue into the list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param issue"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Issue issue) throws AlfredException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (i.getId() \u003d\u003d issue.getId()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredRuntimeException(\"Issue to add cannot be found.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.issues.add(issue);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes team by id."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Issue delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.issues.remove(i);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return i;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Issue to delete cannot be found.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns a list but with element type Issue."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003cIssue\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cIssue\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.issues;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the issues."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003cIssue\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.issues;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id generateID() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.I, this.lastUsedId);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/MentorList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class MentorList extends EntityList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cMentor\u003e mentors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int lastUsedId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public MentorList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets Mentor by ID."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Mentor to get does not exist\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates Mentor by ID."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedMentor"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean update(Id id, Mentor updatedMentor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.mentors.size(); i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.mentors.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mentors.set(i, updatedMentor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the mentor into the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Mentor mentor) throws AlfredException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId() \u003d\u003d mentor.getId()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredRuntimeException(\"Item to add already exists!\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentors.add(mentor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes Mentor by id."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mentors.remove(m);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Mentor to delete does not exist.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns a list but with element type Mentor."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003cMentor\u003e."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cMentor\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentors;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the mentors."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003cMentor\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentors;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id generateID() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.M, this.lastUsedId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/ParticipantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class ParticipantList extends EntityList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cParticipant\u003e participants;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int lastUsedId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ParticipantList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       this.participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "       this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets participant by id."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the participant to get does not exist."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Participant to get does not exist\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates participant by id."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedParticipant"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean update(Id id, Participant updatedParticipant) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.participants.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.participants.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participants.set(i, updatedParticipant);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // Participant to update does not exist"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds participant to the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if there was an error while adding."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d participant.getId()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredRuntimeException(\"Participant already exists in list\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants.add(participant);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes participant by ID."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if error while deleting."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participants.remove(p);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Participant to delete does not exist\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the list but with element type Participant."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003cParticipant\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cParticipant\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participants;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the participants."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003cParticipant\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participants;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id generateID() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId++;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.P, this.lastUsedId);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/ReadableEntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public interface ReadableEntityList {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given entity list contains a certain entity."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the entities."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003c? extends Entity\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003c? extends Entity\u003e list();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/TeamList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class TeamList extends EntityList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cTeam\u003e teams;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int lastUsedId;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public TeamList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets team by their ID."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: this.teams) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Team to get does not exist!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates team by ID."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedTeam"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean update(Id id, Team updatedTeam) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.teams.size(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.teams.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.teams.set(i, updatedTeam);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the team into the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param team"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Team team) throws AlfredException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: this.teams) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.getId() \u003d\u003d team.getId()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredRuntimeException(\"Team to add already exists.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teams.add(team);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes team by id."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: this.teams) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.teams.remove(t);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Team to delete cannot be found.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns a list but with element type Team."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003cTeam\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cTeam\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teams;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the teams."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003cTeam\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teams;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team p: this.teams) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id generateID() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.T, this.lastUsedId);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 132
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateEntityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Signals that the operation will result in duplicate Entity (Entities are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Creates a new instance of DuplicateEntityException according to type of entity."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param type Type of entity."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public DuplicateEntityException(String type) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(\"Operation would result in duplicate \" + type + \" s\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/EntityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Signals that the operation is unable to find the specified Entity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * This is due to incorrect index specified."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class EntityNotFoundException extends AlfredRuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Creates a new instance of EntityNotFoundException according to type of entity."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param type Type of entity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public EntityNotFoundException(String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(type + \"is not found\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AlfredStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.IssueList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface AlfredStorage extends UserPrefsStorage, TeamListStorage,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantListStorage, IssueListStorage, MentorListStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TeamList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParticipantList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IssueList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getIssueListFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cIssueList\u003e readIssueList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveIssueList(IssueList issueList) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MentorList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList) throws IOException;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 61,
      "hcwong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AlfredStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.IssueList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Manages storage of Entity (Participant, Mentor, Issue, Team) and UserPref data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class AlfredStorageManager implements AlfredStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ParticipantListStorage pStore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private MentorListStorage mStore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private IssueListStorage iStore;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private TeamListStorage tStore;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public AlfredStorageManager(ParticipantListStorage pStore,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                MentorListStorage mStore,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                IssueListStorage iStore,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                TeamListStorage tStore,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.pStore \u003d pStore;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mStore \u003d mStore;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.iStore \u003d iStore;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.tStore \u003d tStore;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParticipantList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pStore.getParticipantListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readParticipantList(pStore.getParticipantListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pStore.readParticipantList(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveParticipantList(pList, pStore.getParticipantListFilePath());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pStore.saveParticipantList(pList, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MentorList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mStore.getMentorListFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readMentorList(mStore.getMentorListFilePath());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mStore.readMentorList(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveMentorList(mList, mStore.getMentorListFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mStore.saveMentorList(mList, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d IssueList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getIssueListFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return iStore.getIssueListFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cIssueList\u003e readIssueList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readIssueList(iStore.getIssueListFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cIssueList\u003e readIssueList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return iStore.readIssueList(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveIssueList(IssueList iList) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveIssueList(iList, iStore.getIssueListFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveIssueList(IssueList iList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        iStore.saveIssueList(iList, filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TeamList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tStore.getTeamListFilePath();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readTeamList(tStore.getTeamListFilePath());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tStore.readTeamList(filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList) throws IOException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveTeamList(tList, tStore.getTeamListFilePath());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        tStore.saveTeamList(tList, filePath);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 172
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IssueListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.IssueList}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface IssueListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getIssueListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns IssueList data as a {@link IssueList}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cIssueList\u003e readIssueList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getIssueListFilePath()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cIssueList\u003e readIssueList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link IssueList} to the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param issueList cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveIssueList(IssueList issueList) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveIssueList(IssueList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveIssueList(IssueList issueList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 42,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIssue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Issue}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedIssue {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Issue\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String issueType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final Boolean isCompleted;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterIssue} with the given participant details."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedIssue(@JsonProperty(\"name\") String name, @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                            @JsonProperty(\"issueType\") String issueType, @JsonProperty(\"isCompleted\") Boolean isCompleted,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                            @JsonProperty(\"prefixTypeStr\") String prefixTypeStr, @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.issueType \u003d issueType;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Issue} into this class for Jackson use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedIssue(Issue source) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        isCompleted \u003d source.isCompleted();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        issueType \u003d source.getType().name();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Issue} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Issue toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Description\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final String modelDescription \u003d description;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (isCompleted \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"IsCompleted\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Boolean modelIsCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (issueType \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, IssueType.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!IssueType.isValidIssueType(issueType)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(IssueType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final IssueType modelIssueType \u003d IssueType.valueOf(issueType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Issue(modelName, modelId, modelDescription, modelIssueType, modelIsCompleted);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMentor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Mentor}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedMentor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Mentor\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String organization;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterMentor} with the given participant details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedMentor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"organization\") String organization,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"subject\") String subject, @JsonProperty(\"prefixTypeStr\") String prefixTypeStr,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Mentor} into this class for Jackson use."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedMentor(Mentor source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        phone \u003d source.getPhone().toStorageValue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        email \u003d source.getEmail().toStorageValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        organization \u003d source.getOrganization().toStorageValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        subject \u003d source.getSubject().toStorageValue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Mentor} object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Mentor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (organization \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(Organization)\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(organization)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelOrganization \u003d new Name(organization);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, SubjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!SubjectName.isValidSubjectName(subject)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final SubjectName modelSubjectName \u003d SubjectName.valueOf(subject);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Mentor(modelName, modelId, modelPhone, modelEmail, modelOrganization, modelSubjectName);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedParticipant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Participant}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedParticipant {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Participant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterParticipant} with the given participant details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedParticipant(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"prefixTypeStr\") String prefixTypeStr,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Participant} into this class for Jackson use."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedParticipant(Participant source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        phone \u003d source.getPhone().toStorageValue();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        email \u003d source.getEmail().toStorageValue();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Participant} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Participant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Participant(modelName, modelEmail, modelPhone, modelId);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPrefixType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.Entity.PrefixType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class JsonAdaptedPrefixType {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Prefix field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final String Participant \u003d \"P\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final String prefixType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public JsonAdaptedPrefixType(@JsonProperty(\"prefixType\") String prefixType){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.prefixType \u003d prefixType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public JsonAdaptedPrefixType(PrefixType source){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        prefixType \u003d source.toStorageValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public PrefixType toModelType() throws IllegalValueException{"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (prefixType \u003d\u003d null) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (!PrefixType.isValidPrefix(prefixType)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return modelPrefixType;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTeam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Team;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Team}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedTeam {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Team\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String teamName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final JsonAdaptedMentor mentor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int score;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String projectName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String projectType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int location;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e pList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdaptedTeam} with the given person details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedTeam(@JsonProperty(\"teamName\") String teamName, @JsonProperty(\"mentor\") JsonAdaptedMentor mentor,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"subject\") String subject,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"score\") int score, @JsonProperty(\"projectName\") String projectName,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"projectType\") String projectType, @JsonProperty(\"location\") int location,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e pList,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"prefixTypeStr\") String prefixTypeStr, @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectType \u003d projectType;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (pList !\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.pList.addAll(pList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Team} into this class for Jackson use."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedTeam(Team source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectType \u003d projectType;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (pList !\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.pList.addAll(pList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        teamName \u003d source.getTeamName().toStorageValue();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        subject \u003d source.getSubject().name();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        score \u003d source.getScore.toStorageValue(); //Not implemented currently"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        projectName \u003d source.getProjectName().toStorageValue();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        projectType \u003d source.getProjectType().name();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        location \u003d source.getLocation().toStorageValue();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mentor \u003d JsonAdaptedMentor(source.getMentor().get()); //Must deal with Optional"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pList.addAll(source.getParticipants().get().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .map(JsonAdaptedParticipant::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Team} object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Team toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final List\u003cParticipant\u003e modelParticipants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedParticipant p : pList) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            modelParticipants.add(p.toModelType());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (teamName \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(teamName)\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(teamName)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelTeamName \u003d new Name(teamName);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, SubjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!SubjectName.isValidSubjectName(subject)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final SubjectName modelSubject \u003d SubjectName.valueOf(subject);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Score.isValidScore(score)){"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Score modelScore \u003d new Score(score);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (projectName \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(projectName)\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(projectName)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelProjectName \u003d new Name(projectName);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (projectType \u003d\u003d null) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, ProjectType.class.getSimpleName()));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!ProjectType.isValidProjectType(projectType)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(ProjectType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final ProjectType modelProjectType \u003d ProjectType.valueOf(projectType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (mentor \u003d\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Mentor.class.getSimpleName()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Todo: Check whether mentor validation is necessary"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //if (!Mentor.isValidLocation(location)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //    throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Mentor modelMentor \u003d mentor.toModelType();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Team(modelId, modelTeamName, modelParticipants, modelMentor, modelSubject, modelScore, modelProjectName, modelProjectType, modelLocation);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonIssueListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access IssueList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonIssueListStorage implements IssueListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonIssueListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonIssueListStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getIssueListFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cIssueList\u003e readIssueList() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readIssueList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readIssueList()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cIssueList\u003e readIssueList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableIssueList\u003e jsonIssueList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableIssueList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonIssueList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cIssueList\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonIssueList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveIssueList(IssueList iList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveIssueList(iList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveIssueList(IssueList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveIssueList(IssueList iList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(iList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableIssueList(iList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMentorListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access MentorList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonMentorListStorage implements MentorListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMentorListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonMentorListStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readMentorList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readMentorList()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableMentorList\u003e jsonMentorList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableMentorList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonMentorList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cMentorList\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonMentorList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveMentorList(mList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveMentorList(MentorList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(mList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMentorList(mList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonParticipantListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access ParticipantList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonParticipantListStorage implements ParticipantListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonParticipantListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonParticipantListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readParticipantList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readParticipantList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableParticipantList\u003e jsonParticipantList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableParticipantList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonParticipantList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cParticipantList\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonParticipantList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveParticipantList(pList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveParticipantList(ParticipantList)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(pList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableParticipantList(pList), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableIssueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable IssueList that is serializable to JSON format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"issuelist\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableIssueList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Issue list contains duplicate issue(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedIssue\u003e issues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableIssueList} with the given issues."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableIssueList(@JsonProperty(\"issues\") List\u003cJsonAdaptedIssue\u003e issues) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.issues.addAll(issues);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code IssueList} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableIssueList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableIssueList(IssueList source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        issues.addAll(source.list()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                            .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                            .map((Entity i) -\u003e new JsonAdaptedIssue((Issue) i))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code IssueList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public IssueList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        IssueList issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedIssue jsonAdaptedIssue : issues) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Issue issue \u003d jsonAdaptedIssue.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //TODO: Check whether this checking of existing issues is necessary with the team"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //if (issueList.hasIssue(issue)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //    throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            issueList.add(issue);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return issueList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMentorList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable MentorList that is serializable to JSON format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"mentorlist\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableMentorList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Mentor list contains duplicate mentor(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedMentor\u003e mentors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableMentorList} with the given mentors."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableMentorList(@JsonProperty(\"mentors\") List\u003cJsonAdaptedMentor\u003e mentors) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentors.addAll(mentors);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code MentorList} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMentorList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableMentorList(MentorList source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //mentors.addAll(source.list().stream().map(JsonAdaptedMentor::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mentors.addAll(source.list()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .map((Entity m) -\u003e new JsonAdaptedMentor((Mentor) m))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code MentorList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public MentorList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedMentor jsonAdaptedMentor : mentors) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Mentor mentor \u003d jsonAdaptedMentor.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //TODO: Check whether this checking of existing mentors is necessary with the team"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //if (mentorList.hasMentor(mentor)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //    throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            mentorList.addMentor(mentor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mentorList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableParticipantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable ParticipantList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"participantlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableParticipantList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Participant list contains duplicate participant(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableParticipantList} with the given persons."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableParticipantList(@JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e participants) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.participants.addAll(participants);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code ParticipantList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableParticipantList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableParticipantList(ParticipantList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        // participants.addAll(source.list().stream().map(JsonAdaptedParticipant::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        participants.addAll(source.list()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .map((Entity p) -\u003e new JsonAdaptedParticipant((Participant) p))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code ParticipantList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ParticipantList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedParticipant jsonAdaptedParticipant : participants) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Participant participant \u003d jsonAdaptedParticipant.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //TODO: Check whether this checking of existing participants is necessary with the team"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //if (participantList.hasParticipant(participant)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //    throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            participantList.add(participant);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return participantList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTeamList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable TeamList that is serializable to JSON format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"teamlist\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableTeamList {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Team list contains duplicate team(s).\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedTeam\u003e teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableTeamList} with the given teams."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableTeamList(@JsonProperty(\"teams\") List\u003cJsonAdaptedTeam\u003e teams) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teams.addAll(teams);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code TeamList} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTeamList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableTeamList(TeamList source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        teams.addAll(source.list()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .map((Entity t) -\u003e new JsonAdaptedTeam((Team) t))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TeamList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public TeamList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedTeam jsonAdaptedTeam : teams) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Team team \u003d jsonAdaptedTeam.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //TODO: Check whether this checking of existing teams is necessary with the project team"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //if (teamList.hasTeam(team)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //    throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            teamList.addTeam(team);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return teamList;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTeamListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access TeamList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonTeamListStorage implements TeamListStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTeamListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonTeamListStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readTeamList(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readTeamList()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableTeamList\u003e jsonTeamList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableTeamList.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonTeamList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cTeamList\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonTeamList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveTeamList(tList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveTeamList(TeamList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(tList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTeamList(tList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MentorListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.MentorList}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface MentorListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns MentorList data as a {@link MentorList}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getMentorListFilePath()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link MentorList} to the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mentorList cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveMentorList(MentorList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 42,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ParticipantListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.TeamList}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface ParticipantListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns ParticipantList data as a {@link ParticipantList}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getParticipantListFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link ParticipantList} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param participantList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveParticipantList(ParticipantList)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 43,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TeamListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.TeamList}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface TeamListStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns TeamList data as a {@link TeamList}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getTeamListFilePath()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link TeamList} to the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param teamList cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveTeamList(TeamList)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 42,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/exceptions/LoadException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.storage.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error in loading from JSON file or Storage file into AddressBook when the app is reopened."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class LoadException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public LoadException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 14
    }
  }
]
