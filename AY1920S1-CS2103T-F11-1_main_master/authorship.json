[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d Alfred: The Hackathon Butler"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "https://travis-ci.com/AY1920S1-CS2103T-F11-1/main[image:https://travis-ci.com/AY1920S1-CS2103T-F11-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "https://app.netlify.com/sites/alfred-the-hackathon-butler/deploys[image:https://api.netlify.com/api/v1/badges/fa789a98-6a94-45b4-80c6-ea8807ad74b1/deploy-status[Netlify Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "**Alfred isn\u0027t just for Batman. He\u0027s for all you Hackathon Organisers out there, too!**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "[quote, Alfred Pennyworth, The Dark Knight]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Will you be wanting the Batpod, sir?"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Targeting the Human Resource Managers tasked with organising and managing Hackathons, Alfred is a Desktop application meant to make the job easier."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* The application provides a quick, simple and intuitive interface to manage the logistics and administrative details behind Hackathons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* The application has a Graphical User Interface, but most of the user interactions happen using a CLI (Command Line Interface)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* The origin of this codebase is the AddressBook-Level3 project, created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* Some parts of this sample application for AddressBook-Level3 were in turn inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 11,
      "-": 25,
      "john0227": 1
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "application {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        \u0027site-name\u0027: \u0027Alfred\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-F11-1/main\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 4,
      "-": 153
    }
  },
  {
    "path": "config/travis/check-trailing-whitespace.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Checks for trailing whitespace"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "git grep -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "awk \u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    BEGIN {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        FS \u003d \":\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        OFS \u003d \":\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        ret \u003d 0"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        # Only warn for markdown files (*.md) to accomodate text editors"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        # which do not properly handle trailing whitespace."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        # (e.g. GitHub web editor)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        if ($1 ~ /\\.md$/) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            severity \u003d \"WARN\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            severity \u003d \"ERROR\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            ret \u003d 1"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        print severity, $1, $2, \" trailing whitespace.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    END {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exit ret"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 25,
      "hcwong": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "AddressBook3 (AB3) was developed by the https://se-edu.github.io/docs/Team.html[se-edu] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "AB3 is to be morphed into Alfred - an app that is to be used by Hackathon HR managers to manage"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "their events. This project was developed by group F11 of CS2103T. Our team repo can be found"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "https://github.com/AY1920S1-CS2103T-F11-1/main[here]. +"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Abhiman Yadav"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::abhiman2211.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/Abhiman2211[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Product Design +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: Parser"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Brian Yen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::brianyenna.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/brianyenna[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Documentation +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Joanna Yap"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::joanna-yja.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/Joanna-YJA[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Quality Assurance +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d John Min"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::john0227.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/john0227[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Code Quality +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: Command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "\u003d\u003d\u003d Joshua Wong"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "image::hcwong.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "{empty}[http://github.com/hcwong[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "Role: Project Management + Git Master +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "Responsibilities: Model + Entity"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "john0227": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-F11-1/main/issues[issue tracker]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "   if you noticed bugs or have suggestions on how to improve Alfred."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "* *Email us* : You can also reach us through mailto:kyungho.min@u.nus.edu[this email]"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "john0227": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "By: `Team Alfred`      Since: `Sept 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Image here to the updated in the later milestones."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "UI image and description to be updated with the later milestones."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Logic Architecture image and description to be updated with the later milestones."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "image::BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* stores the lists of our various entities."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Model is the bridge between Logic and Storage and provides an abstraction of how the data is stored in memory."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* It exposes a `ReadableEntityList` which only has the list method to remind Logic that the data given should not be modified."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* The UI can be bound to these lists so that it automatically updates when the contents of the list change."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* The `Model` interface also serves as an API through which controller can edit the data stored in memory."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "NOTE: To be updated with the later milestones."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hcwong"
        },
        "content": "NOTE: To be updated with the later milestones."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* Human Resource Admin In-Charge of School of Computing \u0027Hackathon\u0027 Event"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to register participants in bulk"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to classify contacts into Mentor, Participants and Teams"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to keep track of which member is in which Team"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to keep track of the seating positions of each Team"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to keep track of Mentor assignments to Teams"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to keep track of the competition winners and prizes won"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* has a need to search for specific Mentor, Team or Participant at times"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* keep track of the relationship between Participant, Team and Mentor, such that it can be referenced at times"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* store a significant number of contacts in an organised, readable manner"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[width\u003d\"79%\",cols\u003d\"15%,\u003c20%,\u003c35%,\u003c37%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |find a Entity by name |locate details of Entity without having to go through the entire list"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |delete an Entity by name |remove entries I no longer need"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |add an Entity by name and contact information |update the list of Entities"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |updated an Entity by name and contact information |update the specific entries"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |register individuals en-masse(with provided registration information) | avoid tedious manual registration"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |keep track of winning teams and the prizes won | ensure that the prize-giving ceremony runs smoothly"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |keep track of winning teams and the prizes won | ensure that the prize-giving ceremony runs smoothly"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |make sure that I will be notified on any wrong commands that I type | make sure that I do not accidentally clutter up my list of entries"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |have a readable and organised User Interface | understand the output of my commands"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |keep track of participants who signed up late or after the event has filled up into a waitlist | manage them in case available space turns up during the Event"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |manually match Teams to Mentor | know which Mentor is in charge of a team"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* * *` |Admin In-Charge |keep track of where each Team or Mentor is seating|usher them to their places during the actual event"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* *` |Admin In-Charge |know my sponsor\u0027s needs and arrival time | adequately cater to their needs and allocate manpower accordingly"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* *` |Admin In-Charge |keep track of inventory of swag | make sure they are adequately catered to all participants"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`* *` |Admin In-Charge |keep track of amount of food or catering | make sure they are adequately catered to all participants"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`*` |Admin In-Charge |automatically match Teams to Mentor by their expertise and project type of the Team | do not need to perform the matching manually"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "|`*` |Admin In-Charge |schedule meetings between Teams and Mentors | lets Mentors know when to consult each Team in an organised manner"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "(For all use cases below, the *System* is the `HackathonManager` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Delete an Entity Type(Participant, Mentor, Team)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1.  User requests a list of an entity type"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager shows a list of that entity type"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "3.  User requests to delete a specific entity in the list by name"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "4.  HackathonManager deletes the person"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 3a. The given name is invalid."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 3a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Find an Entity of a specific Entity Type(Participant, Mentor, Team)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1.  User requests a find an Entity of a specific Entity Type."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager indicates success and shows the details of the Entity."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1a. The Entity is not found in the list of Entities."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Create an Entity of a specific Entity Type(Participant, Mentor, Team)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1.  User requests to create an Entity by specifying the Entity Type and contact information."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager indicates success and shows the details of the Entity."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Update an Entity of a specific Entity Type(Participant, Mentor, Team)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1. User requests a list of an entity type"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager shows a list of that entity type"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "3.  User requests to update a specific entity in the list by name or index"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "4.  HackathonManager updates the person"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1a. The name is not found it the list of Entities."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a2. User enters new name."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Steps 1a1-1a2 are repeated until the index or name is found in the list of Entities."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1b. The index is not found it the list of Entities."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a2. User enters new index."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Steps 1a1-1a2 are repeated until the index is found in the list of Entities."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Find the top scoring Teams for each category"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "\u003d\u003d\u003d Use case: Find the top scoring Teams for each category"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "1. User requests a for the top scorers of a specific category"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "2.  HackathonManager shows the leaderboard of the category, with respective score of each team."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "* 1a. The catergory is not found."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a1. HackathonManager shows an error message."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "** 1a2. User enters category."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Steps 1a1-1a2 are repeated until the category is found."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "+"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "Use case resumes from step 2."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The system should not seem sluggish if it contains less than 1500 entities."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  Project is not intended for use on mobile and only should be used on desktop."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application assumes that the user is comfortable with the concept of the command line."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application is meant to run offline."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application is largely a personnel/HR manager, and is not expected to do anything more than that (eg hackathon finances etc)."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application is to be used for a single hackathon only and not for multiple hackathons."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application assumes that the hackathon is a short term affair (no longer than 4 days)."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The application assumes that this is an English medium hackathon and that no non-English names are expected."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "hcwong"
        },
        "content": ".  The GUI should display the result of commands in an intuitive, organized manner that is readable by the laymen(as part of the organization/ affordability of the application)."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[logging]] Logging::"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Logging uses file(s) containing information about the activity of a computer program for the developers to consult and monitor."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[entity]] Entity::"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Entities are the main objects Alfred stores. The Entities are Participant, Mentor and Team as described below."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[participant]] Participant::"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "hcwong"
        },
        "content": "It represents a participant taking part in the hackathon"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[mentor]] Mentor::"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "hcwong"
        },
        "content": "It represents a mentor available for teams to choose"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "hcwong"
        },
        "content": "[[team]] Team::"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Team is the base unit of this project. It contains references to an associated list of participants and an optional mentor."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "hcwong"
        },
        "content": "*Google Sheets*"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "hcwong"
        },
        "content": "Author: Google"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* This is extremely versatile as Google Sheets come with a list of extremely helpful macros that could help in the storage of participants."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* The display and UI of Google Sheets is extremely intuitive and will come as second nature to anyone using the web."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Convenient and accessible by multiple HR personnel simultaneously."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Google Sheets has no concept of objects and thus it cannot accurately depict the relationships between our different entities."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* As above, it is hard to look for relationships between our entities, such as Team/Participant associations."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Google Sheets may be useful for storing information, but it does not support command line arguments."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "hcwong"
        },
        "content": "* Google Sheets is also unable to perform input validation as it lacks the logic to do so."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "hcwong"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum. +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "hcwong"
        },
        "content": "   _Note: If you are a OS X user, you might need to run this from your command line instead._"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 393,
      "Joanna-YJA": 133,
      "hcwong": 52
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d Alfred - The Hackathon Butler (User Guide)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-F11-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "By: `Team F11-1`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Since: `August 2019`"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Licence: `MIT`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Alfred is a desktop application to help Hackathons\u0027 Human Resource Managers organise a Hackathon event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Hackathons are difficult to manage manually as they involve different groups of individuals, each"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "of whom have a different role to play and agenda to fulfill in the Hackathon. Alfred helps streamline"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "this organisation and management process, allowing you to quickly get up to speed with the logistics"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "and administrative details of the Hackathon you are organising."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Furthermore, Alfred is *optimized for those who prefer to work with a Command Line Interface (CLI)*, while"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "maintaining the benefits of having visual responses in a Graphical User Interface."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Interested? Well, head to \u003c\u003cQuick Start\u003e\u003e to get started. We hope Alfred serves you well!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ".  Download the latest `alfred.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for Alfred."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ".  Double-click the file to start the app. Alternatively, if you use a Mac, type the command `java -jar alfred.jar`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "on terminal in the jar file\u0027s directory to open start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ".  Here are some sample commands you can experiment with:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* *`list teams`* : lists teams in the hackathon"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* *`add participant n/John Doe p/98765432 e/johnd@example.com`* : adds a new participant named `John Doe` to the Hackathon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* *`delete mentor 3`* : removes the mentor with ID 3 from the hackathon."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "*Prelude - Command Format*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Words in `UPPER_CASE` are the parameters which you need to supply. For example, in `add mentor n/NAME`,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "`NAME` is a parameter which you need to specify as the mentor\u0027s name, for example `add mentor n/John Doe`."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* You can type the parameters can be in any order. For instance, if the command specifies `n/NAME p/PHONE_NUMBER`,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "you may input `p/PHONE_NUMBER n/NAME` and Alfred will still deem it as an acceptable command."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Words in {curly braces} indicate values for the command that you need to supply."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "For example in the case of `add {mentor/participant/list}`, you can choose to type `add mentor`, `add participant` or `add team`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "This command displays a help page in a separate pop-up window. Should you require further information,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "the pop-up window also includes links to further references and documentation. +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Adding an Entity: `add {participant/mentor/team}`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Use this command to add an entity for Alfred to keep track of. +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Creates an Entity as specified by you. Each Entity object will have a unique ID autmatically assigned to it."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* As of version 1.1, you must provide all the fields. There are no optional fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "****"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a Participant: `add participant [PARAMETERS]`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Format: `add participant n/NAME p/PHONE_NUMBER e/EMAIL_ADDRESS`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `add participant n/John Doe p/98765432 e/johnd@example.com`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `add participant n/Betsy Crowe e/betsycrowe@example.com p/1234567`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a Mentor: `add mentor [PARAMETERS]`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Format: `add mentor  n/NAME p/PHONE_NUMBER e/EMAIL_ADDRESS o/ORGANIZATION s/SPECIALISATION`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `add mentor n/Professor Superman p/91236549 e/clarkkent@gmail.com o/Daily Planet s/Artificial Intelligence`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `add mentor n/Doctor Batman p/91236549 e/bruce@gmail.com o/Google s/Augmented Reality`"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a Team: `add team [PARAMETERS]`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Format: `add team n/NAME s/SUBJECT pn/PROJECT_NAME pt/PROJECT_TYPE l/LOCATION`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `add team n/Team01 s/Artificial Intelligence pn/EmotionTrain pt/Public Welfare l/COM1-0210`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `add team n/HackathonWinners4Sure s/Augmented Reality pn/Path-ify pt/Navigation l/COM2-0102`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Updating an Entity: `edit {mentor/participant/team} ID [PARAMETERS]`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Edits an entity based on the supplied parameter values you supply."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Updates the Entity with `ID` you specified. The ID is a unique identifier for the Entity."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* You must provide at least one of the optional fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `edit mentor M01 \\nNewMentorName`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `edit team T01 \\nNewTeamName`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `edit participant P01 \\nNewParticipantNAme`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `edit mentor M01 /nNewMentorName`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `edit team T01 n/NewTeamName`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `edit participant P01 n/NewParticipantNAme`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Listing all Entities : `list {mentor/team/participant}`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Shows a list of all the Entities that Alfred keeps track of +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* The fields of the Entity will be displayed on the Graphical User Interface."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `list mentor M01`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `list participant P01`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* `list team T01`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `list mentor` will list all mentors stored within Alfred."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `list participant` will list all hackathon participants stored within Alfred."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `list team` will list all hackathon teams stored within Alfred."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Deleting an Entity: `delete {participant/mentor/team} ID`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Deletes an Entity, so that Alfred will no longer keep track of that Entity."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "This is a permanent operation, so please be careful."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* Deletes the Entity with the ID that you specify."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "* As of version 1.1, the delete operation is permanent and irreversible. Be careful."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `delete mentor M01` will delete the mentor with ID M01 from Alfred."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `delete participant P01` will delete the participant with ID P01 from Alfred."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `delete team T01` will delete the team with ID T01 from Alfred."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Saving the data: `save`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Data in Alfred is saved to the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "There is no need for you to save the data manually."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Finding a Specific Entity: `find {mentor/team/participant} NAME`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "You may search for Entities via their name, instead of their ID, in case you find that the ID is difficult to keep track of. +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `find participant n/John Doe` will display a list of all participants in the Hackathon who are named \"John Doe\", or have \"John Doe\" in their name."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `find mentor n/Joshua Wong` will display a list of all mentors in the Hackathon who are named \"Joshua Wong\", or have \"Joshua Wong\" in their name."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `find team n/FutureHackathonWinner` will display a list of all teams in the Hackathon that are named \"FutureHackathonWinner\", or have \"FutureHackathonWinner\" in their name."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Judging and Leaderboard Features"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d\u003d List Team Ranking: `showLeaderboard`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Use this command to display the ranking of the teams in the hackathon in descending order of their points."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d\u003d Get the top k teams: `getTop NUMBER`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Use this command to list the top k teams in the leaderboard, where k is the number (NUMBER) which you specify."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `getTop 5` will display the top 5 teams with the highest points in the hackathon."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `getTop 20` will display the top 20 teams with the highest points in the hackathon."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Update points: `updatePoints TEAM_ID NEW_POINTS`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Update the team with ID TEAM_ID to have points NEW_POINTS."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Update Winner: `updateWinnerCategiry PRIZE_CATEGORY TEAM_ID`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Updates the winner of a particular prize category"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d List Prize Categories: `listPrizes`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Lists the prize categories and their winners (if any)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Bulk Registration: `addBulk PATH_TO_CSV_FILE`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "You may add multiple participants at once into Alfred through the specification of a .csv file"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `addBulk C:\\User\\Hackathon2019\\participant.csv` will import data from the participant.csv file into Alfred."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "\u003d\u003d\u003d Seating: `locate {PARTICIPANT/TEAM}` (Coming in v2.0)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "Find where a particular participant or team is seated."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `locate n/Brian` will tell you where the participant Brian is seated."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "* `locate n/GenericTeamName` will tell you where the team GenericTeamName is seated."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Swag (Coming in v2.0)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Add Swag: `add swag DESCRIPTION QUANTITY`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Add swag to inventory"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Examples: `add swag Android Plushie 5`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Track inventory of available swags: `list swag`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "List the currently available swag"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Schedule (Coming in v2.0)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Add schedule: `addSchedule TIME TEAM_ID MENTOR_ID`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Add a schedule for a team"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Update schedule: `updateSchedule SCHEDULE_ID TIME TEAM_ID MENTOR_ID`"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Update a schedule for a team"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Delete schedule: `deleteSchedule SCHEDULE_ID`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "Delete a Schedule for a Team"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Food (Coming in v2.0)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Add Food Company and Inventory: `addFoodCompany COMPANY_NAME INVENTORY QUANTITY`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Mark Food as Received: `receiveFood COMPANY_NAME INVENTORY QUANTITY`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d List Food Inventory: `list food`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d Waitlist (Coming in v2.0)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Add to waitlist: `addToWaitList USER_ID`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d Remove from waitlist: `removeFromWaitList USER_ID`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "\u003d\u003d\u003d\u003d List by Registration Time: `listWaitList`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* `add n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]...` +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 t/friend t/colleague`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 84,
      "Abhiman2211": 78,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/AlfredException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error thrown by the system."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * {@code AlfredException} is the superclass of the following exception:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * IllegalValueException, DataConversionException, AlfredRuntimeException."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public abstract class AlfredException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an instance of {@code AlfredException}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param message should contain relevant information on the cause of exception."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an instance of {@code AlfredException}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param message should contain relevant information on the cause of exception."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param cause {@code Throwable} contain the type of error or exception thrown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an instance of {@code AlfredException}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param cause {@code Throwable} contain the type of error or exception thrown."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredException(Exception cause) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/AlfredRuntimeException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error during the runtime of the system."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Superclass of DuplicateEntityException."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class AlfredRuntimeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /** Constructs an instance of {@code AlfredRuntimeException}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @paraa message should contain relevant information on the cause of runtime exception."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public AlfredRuntimeException(String message) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //TODO: Update this with the 4 different EntityLists"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_TYPE \u003d \"Unknown entity type\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INCOMPLETE_INPUT \u003d \"User input is incomplete\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The entity index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // to set restrictions as some operations can only be applied to some entity"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_INVALID_TYPE \u003d \"The type of entity is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "Joanna-YJA": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error during conversion of data from one format to another."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class DataConversionException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /** Constructs an instance of {@code DataConversionException}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param cause Can have one of two main causes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * 1) IOException from error reading from JSON file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * 2) Illegal value exception, thrown when there are illegal values in json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "Joanna-YJA": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an exception thrown to signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class IllegalValueException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "Joanna-YJA": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String, String...)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "john0227": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Capitalizes given string and returns it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * The first letter is capitalized while the rest are lower-cased. \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * e.g."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"\") -\u003e \"\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"alfred\") -\u003e \"Alfred\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *     \u003cli\u003ecapitalize(\"aLFRed\") -\u003e \"Alfred\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param s String to be capitalized."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Capitalized string."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static String capitalize(String s) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (s.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return s;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "john0227": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 209
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Adds an {@link Entity} to Alfred."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class AddCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Adds a {@link Mentor} to Alfred."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddMentorCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields: */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Mentor mentor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddMentorCommand(Mentor mentor) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(mentor);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See AddIssueCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Adds a {@link Participant} to Alfred."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddParticipantCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addParticipant\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_SUCCESS \u003d \"New participant added: %s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_DUPLICATE_PARTICIPANT \u003d \"This participant already exists in this Hackathon\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Participant participant;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddParticipantCommand(Participant participant) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(participant);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.participant \u003d participant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "            model.addParticipant(this.participant);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Should Model be checking if there are duplicate persons?"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PARTICIPANT);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.participant.toString()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/addcommand/AddTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Adds a {@link Team} to Alfred."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class AddTeamCommand extends AddCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields: */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Team team;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public AddTeamCommand(Team team) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(team);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.team \u003d team;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See AddIssueCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Deletes an {@link Entity} in Alfred."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected DeleteCommand(Id id) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Deletes a {@link Mentor} in Alfred."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteMentorCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteMentorCommand(Id id) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // see DeleteIssueCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Deletes a {@link Participant} in Alfred."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteParticipantCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Later, update this constant to say participant name is invalid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d \"The participant ID provided is invalid\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private static final String MESSAGE_DELETE_PARTICIPANT_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteParticipantCommand(Id id) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToBeDeleted;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToBeDeleted \u003d model.deleteParticipant(this.id);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // Model checking if index is invalid?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PARTICIPANT_SUCCESS,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                               participantToBeDeleted.toString()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/deletecommand/DeleteTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Deletes a {@link Team} in Alfred."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class DeleteTeamCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public DeleteTeamCommand(Id id) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See DeleteIssueCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Edits an {@link Entity} in Alfred."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class EditCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_TYPE \u003d \"edit\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    EditCommand(Id id) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Stores the details to edit the entity with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * corresponding field value of the entity."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditEntityDescriptor {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        protected Name name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        protected Id id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditEntityDescriptor() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditEntityDescriptor(EditEntityDescriptor toCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setName(toCopy.name);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setId(toCopy.id);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.id);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cId\u003e getId() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.id);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Setters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setId(Id id) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.id \u003d id;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!(other instanceof EditEntityDescriptor)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "            EditEntityDescriptor e \u003d (EditEntityDescriptor) other;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return this.getName().equals(e.getName())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 this.getId().equals(e.getId());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Edits a {@link Mentor} in Alfred."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditMentorCommand extends EditCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditMentorDescriptor editMentorDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditMentorCommand(Id id, EditMentorDescriptor editMentorDescriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editMentorDescriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editMentorDescriptor \u003d editMentorDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // see EditIssueCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Creates and returns a new {@code Mentor} with the details of {@code mentorToEdit}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * edited with {@code editMentorDescriptor}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param mentorToEdit {@code Mentor} that will be updated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param editMentorDescriptor Descriptor with the details to edit {@code mentorToEdit}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Updated {@code Mentor}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Mentor createEditedMentor(Mentor mentorToEdit, EditMentorDescriptor editMentorDescriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Set each field to updated value"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See EditCommand#EditPersonDescriptor for more context"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // return new Mentor(/* Necessary Fields */);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Stores the details to edit the {@code Mentor} with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * corresponding field value of the {@code Mentor}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditMentorDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Implement the remaining attributes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Edits a {@link Participant} in Alfred."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditParticipantCommand extends EditCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_EDIT_PARTICIPANT_SUCCESS \u003d \"Edited Participant: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PARTICIPANT \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"The participant index provided is invalid\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditParticipantDescriptor editParticipantDescriptor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantCommand(Id id, EditParticipantDescriptor editParticipantDescriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editParticipantDescriptor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editParticipantDescriptor \u003d editParticipantDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToEdit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToEdit \u003d model.getParticipant(this.id);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant editedParticipant \u003d this.createEditedParticipant(participantToEdit,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                                     this.editParticipantDescriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Model should check if there exists duplicates in list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * i.e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "         *     throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "        if (model.updateParticipant(this.id, editedParticipant)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PARTICIPANT_SUCCESS, editedParticipant.toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(MESSAGE_DUPLICATE_PARTICIPANT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Creates and returns a new {@code Participant} with the details {@code participantToEdit}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * edited with {@code editParticipantDescriptor}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param participantToEdit {@code Participant} that will be updated."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param editParticipantDescriptor Descriptor with the details to edit {@code participantToEdit}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Updated {@code Participant}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Participant createEditedParticipant(Participant participantToEdit,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                EditParticipantDescriptor editParticipantDescriptor) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "        assert participantToEdit !\u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Name updatedName \u003d editParticipantDescriptor.getName().orElse(participantToEdit.getName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id updatedId \u003d editParticipantDescriptor.getId().orElse(participantToEdit.getId());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Email updatedEmail \u003d editParticipantDescriptor.getEmail().orElse(participantToEdit.getEmail());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Phone updatedPhone \u003d editParticipantDescriptor.getPhone().orElse(participantToEdit.getPhone());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Reorder parameters as necessary"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new Participant(updatedName, updatedId, updatedEmail, updatedPhone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Stores the details to edit the {@code Participant} with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * corresponding field value of the {@code Participant}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditParticipantDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditParticipantDescriptor() {}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public EditParticipantDescriptor(EditParticipantDescriptor toCopy) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "            super(toCopy);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setEmail(toCopy.email);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.isAnyFieldEdited()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 CollectionUtil.isAnyNonNull(this.email, this.phone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Getters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.email);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return Optional.ofNullable(this.phone);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /* \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Setters \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "john0227"
        },
        "content": "            if (!(other instanceof EditParticipantDescriptor)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "john0227"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "john0227"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "john0227"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "john0227"
        },
        "content": "            EditParticipantDescriptor e \u003d (EditParticipantDescriptor) other;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "john0227"
        },
        "content": "            return super.equals(other)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "john0227"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 153
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/editcommand/EditTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.editcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Edits a {@link Team} in Alfred."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditTeamCommand extends EditCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private EditTeamDescriptor editTeamDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditTeamCommand(Id id, EditTeamDescriptor editTeamDescriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(editTeamDescriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.editTeamDescriptor \u003d editTeamDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // see EditIssueCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Creates and returns a new {@code Team} with the details {@code teamToEdit}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * edited with {@code editTeamDescriptor}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param teamToEdit {@code Team} that will be updated."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @param editTeamDescriptor Descriptor with the details to edit {@code teamToEdit}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return Updated {@code Team}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "    private Team createEditedTeam(Team teamToEdit, EditTeamDescriptor editTeamDescriptor) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Set each field to updated value"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See EditCommand#EditPersonDescriptor for more context"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // return new Team(/* Necessary Fields */);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Stores the details to edit the {@code Team} with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * corresponding field value of the {@code Team}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static class EditTeamDescriptor extends EditEntityDescriptor {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * Implement the remaining attributes"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * There are 4 main scenario where CommandException is thrown:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 1) Could not store data to file"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 2) Person index is invalid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 3) Duplicate person with the same identity is added to model"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 4) Type of entity(mentor, participant, team) is invalid)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class CommandException extends AlfredException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "Joanna-YJA": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Lists every {@link Entity} (i.e. mentor, participant, team) in Alfred."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_TYPE \u003d \"list\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Possible format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // TeamList teamList \u003d model.getTeamList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // I think Team should have a method that lists its connections (e.g. Team#showConnection)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // i.e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Team: \u003cTeam Name\u003e (Mentor: \u003cMentor Name\u003e)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // Participants:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //    \u003cParticipant 1\u003e (in this team)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //    ..."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "        //    \u003cParticipant n\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * // List teams and its connections"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * for (Team team : teamList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "         *     print(team.showConnection());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * // or teamList.stream().forEach(Team::showConnection());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "         *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * // List issues"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * (new ListIssueCommand()).execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Lists every {@link Mentor} in Alfred."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListMentorCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See ListIssueCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Lists every {@link Participant} in Alfred."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListParticipantCommand extends ListCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all participants\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "        model.getParticipantList().list().stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                  .forEach(p -\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      HashMap\u003cString, String\u003e fieldMap \u003d p.viewMinimal();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      for (String key : fieldMap.keySet()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                          toPrint.append(StringUtil.capitalize(key))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                 .append(\" : \")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                 .append(fieldMap.get(key))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                                 .append(\" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                      System.out.println(toPrint.toString().trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "                                  });"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/listcommand/ListTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Lists every {@link Team} in Alfred."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListTeamCommand extends ListCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // see ListIssueCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Shows detailed view of the {@link Entity} at specified ID."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "public abstract class ViewCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    protected Id id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    ViewCommand(Id id) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(id);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewMentorCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Shows detailed view of the {@link Mentor} at specified ID."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewMentorCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewMentorCommand(Id id) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See ViewIssueCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewParticipantCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Shows detailed view of the {@link Participant} at specified ID."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewParticipantCommand extends ViewCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Showed specified participant\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "            \"The participant index provided is invalid\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "    // Eventually change to take in Name (or add a new constructor)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewParticipantCommand(Id id) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Participant participantToView;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "            participantToView \u003d model.getParticipant(this.id);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "        } catch (AlfredException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PARTICIPANT_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "        HashMap\u003cString, String\u003e fieldMap \u003d participantToView.viewDetailed();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "        StringBuilder toPrint \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        for (String key : fieldMap.keySet()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "            toPrint.append(StringUtil.capitalize(key))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "                   .append(\" : \")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "                   .append(fieldMap.get(key))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "                   .append(\" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "        System.out.println(toPrint.toString().trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/viewcommand/ViewTeamCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.commands.viewcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Shows detailed view of the {@link Team} at specified ID."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ViewTeamCommand extends ViewCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /* Possible Fields? */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public ViewTeamCommand(Id id) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "        super(id);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // See ViewIssueCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return new CommandResult(\"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d AlfredParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Person person \u003d new Person(name, phone, email, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 4,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddParticipantCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.addcommandparser.AddParticipantCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @param userInput full   input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        case AddParticipantCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new AddParticipantCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 5,
      "-": 75,
      "john0227": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AlfredParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.ProjectType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AlfredParserUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Id parseIndex(String oneBasedIndex, PrefixType prefix) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        oneBasedIndex \u003d oneBasedIndex.trim().toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.substring(1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String expectedPrefix \u003d prefix.name();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex) || !oneBasedIndex.startsWith(expectedPrefix)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int id \u003d Integer.parseInt(trimmedIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Id(prefix, id);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Parses a {@code String} into a {@code Location}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param location"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Location"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ParseException if the {@code String} is invalid."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        int trimmedLocation \u003d Integer.parseInt(location.trim());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Parses a {@code String} into a {@code Subject}."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param subject"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return SubjectName"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ParseException if the {@code String} is invalid."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static SubjectName parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!SubjectName.isValidSubjectName(trimmedSubject)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return SubjectName.SOCIAL;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Parses a {@code String} into a {@code ProjectType}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ProjectType"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws ParseException if the {@code String} is invalid."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static ProjectType parseProjectType(String type) throws ParseException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (!SubjectName.isValidSubjectName(trimmedType)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return ProjectType.PLACEHOLDER;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 2,
      "Abhiman2211": 141,
      "hcwong": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_ORGANISATION \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT_NAME \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_PROJECT_NAME \u003d new Prefix(\"pn/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_PROJECT_TYPE \u003d new Prefix(\"pt/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_ISSUE \u003d \"issue\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_MENTOR \u003d \"mentor\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_PARTICIPANT \u003d \"participant\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public static final String ENTITY_TEAM \u003d \"team\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 5,
      "-": 14,
      "john0227": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return Optional.of(AlfredParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddMentorCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link AddMentorCommand} object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddMentorCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddMentorCommand}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code AddMentorCommand} object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddMentorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ORGANISATION,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                        PREFIX_SUBJECT_NAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name name \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Phone phone \u003d AlfredParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Email email \u003d AlfredParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name organisation \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_ORGANISATION).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        SubjectName subject \u003d AlfredParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT_NAME).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id id \u003d new MentorList().generateId();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Mentor mentor \u003d new Mentor(name, id, phone, email, organisation, subject);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new AddMentorCommand(mentor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 40,
      "john0227": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddParticipantCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link AddParticipantCommand} object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddParticipantCommandParser implements Parser\u003cAddParticipantCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code AddParticipantCommand}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code AddParticipantCommand} object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException If the user input does not conform the expected format."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name name \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Phone phone \u003d AlfredParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Email email \u003d AlfredParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id id \u003d new ParticipantList().generateId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Participant participant \u003d new Participant(name, id, email, phone);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new AddParticipantCommand(participant);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 34,
      "john0227": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/addcommandparser/AddTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PROJECT_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.addcommand.AddTeamCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.ProjectType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link AddTeamCommand} object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class AddTeamCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public AddTeamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_SUBJECT_NAME, PREFIX_PROJECT_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                        PREFIX_PROJECT_TYPE, PREFIX_LOCATION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name name \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        SubjectName subject \u003d AlfredParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT_NAME).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Name projectName \u003d AlfredParserUtil.parseName(argMultimap.getValue(PREFIX_PROJECT_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ProjectType projectType \u003d AlfredParserUtil.parseProjectType(argMultimap.getValue(PREFIX_PROJECT_TYPE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Location location \u003d AlfredParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "        Id id \u003d new TeamList().generateId();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        List\u003cParticipant\u003e participants \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Score score \u003d new Score(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Optional\u003cMentor\u003e mentor \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Team team \u003d new Team(id, name, participants, mentor, subject, score, projectName, projectType, location);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new AddTeamCommand(team);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 54,
      "john0227": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteMentorCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteMentorCommand} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DeleteMentorCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String MESSAGE_USAGE \u003d \"Wrong usage.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteMentorCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns a {@code DeleteMentorCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DeleteMentorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Id id \u003d AlfredParserUtil.parseIndex(args, PrefixType.M);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteMentorCommand(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 27,
      "john0227": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteParticipantCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteParticipantCommand} object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DeleteParticipantCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String MESSAGE_USAGE \u003d \"Wrong usage.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteParticipantCommand}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns a {@code DeleteParticipantCommand} object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DeleteParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Id id \u003d AlfredParserUtil.parseIndex(args, PrefixType.M);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteParticipantCommand(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 31,
      "john0227": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/deletecommandparser/DeleteTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.deletecommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.deletecommand.DeleteTeamCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link DeleteTeamCommand} object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class DeleteTeamCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private static final String MESSAGE_USAGE \u003d \"Wrong usage.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code DeleteTeamCommand}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns a {@code DeleteTeamCommand} object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public DeleteTeamCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            Id id \u003d AlfredParserUtil.parseIndex(args, PrefixType.T);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return new DeleteTeamCommand(id);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 30,
      "john0227": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ORGANISATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditMentorCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link EditMentorCommand} object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class EditMentorCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditMentorCommand}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code EditMentorCommand} object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditMentorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ORGANISATION,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                        PREFIX_SUBJECT_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Id id;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 31,
      "john0227": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditParticipantCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link EditParticipantCommand} object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class EditParticipantCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditParticipantCommand}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code EditParticipantCommand} object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public EditParticipantCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * This is just placeholder code. We will implement proper code"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * when the Participant class has been finalised."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "john0227": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/editcommandparser/EditTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.editcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.commands.editcommand.EditTeamCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new {@link EditTeamCommand} object."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class EditTeamCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code EditTeamCommand}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * and returns an {@code EditTeamCommand} object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * This is just placeholder code. We will implement proper code"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * when the Team class has been finalised."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 20,
      "john0227": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * ParseException is thrown is one of the 4 scenario:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 1) When the command is unknown"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 2) When the specific operation cannot be applied on an entity(invalid entity)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 3) When the command format is inaccurate"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * 4) When user input is incomplete."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "Joanna-YJA": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/listcommandparser/ListMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.listcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Parses input arguments and creates a new EditCommand object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListMentorCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // The return type of this command will also have to be corrected"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // to return a ListMentorCommand object as designed by John instead of an"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EditCommand Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * This is just placeholder code. We will implement proper code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "         * when the Mentor class has been finalised."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 22,
      "john0227": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/listcommandparser/ListParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.listcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "public class ListParticipantCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // The return type of this command will also have to be corrected"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // to return a ListParticipantCommand object as designed by John instead of an"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "        // EditCommand Object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * This is just placeholder code. We will implement proper code"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * when the Participant class has been finalised."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 24,
      "john0227": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/listcommandparser/ListTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.listcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ListTeamCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // The return type of this command will also have to be corrected"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // to return a ListTeamCommand object as designed by John instead of an"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // EditCommand Object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * This is just placeholder code. We will implement proper code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * when the Team class has been finalised."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return Optional.of(AlfredParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 50,
      "john0227": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/viewcommandparser/ViewMentorCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ViewMentorCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // The return type of this command will also have to be corrected"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // to return a ViewTeamCommand object as designed by John instead of an"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // EditCommand Object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * This is just placeholder code. We will implement proper code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * when the Team class has been finalised."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return Optional.of(AlfredParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 50,
      "john0227": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/viewcommandparser/ViewParticipantCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ViewParticipantCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // The return type of this command will also have to be corrected"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // to return a ViewTeamCommand object as designed by John instead of an"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // EditCommand Object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * This is just placeholder code. We will implement proper code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * when the Team class has been finalised."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return Optional.of(AlfredParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 50,
      "john0227": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/viewcommandparser/ViewTeamCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "package seedu.address.logic.parser.viewcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.AlfredParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "public class ViewTeamCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // The return type of this command will also have to be corrected"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // to return a ViewTeamCommand object as designed by John instead of an"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        // EditCommand Object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * This is just placeholder code. We will implement proper code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         * when the Team class has been finalised."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return Optional.of(AlfredParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 50,
      "john0227": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ReadableEntityList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the ParticipantList."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadableEntityList getParticipantList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the TeamList."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadableEntityList getTeamList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the MentorList."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ReadableEntityList getMentorList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Below is the API exposed for the controllers to call */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Participant methods */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Participant getParticipant(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addParticipant(Participant participant) throws AlfredException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean updateParticipant(Id id, Participant participant);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Participant deleteParticipant(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Team methods */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeam(Id teamId) throws AlfredException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeamByParticipantId(Id participantId) throws AlfredException;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team getTeamByMentorId(Id mentorId) throws AlfredException;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addTeam(Team team) throws AlfredException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean updateTeam(Id teamId, Team team);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Team deleteTeam(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Mentor methods */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Mentor getMentor(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    void addMentor(Mentor mentor) throws AlfredException;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean updateMentor(Id id, Mentor mentor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Mentor deleteMentor(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "hcwong": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ReadableEntityList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // EntityLists"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final ParticipantList participantList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final TeamList teamList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final MentorList mentorList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d EntityListMethods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the participant list located in the Model Manager."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadableEntityList getParticipantList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the team list located in the Model Manager."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadableEntityList getTeamList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the mentor list located in the Model Manager."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ReadableEntityList"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ReadableEntityList getMentorList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Entity Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Participant Methods */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the participant by id."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant Object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the Participant cannot be found."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant getParticipant(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList.get(id);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the participant into the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addParticipant(Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participantList.add(participant);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the participant in the list, if any."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateParticipant(Id id, Participant participant) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList.update(id, participant);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the participant by id."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant deleteParticipant(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participantList.delete(id);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Team Methods*/"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets team by id."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeam(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList.get(id);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the team by participant id."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participantId"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeamByParticipantId(Id participantId) throws AlfredException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cTeam\u003e teams \u003d this.teamList.getSpecificTypedList();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: teams) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            for (Participant p: t.getParticipants()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                if (p.getId() \u003d\u003d participantId) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Team with said participant cannot be found.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the team by mentor id."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentorId"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team getTeamByMentorId(Id mentorId) throws AlfredException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        List\u003cTeam\u003e teams \u003d this.teamList.getSpecificTypedList();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: teams) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cMentor\u003e mentor \u003d t.getMentor();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (mentor.isPresent()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                if (mentor.get().getId() \u003d\u003d mentorId) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    return t;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Team with said participant cannot be found.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the team."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamId"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedTeam"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateTeam(Id teamId, Team updatedTeam) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList.update(teamId, updatedTeam);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the team."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param team"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addTeam(Team team) throws AlfredException {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teamList.add(team);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the team."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team deleteTeam(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teamList.delete(id);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /* Mentor Methods */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the mentor by id."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor getMentor(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList.get(id);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds mentor into the list."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void addMentor(Mentor mentor) throws AlfredException {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentorList.add(mentor);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates the mentor."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedMentor"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean updateMentor(Id id, Mentor updatedMentor) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList.update(id, updatedMentor);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes the mentor."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor that is deleted"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor deleteMentor(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentorList.delete(id);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 159,
      "hcwong": 217
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path teamListFilePath \u003d Paths.get(\"data\" , \"teamlist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path participantListFilePath \u003d Paths.get(\"data\" , \"participantlist.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path issueListFilePath \u003d Paths.get(\"data\" , \"issuelist.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path mentorListFilePath \u003d Paths.get(\"data\" , \"mentorlist.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //TODO: Remove this method after integration"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return teamListFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return participantListFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mentorListFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getIssueListFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return issueListFilePath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setTeamListFilePath(Path teamListFilePath) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(teamListFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teamListFilePath \u003d teamListFilePath;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setParticipantListFilePath(Path participantListFilePath) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(participantListFilePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.participantListFilePath \u003d participantListFilePath;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setMentorListFilePath(Path mentorListFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(mentorListFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentorListFilePath \u003d mentorListFilePath;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void setIssueListFilePath(Path issueListFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(issueListFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.issueListFilePath \u003d issueListFilePath;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //TODO: Remove this method after integration"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 42,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: email address is present and not null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * field values is  validated as declared in {@link #isValidEmail(String)}, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data field"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param email A valid email address that is present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test email address."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid email format according to regex."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Email objects have the same data fields."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Email object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Email object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format, for storage."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 13,
      "hcwong": 53,
      "Joanna-YJA": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Entity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a {@code Entity} in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Entity is the superclass of Participant, Mentor, Team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public abstract class Entity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    protected final Id id; // Note: id is unique and should never be mutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    protected Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Entity}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param id Identification number of Entity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param name Name of Entity."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public Entity(Id id, Name name) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id getId() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.id;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the bare details of the Entity in the HashMap format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String, each key name is mapped to name of Entity,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * key id is mapped to id of Entity."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fields.put(\"name\", this.getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fields.put(\"id\", this.getId().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fields;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    };"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the full details of the Entity, according to Entity type, in the HashMap format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String, each key is mapped to a data field of the specific Entity type."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public abstract HashMap\u003cString, String\u003e viewDetailed();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 40,
      "Joanna-YJA": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Id.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Identification number in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class Id {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_INVALID_NUMBER \u003d \"Number should be of the format integer,\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"and adhere to the following constraints: \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"1. It should  number which can be any digit.\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"The number must: \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -be at least one digit long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -contain only digits from 0 to 9\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String NUMBER_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private PrefixType prefix;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final int number;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Id}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param prefix PrefixType to indicate type of entity."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param number Index number of entity."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Id(PrefixType prefix, int number) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(number);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidNumber(number), MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.number \u003d number;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if number is a valid number."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param number Number."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean Whether number is in valid format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidNumber(int number) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Integer.toString(number).matches(NUMBER_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public PrefixType getPrefix() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int getNumber() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return number;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPrefix(PrefixType prefix) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(this.prefix, this.number);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Id objects have the same data fields(Prefix and number).."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Id object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Id object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Id)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Id otherId \u003d ((Id) other);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherId.getPrefix() \u003d\u003d this.getPrefix()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherId.getNumber() \u003d\u003d this.getNumber();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Id in string format."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(getPrefix())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\"-\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getNumber());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hcwong": 50,
      "Joanna-YJA": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Issue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represent an Issue raised by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Issue extends Entity {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private IssueType type;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private boolean isCompleted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Optional\u003cDate\u003e time;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor with date."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param isCompleted"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Issue("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Id id,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            String description,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            IssueType type,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cDate\u003e time,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            boolean isCompleted"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Issue (Name name, Id id, String description, IssueType type, boolean isCompleted) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.isCompleted \u003d isCompleted;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.time \u003d Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean isCompleted() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return isCompleted;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public IssueType getType() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cDate\u003e getTime() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setters"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setCompleted(boolean completed) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        isCompleted \u003d completed;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setType(IssueType type) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setTime(Optional\u003cDate\u003e time) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the minimal view of this entity."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * maps name, id, type and isCompleted to their respective value."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", this.name.toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", this.id.toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"type\", this.type.toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"isCompleted\", Boolean.toString(this.isCompleted));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns the detailed view of this entity."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * maps name, id, type, description, time and isCompleted to their respective value."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", this.name.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", this.id.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"type\", this.type.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"description\", this.description);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"time\", this.time.toString());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"isCompleted\", Boolean.toString(this.isCompleted));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Issue in string format."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Id: \")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Type: \")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getType())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Time: \")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getTime())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\"isCompleted\")"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(isCompleted());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(name, id, type, description, time, isCompleted);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Issue)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Issue otherIssue \u003d ((Issue) other);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.getName() \u003d\u003d otherIssue.getName()"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.getId() \u003d\u003d otherIssue.getId()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.getType() \u003d\u003d otherIssue.getType()"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.getDescription() \u003d\u003d otherIssue.getDescription()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.getTime() \u003d\u003d otherIssue.getTime()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 this.isCompleted() \u003d\u003d otherIssue.isCompleted();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 8,
      "hcwong": 146,
      "Joanna-YJA": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/IssueType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an Issue type(the type of issue raised by the user)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Issue type can be of the form Todo, Deadline, Event."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum IssueType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    DEADLINE(\"Deadline\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    EVENT(\"Event\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    TODO(\"Todo\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"IssueType must be one of the following: Todo, Deadline, Event\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final String stringFormat;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    IssueType(String stringFormat) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.stringFormat \u003d stringFormat;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.stringFormat;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid issueType."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param issueType String of issueType."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether issueType is an instance of IssueType."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static boolean isValidIssueType(String issueType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            IssueType validIssueType \u003d IssueType.valueOf(issueType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 10,
      "hcwong": 13,
      "Joanna-YJA": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a seating location of an Entity in the address book. Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * details are present and not null, field values is validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER \u003d \"Table number should be an integer\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"and adhere to the following constraints:\\n\" + \"1. The tableNumber can be any digit.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"The tableNumber must:\\n\" + \"    -be at least one digit long\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"    -contain only digits from 0 to 9\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String TABLE_NUMBER_REGEX \u003d \"^\\\\d+$\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final int tableNumber;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param tableNumber Table that team is seated on."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Location(int tableNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(tableNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidLocation(tableNumber), MESSAGE_CONSTRAINTS_INVALID_TABLE_NUMBER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.tableNumber \u003d tableNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given number is a valid seating location."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param tableNumber Seating number of Entity."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean indicating whether the table number is valid."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidLocation(int tableNumber) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (tableNumber \u003c 0) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (tableNumber \u003e 1000) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Integer.toString(tableNumber).matches(TABLE_NUMBER_REGEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int getTableNumber() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return tableNumber;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Objects.hash(this.tableNumber);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Location objects have the same data fields. This defines"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * a stronger notion of equality between two Location object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Locatio object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Location otherLocation \u003d ((Location) other);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return otherLocation \u003d\u003d this | otherLocation.getTableNumber() \u003d\u003d this.getTableNumber();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Location in string format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        builder.append(\" Table Number: \").append(getTableNumber());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Location in string format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int toStorageValue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.tableNumber;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 29,
      "Joanna-YJA": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Mentor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a {@code Mentor} in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Mentor extends Entity {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Name organization;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName subject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Mentor}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param name Name of {@code Mentor}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param id Idenfication number of (@code Mentor}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param phone Phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param email Email address."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param organization Namme of organization."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Id id,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Phone phone,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Email email,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name organization,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName subject"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getOrganization() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return organization;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public SubjectName getSubject() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return subject;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setOrganization(Name organization) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setSubject(SubjectName subject) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the full details of the Mentor, in the HashMap format."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String, each key is mapped to a specific data field."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"organization\", getOrganization().toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"subject\", getSubject().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Mentor in string format."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" ID: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Organization: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getOrganization())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Subject: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getSubject());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Mentor objects have the same data fields."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Mentor object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Mentor object."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Mentor)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Mentor otherMentor \u003d ((Mentor) other);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherMentor.getName() \u003d\u003d this.getName()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getId() \u003d\u003d this.getId()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getPhone() \u003d\u003d this.getPhone()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getEmail() \u003d\u003d this.getEmail()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getOrganization() \u003d\u003d this.getOrganization()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 otherMentor.getSubject() \u003d\u003d this.getSubject();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 123,
      "Joanna-YJA": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an Entity\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: details is present and not null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * field values is  validated as declared in {@link #isValidName(String)}, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    //Constants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \",.-\u0027\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"Names should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"1. It should contain alphabets, spaces, and these special characters, excluding\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). \\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            + \"2.Contain at least one character\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid name."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid name format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        //TODO: Fix the regex in this class."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        //return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Name in string format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Name in string format."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Name objects have the same data fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Name object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Name object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "Abhiman2211": 3,
      "hcwong": 48,
      "Joanna-YJA": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Participant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a {@code Participant} in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Participant extends Entity {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code Pariticipant}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param name Name of Entity."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param id Identification number of Entity."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param email Email address of Participant."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param phone Phone number of Participant."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant(Name name, Id id, Email email, Phone phone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(id, name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns the full details of the Participant, in the HashMap format."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return HashMap Maps String to a String, each key is mapped to a data field."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"phone\", getPhone().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"email\", getEmail().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(id, name, email, phone);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Participant objects have the same data fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Participant object."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Participant object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Participant)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Participant otherParticipant \u003d ((Participant) other);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //return otherParticipant.getName() \u003d\u003d this.getName()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //        \u0026\u0026 otherParticipant.getId() \u003d\u003d this.getId()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //        \u0026\u0026 otherParticipant.getPhone() \u003d\u003d this.getPhone()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //        \u0026\u0026 otherParticipant.getEmail() \u003d\u003d this.getEmail();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return otherParticipant.getName().equals(this.getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 otherParticipant.getId().equals(this.getId())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 otherParticipant.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                \u0026\u0026 otherParticipant.getEmail().equals(this.getEmail());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Participant in string format."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" ID: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getEmail());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 8,
      "hcwong": 84,
      "Joanna-YJA": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Entity\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Only applies to Team, Participant and Mentor."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: email address is present and not null,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * field values is  validated as declared in {@link #isValidPhone(String)}, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"-. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private static final String DIGITS \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"Phone numbers be of the format (optional)country-code + phone-number \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"and should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"1. The country code, if it is not existent in constructor, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"the country code \u0027+65\u0027 will be added. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"2. The phone number should be at least three digit long.\\n \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"The phone number must:\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"    -contain numbers\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"    -contain these special characters only, excluding parentheses,\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"(\" + SPECIAL_CHARACTERS + \").\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String COUNTRY_CODE_REGEX \u003d \"\\\\+\" + DIGITS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String PHONE_NUMBER_PART_REGEX \u003d \"[\" + SPECIAL_CHARACTERS + \"]\" + \"?\" + DIGITS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String PHONE_NUMBER_REGEX \u003d \"(\" + PHONE_NUMBER_PART_REGEX + \")\" + \"*\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d COUNTRY_CODE_REGEX + PHONE_NUMBER_REGEX;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param phone A valid phone number, which is present and not null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (!(phone.charAt(0) \u003d\u003d \u0027+\u0027)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            String newPhone \u003d \"+65 \" + phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            checkArgument(isValidPhone(newPhone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            value \u003d newPhone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            value \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid phone number."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Phone number."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid phone number format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns true if both Phone objects have the same data fields."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * This defines a stronger notion of equality between two Phone object."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param other Other Phone object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 2,
      "hcwong": 48,
      "Joanna-YJA": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/PrefixType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Prefix type to indicate the type of Entity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: Prefix type values are validated according to enum type, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum PrefixType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    P, // Participant"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    M, // Mentor"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    T, // Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    I; // Issue"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Constants"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"Prefix type should be a string of either one of the following values:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"P: to indicate Entity is a Participant\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"M: to indicate Entity is a Mentor\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"I: to indicate Entity is an Issue\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            + \"T: to indicate Entity is  a Team\\n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Email address in string format, for storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.name();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid PrefixType."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test String of prefix."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid prefix format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static boolean isValidPrefixType(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            PrefixType result \u003d PrefixType.valueOf(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 5,
      "hcwong": 7,
      "Joanna-YJA": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/ProjectType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Project type to indicate the type of Entity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Guarantees: Project type values are validated according to enum type, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum ProjectType {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    PLACEHOLDER(\"placeholder\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Placeholder text here\"; //TODO: Update this"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final String projectTypeString;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs an {@code ProjectType}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param projectTypeString"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    ProjectType(String projectTypeString) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectTypeString \u003d projectTypeString;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Project type in string format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.projectTypeString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Project type in string format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid ProjectType."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param projectType String of project type."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether projectType is in valid format."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static boolean isValidProjectType(String projectType) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            ProjectType validProjectType \u003d ProjectType.valueOf(projectType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 10,
      "Abhiman2211": 1,
      "hcwong": 14,
      "Joanna-YJA": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Score.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents a Score attribute of {@code Team} and {@code Leaderboard}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " *  * Guarantees: details are present and not null,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " *  * field values is  validated as declared in {@link #isValidScore(int)}, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Score {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Score should contain only positive integers from 0 to 100\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int score;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Constructs a {@code Score}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param score A valid score of a team."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Score(int score) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(score);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidScore(score), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid score."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param score Score."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether score is in valid score format."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public static boolean isValidScore(int score) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return score \u003e\u003d 0 \u0026\u0026 score \u003c\u003d 100;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Score in string format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return Integer.toString(this.score);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns string representation of object, for storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return Score in string format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public int toStorageValue() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "hcwong": 19,
      "Joanna-YJA": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/SubjectName.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Encapsulates possible topics for a Hackathon project."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public enum SubjectName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    ENVIRONMENTAL(\"Environmental\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    SOCIAL(\"Social\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    HEALTH(\"Health\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    EDUCATION(\"Education\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"-\u0027\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            \"SubjectName should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"1. It should contain alphabets, spaces, and these special characters, excluding\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"the parentheses, (\" + SPECIAL_CHARACTERS + \"). \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "                    + \"2.Contain at least one character\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d \"^[\" + SPECIAL_CHARACTERS + \" a-zA-Z\" + \"]+$\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private final String subjectNameString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName(String subjectNameString) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        requireNonNull(subjectNameString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        checkArgument(isValidSubjectName(subjectNameString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subjectNameString \u003d subjectNameString;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Returns if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param test Name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @return boolean whether test is in valid name format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static boolean isValidSubjectName(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.subjectNameString;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public String toStorageValue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return this.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 4,
      "hcwong": 9,
      "Joanna-YJA": 36,
      "john0227": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entity/Team.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Team is the main entity of this system."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class Team extends Entity {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cParticipant\u003e participants;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Optional\u003cMentor\u003e mentor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private SubjectName subject;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Score score;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Name projectName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private ProjectType projectType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor with mentor."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamId"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param teamName"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participants"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param subject"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param score"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param projectName"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param projectType"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param location"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Id teamId,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name teamName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            List\u003cParticipant\u003e participants,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Optional\u003cMentor\u003e mentor,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            SubjectName subject,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Score score,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Name projectName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            ProjectType projectType,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            Location location"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        super(teamId, teamName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants \u003d participants;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectType \u003d projectType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Getters"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cParticipant\u003e getParticipants() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participants;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cMentor\u003e getMentor() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public SubjectName getSubject() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.subject;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Score getScore() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.score;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Name getProjectName() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.projectName;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ProjectType getProjectType() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.projectType;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.location;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // Setters"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setParticipants(List\u003cParticipant\u003e participants) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants \u003d participants;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setMentor(Optional\u003cMentor\u003e mentor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setSubject(SubjectName subject) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setScore(Score score) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setProjectName(Name projectName) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setProjectType(ProjectType projectType) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.projectType \u003d projectType;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void setLocation(Location location) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewMinimal() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public HashMap\u003cString, String\u003e viewDetailed() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        HashMap\u003cString, String\u003e result \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Mentor mentor \u003d getMentor().orElse(null);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"name\", getName().toString());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"id\", getId().toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"subject\", getSubject().toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"location\", getLocation().toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"mentor\", mentor.toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"score\", score.toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"projectName\", projectName.toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"projectType\", projectType.toString());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        result.put(\"participants\", participantsString);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return Objects.hash(id, name, participants, mentor, subject, score,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                projectName, projectType, location);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        if (!(other instanceof Team)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Team otherTeam \u003d ((Team) other);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return otherTeam.getName() \u003d\u003d this.getName()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getId() \u003d\u003d this.getId()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getParticipants() \u003d\u003d this.getParticipants()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getSubject() \u003d\u003d this.getSubject()"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getLocation() \u003d\u003d this.getLocation()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getMentor() \u003d\u003d this.getMentor()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getScore() \u003d\u003d this.getScore()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getProjectName() \u003d\u003d this.getProjectName()"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "hcwong"
        },
        "content": "               \u0026\u0026 otherTeam.getProjectType() \u003d\u003d this.getProjectType();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        Stream\u003cString\u003e participantStream \u003d participants.stream()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .map(participant -\u003e participant.toString());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        String participantsString \u003d Arrays.toString(participantStream.toArray());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" ID: \")"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Subject: \")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getSubject())"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Mentor: \")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getMentor().orElse(null))"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Score: \")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getScore())"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Project Name: \")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getProjectName())"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Project Type: \")"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(getProjectType())"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(\" Participants: \")"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                .append(participantsString);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 205,
      "Joanna-YJA": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/EntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Each child of {@code EntityList} should behave as a singleton."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public abstract class EntityList implements ReadableEntityList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * Gets the entity from the entityList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * @param id"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * @return Entity"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    abstract Entity get(Id id);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    // This exception will be ModelException - Pending Joanna\u0027s PR."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * Updates the given entity in the list using the id of the entity argument."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * @param entity"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * @return boolean"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    abstract boolean update(Entity entity);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    // As above, exception will be generalized."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * Deletes the entity from the entity list using the ID."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * @param id"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * @throws Exception"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    abstract  delete(Id id) throws AlfredException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * Adds the entity into the entity list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * @param entity"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     * @throws Exception"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    // abstract void add(Entity entity) throws AlfredException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public abstract boolean contains(Id id);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public abstract List\u003c? extends Entity\u003e list();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 48,
      "john0227": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/IssueList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "john0227"
        },
        "content": "//package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import seedu.address.model.entity.Issue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "john0227"
        },
        "content": "//import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "//public class IssueList extends EntityList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    private List\u003cIssue\u003e issues;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    private int lastUsedId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * Constructor."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public IssueList() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        this.issues \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * Gets Issue by ID."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @param id"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @return Issue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @throws AlfredException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public Issue get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                return i;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        throw new AlfredRuntimeException(\"Issue to get cannot be found.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * Updates Issue by ID."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @param id"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @param updatedIssue"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @return boolean;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public boolean update(Id id, Issue updatedIssue) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        for (int i \u003d 0; i \u003c this.issues.size(); i++) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            if (this.issues.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                this.issues.set(i, updatedIssue);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * Adds the issue into the list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @param issue"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @throws AlfredException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public void add(Issue issue) throws AlfredException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            if (i.getId() \u003d\u003d issue.getId()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                throw new AlfredRuntimeException(\"Issue to add cannot be found.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        this.issues.add(issue);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * Deletes team by id."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @param id"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @throws AlfredException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public Issue delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                this.issues.remove(i);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                return i;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        throw new AlfredRuntimeException(\"Issue to delete cannot be found.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * Returns a list but with element type Issue."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @return List\u003cIssue\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public List\u003cIssue\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        return this.issues;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * List the issues."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @return List\u003cIssue\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        return this.issues;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * Checks if a given ID exists."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @param id"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @return boolean"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        for (Issue i: this.issues) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            if (i.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "john0227"
        },
        "content": "//                return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "john0227"
        },
        "content": "//            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "john0227"
        },
        "content": "//"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * Generates the ID for the object."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     * @return ID"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "john0227"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    public Id generateID() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        this.lastUsedId++;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "john0227"
        },
        "content": "//        return new Id(PrefixType.I, this.lastUsedId);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "john0227"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "john0227": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/MentorList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * {@code MentorList} should behave as a singleton."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class MentorList extends EntityList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cMentor\u003e mentors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int lastUsedId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public MentorList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets Mentor by ID."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Mentor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Mentor to get does not exist\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates Mentor by ID."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedMentor"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean update(Id id, Mentor updatedMentor) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.mentors.size(); i++) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.mentors.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mentors.set(i, updatedMentor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the mentor into the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param mentor"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Mentor mentor) throws AlfredException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId() \u003d\u003d mentor.getId()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredRuntimeException(\"Item to add already exists!\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.mentors.add(mentor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes Mentor by id."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws Exception"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Mentor delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.mentors.remove(m);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return m;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Mentor to delete does not exist.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns a list but with element type Mentor."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Mentors."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cMentor\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentors;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the mentors."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Mentors."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.mentors;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Mentor m: this.mentors) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (m.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Id generateId() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.M, this.lastUsedId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 129,
      "john0227": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/ParticipantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * {@code ParticipantList} should behave as a singleton."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class ParticipantList extends EntityList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cParticipant\u003e participants;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int lastUsedId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public ParticipantList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets participant by id."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Participant"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if the participant to get does not exist."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Participant to get does not exist\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates participant by id."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedParticipant"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean update(Id id, Participant updatedParticipant) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.participants.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.participants.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participants.set(i, updatedParticipant);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // Participant to update does not exist"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds participant to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param participant"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if there was an error while adding."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Participant participant) throws AlfredException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d participant.getId()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredRuntimeException(\"Participant already exists in list\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.participants.add(participant);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes participant by ID."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException if error while deleting."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Participant delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.participants.remove(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return p;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Participant to delete does not exist\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets the list but with element type Participant."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Participants."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cParticipant\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participants;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the participants."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Participants."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.participants;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Participant p: this.participants) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Id generateId() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId++;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.P, this.lastUsedId);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 131,
      "john0227": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/ReadableEntityList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "john0227"
        },
        "content": " * Aims to make each EntityList readable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public interface ReadableEntityList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given entity list contains a certain entity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    boolean contains(Id id);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the entities."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return List\u003c? extends Entity\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    List\u003c? extends Entity\u003e list();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This generates the id for the next entity object to be created."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Id"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "john0227"
        },
        "content": "    Id generateId();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 28,
      "john0227": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/entitylist/TeamList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hcwong"
        },
        "content": "package seedu.address.model.entitylist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "john0227"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "john0227"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "john0227"
        },
        "content": " * This interface serves as the new API for the model."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "john0227"
        },
        "content": " * {@code TeamList} should behave as a singleton."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "john0227"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": "public class TeamList extends EntityList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private List\u003cTeam\u003e teams;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    private int lastUsedId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public TeamList() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Gets team by their ID."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Team"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team get(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: this.teams) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Team to get does not exist!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Updates team by ID."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param updatedTeam"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean update(Id id, Team updatedTeam) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (int i \u003d 0; i \u003c this.teams.size(); i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (this.teams.get(i).getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.teams.set(i, updatedTeam);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Adds the team into the list."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param team"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public void add(Team team) throws AlfredException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: this.teams) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.getId() \u003d\u003d team.getId()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                throw new AlfredRuntimeException(\"Team to add already exists.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.teams.add(team);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Deletes team by id."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws AlfredException"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Team delete(Id id) throws AlfredException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team t: this.teams) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (t.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                this.teams.remove(t);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return t;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        throw new AlfredRuntimeException(\"Team to delete cannot be found.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Returns a list but with element type Team."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Teams."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003cTeam\u003e getSpecificTypedList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teams;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * List the teams."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "john0227"
        },
        "content": "     * @return List of Teams."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public List\u003c? extends Entity\u003e list() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return this.teams;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Checks if a given ID exists."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return boolean"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public boolean contains(Id id) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        for (Team p: this.teams) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            if (p.getId() \u003d\u003d id) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Generates the ID for the object."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return ID"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "john0227"
        },
        "content": "    public Id generateId() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        this.lastUsedId++;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Id(PrefixType.T, this.lastUsedId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hcwong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hcwong": 129,
      "john0227": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 3,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.exceptions.EntityNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DuplicateEntityException(\"Duplicate person found\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new EntityNotFoundException(\"Person not found: \" + target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DuplicateEntityException(\"Duplicate person found: \" + target);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new EntityNotFoundException(\"Person not found: \" + toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DuplicateEntityException(\"Duplicate persons found\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 7,
      "-": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/DuplicateEntityException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Signals that the operation will result in duplicate Entity (Entities are considered duplicates"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class DuplicateEntityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Creates a new instance of DuplicateEntityException according to type of entity."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param type Type of entity."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public DuplicateEntityException(String type) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(\"Operation would result in duplicate \" + type + \" s\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 13,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/exceptions/EntityNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.model.person.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredRuntimeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Signals that the operation is unable to find the specified Entity."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * This is due to incorrect index specified."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class EntityNotFoundException extends AlfredRuntimeException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * Creates a new instance of EntityNotFoundException according to type of entity."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     * @param type Type of entity."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public EntityNotFoundException(String type) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(type + \"is not found\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AlfredStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Alfred Storage is the API to the storage of the system."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface AlfredStorage extends UserPrefsStorage, TeamListStorage,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantListStorage, MentorListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TeamList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParticipantList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MentorList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList) throws IOException;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 52,
      "hcwong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AlfredStorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Manages storage of Entity (Participant, Mentor, Issue, Team) and UserPref data in local storage."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class AlfredStorageManager implements AlfredStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private ParticipantListStorage pStore;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private MentorListStorage mStore;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private TeamListStorage tStore;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public AlfredStorageManager(ParticipantListStorage pStore,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                MentorListStorage mStore,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                TeamListStorage tStore,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.pStore \u003d pStore;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mStore \u003d mStore;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.tStore \u003d tStore;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ParticipantList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pStore.getParticipantListFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throws DataConversionException, IOException, AlfredException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readParticipantList(pStore.getParticipantListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList(Path filePath)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throws DataConversionException, IOException, AlfredException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return pStore.readParticipantList(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveParticipantList(pList, pStore.getParticipantListFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pStore.saveParticipantList(pList, filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d MentorList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mStore.getMentorListFilePath();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException, AlfredException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readMentorList(mStore.getMentorListFilePath());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList(Path filePath)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throws DataConversionException, IOException, AlfredException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mStore.readMentorList(filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveMentorList(mList, mStore.getMentorListFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mStore.saveMentorList(mList, filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TeamList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tStore.getTeamListFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException, AlfredException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readTeamList(tStore.getTeamListFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException, IOException, AlfredException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return tStore.readTeamList(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveTeamList(tList, tStore.getTeamListFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        tStore.saveTeamList(tList, filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 137,
      "hcwong": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedMentor.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Mentor}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedMentor {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Mentor\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String organization;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterMentor} with the given participant details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedMentor(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"organization\") String organization,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                             @JsonProperty(\"subject\") String subject,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                             @JsonProperty(\"prefixTypeStr\") String prefixTypeStr,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.organization \u003d organization;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Mentor} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedMentor(Mentor source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        phone \u003d source.getPhone().toStorageValue();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        email \u003d source.getEmail().toStorageValue();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        organization \u003d source.getOrganization().toStorageValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        subject \u003d source.getSubject().toStorageValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Mentor} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Mentor toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (organization \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(Organization)\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(organization)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelOrganization \u003d new Name(organization);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, SubjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!SubjectName.isValidSubjectName(subject)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final SubjectName modelSubjectName \u003d SubjectName.valueOf(subject);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Mentor(modelName, modelId, modelPhone, modelEmail, modelOrganization, modelSubjectName);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 117,
      "hcwong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedParticipant.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Participant}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedParticipant {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Participant\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdapterParticipant} with the given participant details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedParticipant(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"email\") String email, @JsonProperty(\"prefixTypeStr\") String prefixTypeStr,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Participant} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedParticipant(Participant source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        name \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        phone \u003d source.getPhone().toStorageValue();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        email \u003d source.getEmail().toStorageValue();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Participant} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Participant toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return new Participant(modelName, modelId, modelEmail, modelPhone);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 96,
      "hcwong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 2,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPrefixType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * JsonAdaptedPrefixType is the JSON representation of {@code PrefixType}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class JsonAdaptedPrefixType {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Prefix field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    private final String prefixType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public JsonAdaptedPrefixType(@JsonProperty(\"prefixType\") String prefixType) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        this.prefixType \u003d prefixType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public JsonAdaptedPrefixType(PrefixType source) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        prefixType \u003d source.toStorageValue();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This converts the JSON Adapted PrefixType to the actual {@code PrefixType} Object."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public PrefixType toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        if (prefixType \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixType)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixType);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        return modelPrefixType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 3,
      "Joanna-YJA": 33,
      "hcwong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTeam.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.ProjectType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Score;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * Jackson-friendly version of {@link Team}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonAdaptedTeam {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Team\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String teamName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final JsonAdaptedMentor mentor;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String subject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int score;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String projectName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String projectType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e pList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final String prefixTypeStr;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final int idNum;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonAdaptedTeam} with the given person details."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedTeam(@JsonProperty(\"teamName\") String teamName, @JsonProperty(\"mentor\") JsonAdaptedMentor mentor,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"subject\") String subject,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"score\") int score, @JsonProperty(\"projectName\") String projectName,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"projectType\") String projectType, @JsonProperty(\"location\") int location,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e pList,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           @JsonProperty(\"prefixTypeStr\") String prefixTypeStr, @JsonProperty(\"idNum\") int idNum) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teamName \u003d teamName;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentor \u003d mentor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.subject \u003d subject;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.score \u003d score;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectName \u003d projectName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.projectType \u003d projectType;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.prefixTypeStr \u003d prefixTypeStr;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.idNum \u003d idNum;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (pList !\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.pList.addAll(pList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code Team} into this class for Jackson use."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonAdaptedTeam(Team source) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (pList !\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            this.pList.addAll(pList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        teamName \u003d source.getName().toStorageValue();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        subject \u003d source.getSubject().name();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        score \u003d source.getScore().toStorageValue(); //Not implemented currently"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        projectName \u003d source.getProjectName().toStorageValue();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        projectType \u003d source.getProjectType().name();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        location \u003d source.getLocation().toStorageValue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mentor \u003d new JsonAdaptedMentor(source.getMentor().get()); //Must deal with Optional"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        prefixTypeStr \u003d source.getId().getPrefix().name();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        idNum \u003d source.getId().getNumber();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        pList.addAll(source.getParticipants().stream()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .map(JsonAdaptedParticipant::new)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Team} object."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Team toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final List\u003cParticipant\u003e modelParticipants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedParticipant p : pList) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            modelParticipants.add(p.toModelType());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (teamName \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(teamName)\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(teamName)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelTeamName \u003d new Name(teamName);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (subject \u003d\u003d null) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, SubjectName.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!SubjectName.isValidSubjectName(subject)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(SubjectName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final SubjectName modelSubject \u003d SubjectName.valueOf(subject);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Score.isValidScore(score)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Score.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Score modelScore \u003d new Score(score);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (projectName \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()) + \"(projectName)\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Name.isValidName(projectName)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Name modelProjectName \u003d new Name(projectName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (projectType \u003d\u003d null) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, ProjectType.class.getSimpleName()));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!ProjectType.isValidProjectType(projectType)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(ProjectType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final ProjectType modelProjectType \u003d ProjectType.valueOf(projectType);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (mentor \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Mentor.class.getSimpleName()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //Todo: Check whether mentor validation is necessary"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //if (!Mentor.isValidLocation(location)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //    throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Mentor modelMentor \u003d mentor.toModelType();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (prefixTypeStr \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, PrefixType.class.getSimpleName()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!PrefixType.isValidPrefixType(prefixTypeStr)) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(PrefixType.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final PrefixType modelPrefixType \u003d PrefixType.valueOf(prefixTypeStr);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!Id.isValidNumber(idNum)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new IllegalValueException(Id.MESSAGE_CONSTRAINTS_INVALID_NUMBER);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final int modelIdNum \u003d idNum;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        final Id modelId \u003d new Id(modelPrefixType, modelIdNum);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        return new Team(modelId, modelTeamName, modelParticipants, Optional.of(modelMentor),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "hcwong"
        },
        "content": "                modelSubject, modelScore, modelProjectName, modelProjectType, modelLocation);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 156,
      "hcwong": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonMentorListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access MentorList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonMentorListStorage implements MentorListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonMentorListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonMentorListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getMentorListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, AlfredException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readMentorList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readMentorList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException, AlfredException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableMentorList\u003e jsonMentorList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableMentorList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonMentorList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cMentorList\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonMentorList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveMentorList(mList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveMentorList(MentorList)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveMentorList(MentorList mList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(mList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableMentorList(mList), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonParticipantListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access ParticipantList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonParticipantListStorage implements ParticipantListStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonParticipantListStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonParticipantListStorage(Path filePath) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getParticipantListFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList() throws AlfredException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readParticipantList(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readParticipantList()}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    public Optional\u003cParticipantList\u003e readParticipantList(Path filePath)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throws DataConversionException, AlfredException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableParticipantList\u003e jsonParticipantList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableParticipantList.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonParticipantList.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cParticipantList\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonParticipantList.get().toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveParticipantList(pList, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveParticipantList(ParticipantList)}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveParticipantList(ParticipantList pList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(pList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableParticipantList(pList), filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 82,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableMentorList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable MentorList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"mentorlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableMentorList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Mentor list contains duplicate mentor(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedMentor\u003e mentors \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableMentorList} with the given mentors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableMentorList(@JsonProperty(\"mentors\") List\u003cJsonAdaptedMentor\u003e mentors) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.mentors.addAll(mentors);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code MentorList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableMentorList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableMentorList(MentorList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        //mentors.addAll(source.list().stream().map(JsonAdaptedMentor::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        mentors.addAll(source.list()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .map((Entity m) -\u003e new JsonAdaptedMentor((Mentor) m))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code MentorList} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public MentorList toModelType() throws IllegalValueException, AlfredException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        MentorList mentorList \u003d new MentorList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedMentor jsonAdaptedMentor : mentors) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Mentor mentor \u003d jsonAdaptedMentor.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //TODO: Check whether this checking of existing mentors is necessary with the team"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //if (mentorList.hasMentor(mentor)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //    throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            mentorList.add(mentor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return mentorList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 64,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableParticipantList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable ParticipantList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"participantlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableParticipantList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Participant list contains duplicate participant(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedParticipant\u003e participants \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableParticipantList} with the given persons."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableParticipantList(@JsonProperty(\"participants\") List\u003cJsonAdaptedParticipant\u003e participants) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.participants.addAll(participants);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code ParticipantList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableParticipantList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableParticipantList(ParticipantList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        // participants.addAll(source.list().stream().map(JsonAdaptedParticipant::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        participants.addAll(source.list()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .stream()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .map((Entity p) -\u003e new JsonAdaptedParticipant((Participant) p))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                             .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code ParticipantList} object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public ParticipantList toModelType() throws IllegalValueException, AlfredException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList participantList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedParticipant jsonAdaptedParticipant : participants) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Participant participant \u003d jsonAdaptedParticipant.toModelType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //TODO: Check whether this checking of existing participants is necessary with the team"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //if (participantList.hasParticipant(participant)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //    throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            participantList.add(participant);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return participantList;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 65,
      "hcwong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTeamList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Entity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Team;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * An Immutable TeamList that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "@JsonRootName(value \u003d \"teamlist\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonSerializableTeamList {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ENTITY \u003d \"Team list contains duplicate team(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private final List\u003cJsonAdaptedTeam\u003e teams \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Constructs a {@code JsonSerializableTeamList} with the given teams."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableTeamList(@JsonProperty(\"teams\") List\u003cJsonAdaptedTeam\u003e teams) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.teams.addAll(teams);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts a given {@code TeamList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTeamList}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonSerializableTeamList(TeamList source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        teams.addAll(source.list()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .map((Entity t) -\u003e new JsonAdaptedTeam((Team) t))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                           .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TeamList} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public TeamList toModelType() throws IllegalValueException, AlfredException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        TeamList teamList \u003d new TeamList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        for (JsonAdaptedTeam jsonAdaptedTeam : teams) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            Team team \u003d jsonAdaptedTeam.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //TODO: Check whether this checking of existing teams is necessary with the project team"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //if (teamList.hasTeam(team)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //    throw new IllegalValueException(MESSAGE_DUPLICATE_ENTITY);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            teamList.add(team);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return teamList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 63,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTeamListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " * A class to access TeamList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class JsonTeamListStorage implements TeamListStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTeamListStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public JsonTeamListStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Path getTeamListFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList() throws AlfredException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return readTeamList(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #readTeamList()}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public Optional\u003cTeamList\u003e readTeamList(Path filePath) throws AlfredException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Optional\u003cJsonSerializableTeamList\u003e jsonTeamList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                filePath, JsonSerializableTeamList.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        if (!jsonTeamList.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //Converts to Optional\u003cTeamList\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            return Optional.of(jsonTeamList.get().toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        saveTeamList(tList, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Similar to {@link #saveTeamList(TeamList)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void saveTeamList(TeamList tList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(tList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTeamList(tList), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/MentorListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.MentorList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.MentorList}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface MentorListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getMentorListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns MentorList data as a {@link MentorList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList() throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getMentorListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cMentorList\u003e readMentorList(Path filePath) throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link MentorList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param mentorList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveMentorList(MentorList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveMentorList(MentorList mentorList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 42,
      "hcwong": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ParticipantListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.TeamList}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface ParticipantListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getParticipantListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns ParticipantList data as a {@link ParticipantList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList() throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getParticipantListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    Optional\u003cParticipantList\u003e readParticipantList(Path filePath)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "            throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link ParticipantList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param participantList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveParticipantList(ParticipantList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveParticipantList(ParticipantList participantList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 41,
      "hcwong": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TeamListStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.TeamList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * Represents a storage for {@link seedu.address.model.entitylist.TeamList}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public interface TeamListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Path getTeamListFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Returns TeamList data as a {@link TeamList}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList() throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #getTeamListFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    Optional\u003cTeamList\u003e readTeamList(Path filePath) throws DataConversionException, IOException, AlfredException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * Saves the given {@link TeamList} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @param teamList cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     * @see #saveTeamList(TeamList)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void saveTeamList(TeamList teamList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "brianyenna": 43,
      "hcwong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/exceptions/LoadException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "package seedu.address.storage.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " * Represents an error in loading from JSON file or Storage file into AddressBook when the app is reopened."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "public class LoadException extends AlfredException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    public LoadException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Joanna-YJA"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Joanna-YJA": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // TODO: Reinstate this test later"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hcwong"
        },
        "content": "        // assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 160,
      "hcwong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "//        () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        private final Person person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            this.person \u003d person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            personsAdded.add(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 193,
      "hcwong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 2,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 1,
      "-": 56,
      "hcwong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 137,
      "hcwong": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 5,
      "-": 201,
      "hcwong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "import static seedu.address.logic.parser.AlfredParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseIndex(\"10\", PrefixType.M));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            -\u003e AlfredParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1), PrefixType.M));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, AlfredParserUtil.parseIndex(\"1\", PrefixType.M));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, AlfredParserUtil.parseIndex(\"  1  \", PrefixType.M));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedName, AlfredParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedName, AlfredParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedPhone, AlfredParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedPhone, AlfredParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedEmail, AlfredParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedEmail, AlfredParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedTag, AlfredParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertEquals(expectedTag, AlfredParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AlfredParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e AlfredParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        assertTrue(AlfredParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d AlfredParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 5,
      "Abhiman2211": 21,
      "-": 147,
      "hcwong": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicateEntityException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicateEntityException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        assertThrows(DuplicateEntityException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 3,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 95,
      "hcwong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 170
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Abhiman2211": 7,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonMentorListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonMentorListStorageTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void getMentorListFilePath() {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //@org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //void readMentorList() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //@org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //void testReadMentorList() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //@org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //void saveMentorList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //@org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //void testSaveMentorList() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 25,
      "hcwong": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonParticipantListStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.AlfredException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hcwong"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Participant;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entitylist.ParticipantList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "class JsonParticipantListStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    @org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    void getParticipantListFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Name n \u003d new Name(\"p one\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Id i \u003d new Id(PrefixType.P, 1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Email e \u003d new Email(\"p1@gmail.com\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Phone p \u003d new Phone(\"91231233\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Participant p1 \u003d new Participant(new Name(\"p one\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                         new Id(PrefixType.P, 1),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                         new Email(\"p1@gmail.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                         new Phone(\"91231233\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Participant p2 \u003d new Participant(new Name(\"p two\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new Id(PrefixType.P, 2),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new Email(\"p2@gmail.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new Phone(\"92222222\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        Participant p3 \u003d new Participant(new Name(\"p three\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new Id(PrefixType.P, 3),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new Email(\"p3@gmail.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                new Phone(\"93333333\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        ParticipantList pList \u003d new ParticipantList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            pList.add(p1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            pList.add(p2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            pList.add(p3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (AlfredException ae) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            System.out.println(\"Oops\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        JsonParticipantListStorage j \u003d new JsonParticipantListStorage(Paths.get(\"data\" , \"participantlist.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            j.saveParticipantList(pList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (IOException io) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            fail(\"Problem saving Participant List\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            ParticipantList newPList \u003d j.readParticipantList(Paths.get(\"data\", \"participantlist.json\")).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            List\u003cParticipant\u003e newList \u003d newPList.getSpecificTypedList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            List\u003cParticipant\u003e origList \u003d pList.getSpecificTypedList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertEquals(newList.get(0).getEmail(), origList.get(0).getEmail());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertEquals(newList.get(0).getName(), origList.get(0).getName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertEquals(newList.get(0).getId(), origList.get(0).getId());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertEquals(newList.get(0).getPhone(), origList.get(0).getPhone());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            assertEquals(newList, origList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            //assertEquals(newList, pList.getSpecificTypedList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        } catch (Exception newE) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "            fail(\"Exception encountered reading ParticipantList: \" + newE.getMessage());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //@org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //void readParticipantList() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //@org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //void testReadParticipantList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //@org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //void saveParticipantList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //@org.junit.jupiter.api.Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //void testSaveParticipantList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 85,
      "hcwong": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Constructor."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "hcwong": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hcwong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * This builds a standard {@code Person} object."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     * @return Person"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hcwong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Abhiman2211"
        },
        "content": "        return new Person(name, phone, email, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 3,
      "Abhiman2211": 1,
      "-": 83,
      "hcwong": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalMentors.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Email;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Id;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Mentor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.Phone;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.PrefixType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "import seedu.address.model.entity.SubjectName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hcwong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hcwong"
        },
        "content": " * TypicalMentors is a class with mock Mentor Objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hcwong"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "public class TypicalMentors {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Mentor A \u003d new Mentor(new Name(\"Mentor A\"),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Id(PrefixType.M, 3),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Phone(\"91111111\"),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Email(\"mentorA@gmail.com\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Name(\"Organization A\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              SubjectName.SOCIAL);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Mentor B \u003d new Mentor(new Name(\"Mentor B\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Id(PrefixType.M, 31),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Phone(\"92222222\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Email(\"mentorB@gmail.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Name(\"Organization B\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              SubjectName.EDUCATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    public static final Mentor C \u003d new Mentor(new Name(\"Mentor C\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Id(PrefixType.M, 33),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Phone(\"93333333\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Email(\"mentorC@gmail.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              new Name(\"Organization C\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "                                              SubjectName.ENVIRONMENTAL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brianyenna"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //public static MentorList getTypicalMentorList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brianyenna"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brianyenna": 35,
      "hcwong": 3
    }
  }
]
