[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "\u003d Njoy Teaching Assistant"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-W13-2/main[image:https://travis-ci.org/AY1920S1-CS2103T-W13-2/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level3[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-W13-2/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-W13-2/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "* This is a desktop Teacher Assistant application called njoy Assistant. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "* It aims to help teachers easily manage their students and activities."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "* With njoy Assistant, teachers will be able to create questions, generate quizzes, view statistics and more with just a few taps of their keyboards!"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 1,
      "alages97": 3,
      "Russell-Loh-NUS": 1,
      "-": 28,
      "fabbbbbbyy": 2
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Njoy was developed by the boys. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d Russell Loh"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::russell-loh-nus.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "{empty}[https://github.com/Russell-Loh-NUS[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d Lum Wei Boon"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::lumwb.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "{empty}[http://github.com/lumwb[github]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d Jeong Yu Han"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::jeongyh99.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "{empty}[http://github.com/jeongyh99[github]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d Fabian Chia"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::fabbbbbbyy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "{empty}[http://github.com/fabbbbbbyy[github]]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "\u003d\u003d\u003d K Alages"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "image::alages97.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "{empty}[http://github.com/alages97[github]]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 7,
      "alages97": 13,
      "-": 32
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/addressbook-level3/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* *Email us* : You can also reach the developers at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0322824@u.nus.edu (Jeong Yu Han)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0309551@u.nus.edu (Alages K)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0310763@u.nus.edu (Russell Loh)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0309657@u.nus.edu (Lum Wei Boon)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "- e0310146@u.nus.edu (Fabian Chia)"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 6,
      "-": 6
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d NJoy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "By: `Team AY1920S1-CS2103T-W13-2`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* has a need to manage classes of students"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* has a need to create questions easily"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* has a need to generate quizzes with previously created questions"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* requires a timetable manager"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* prefers efficient viewing statistics of students rather than manually computing it"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "*Value proposition*: manage classes of students faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` [Epic] |teacher |manage classes virtually |have more time for other duties"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |add a student | deal with possible changes"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |remove a student | deal with possible changes"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |mark attendance | ensure the student was present for class"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |record scores | tally the marks accurately instead of manually inputting them into the system"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "|`* * *` [Epic] |teacher |write questions to a question bank |store questions to be used later on"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "|`* * *` |teacher |have the option to format the questions as either MCQ or Open Ended |have different types of questions"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |generate quizzes with randomised questions for assignments |students are unable to copy solutions"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "from one another"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |the generated quizzes to be in a text document |easily print and distribute them to students"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* * *` |teacher |find a student by name |locate details of students without having to go through the entire list"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* *` |student |view the teacher\u0027s schedule |request for consultations in appropriate slots"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* *` |student |view my past results |track my progress and check for updates"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`* *` |student |have an editable timetable |view my timetable and request for consultations at appropriate slots"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "when the teacher is free"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "|`*` |teacher |have an editable timetable |view my timetable and let students request for consultations at"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "appropriate slots when I am free"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "(For all use cases below, the *System* is `NJoy` and the *Actor* is the `Teacher`, unless specified otherwise)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Add a student (UC01)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher enter details of student"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy saves the record of the student"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1a. Missing student details"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1a1. NJoy shows error message."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a student (UC02)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  User exist in the system"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher finds a student (UC05)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher requests to edit a student details"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy returns list of fields able to edit"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  Teacher enter the field to edit"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "5.  NJoy save the edited record"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* *a. Teacher chooses to cancel the edit"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a student (UC03)"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  User exist in the system"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher finds a student (UC05)"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher requests to delete a student"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy request for confirmation"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  Teacher confirms the deletion"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "5.  NJoy deletes the student"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 3a. Teacher chooses not to delete the student"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Find a student (UC04)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher enter name of student to find"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy display the student details"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1a. Name of student cannot be found"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1a1. NJoy shows error message"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Create a class (UC05)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher enter new class details"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy saves the new class"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1a. Class name already taken"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1a1. NJoy shows error message"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a class (UC06)"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Class exist in the system"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to edit class description"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher enters new class description"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy save the edited record"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* *a. Teacher chooses to cancel the edit"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a class (UC07)"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Class exist in the system"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to delete a class"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy request for confirmation"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  Teacher confirms the deletion"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  NJoy deletes the class"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. Teacher chooses not to delete the class"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Add student to class (UC08)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  User exist in the system"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Class exist in the system"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to add a student to class"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy adds the student to the class"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Remove student from class (UC09)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  User exist in the system"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Class exist in the system"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to remove a student from class"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy request for confirmation"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  Teacher confirms the deletion"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  NJoy remove the student from the class"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. Teacher chooses not to remove the student from the class"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Schedule class time (UC10)"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests to add an item to the timetable"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher enter details of the item"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy save the item"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. Missing item details"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 2a1. NJoy shows error message."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2b. Invalid class id"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 2b1. NJoy shows error message."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: View timetable (UC11)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher requests for the timetable"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy returns list of items in the timetable"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. List is empty"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Delete item on timetable (UC12)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Preconditions*"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Item exist in timetable"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher list items in timetable (UC11)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  Teacher request to delete item in timetable"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "3.  NJoy request for confirmation"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "4.  Teacher confirms the deletion"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "5.  NJoy remove the item from the timetable"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 2a. Teacher chooses not to remove the item from the timetable"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Use case: Creating a mcq question (UC13)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "1.  Teacher enter topic and answers to the question"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "2.  NJoy save the question"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1a. Teacher did not enter answers"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1a1. NJoy shows error message."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "* 1b. Teacher did not enter topic"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "** 1b1. NJoy shows error message."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "+"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  Should be able to hold up to 1000 students without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The system should work on both 32-bit and 64-bit environments"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The assistant should never take more than 5 seconds to process any command"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The assistant should be usable by any teacher from any academic background without much of a learning curve"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The teacher should be able to have as many classes as desired"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ".  The assistant is not required to synchronize timetables / quizzes between 2 teachers"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*MCQ* - Multiple Choice Question, a question with four possible answers, and only one correct."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Open Ended* - Open Ended Question, a question that cannot be answered with a yes or a no but with a proper sentence."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Timetable* - A chart showing the schedule to take place at particular times."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Njoy* - A shortened version of the word \"Enjoy\"."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "*Teacher* - User of the Njoy assistant who manages his/her students."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "*Student* - Entity that Teacher manages."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "*Class* - A manageable unit of Student that Teacher can create, read, edit and delete."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "fabbbbbbyy"
        },
        "content": "*Njoy*"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "Author: Jeong Yu Han"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* Faster than existing market solutions, particularly for Teachers who can type fast."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* Integrated management of taking attendance, managing classes and creating quizzes"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "as opposed to managing them separately on multiple different platforms."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* Integrated management exists on the PC only, no cloud functionality for management from home."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "* Require understanding of CLI as well as the commands to carry out the functionality of Njoy effectively."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 28,
      "Russell-Loh-NUS": 244,
      "-": 418,
      "fabbbbbbyy": 31
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d NJoy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-W13-2/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "By: `Team AY1920S1-CS2103T-W13-2`      Since: `September 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Creating and managing your students and classes have never been easier.* Njoy assistant aims to enable teachers to easily manage their students and activities right from their keyboard. With just a few commands, you will be able to *manage your classes, create questions, generate quizzes and much more!*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Manage your classes* easily with just a few strokes of your keyboard."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Attendance taking"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "//.. Note taking"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Record student scores"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Creating questions* is simple. Simply type a topic and an answer and it is done."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Easy input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Repeatable"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Generate quizzes* for your students."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Type once, generate anytime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Randomised"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Distribute"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Timetable Manager* for scheduling your classes."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Create and manage"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Schedule classes"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Class Reminders"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Repeatable daily/monthly and even yearly"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Statistics* provide a comprehensive view of your students\u0027 performance."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. View underperforming students"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ".. Trends of the academic year"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d Getting Started"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Running .jar file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Download the njoy.jar file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Double click on ‘njoy.jar’ file to run the application"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "_If you are not able to run the application using the method above, use the following:_ +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Open Terminal(Mac)/Command Prompt(Windows)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Type cd [path to directory containing jar file]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". Type ‘java -jar njoy.jar’ to run the application."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "All commands start with a forward slash “/” followed by the command name. Certain commands may include additional options and will be specified in the description. An optional field will be marked ​(optional) b​ eside the field."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Student ​- `/student`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Create and edit students."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Create student* - `/student create [name] [birthdate in DD/MM/YYYY format]​(optional)` +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/student create “John” “20/09/2006”` +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*: student no."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Edit student* ​- `/student edit [student no.]` +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/student edit 1` +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*:​ Options to edit name or birthdate"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Delete student* ​- `/student delete [student no.]`  +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/student delete 1`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Find student* ​- `/student find [name]` +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/student find “John”` +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*:​ student no."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Class​ - `​/class`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Manage classes and manage students within the class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Create class*​ - `/class create [class id] [description]​(optional)` +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class create unity “My First Class”`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Edit class description* ​- `/class edit [class id] [description]​(optional)` +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class edit unity “My Second Class”`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Delete class* ​- `/class delete [class id]` +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class delete unity`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Add student to class* ​ - `/class add [class id] [student no.]` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class add unity 1`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Remove student from class* ​ - `/class remove [class id] [student no.]` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/class remove unity 1`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Timetable​ - `​/timetable`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Manage timetable and schedule class timings"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Schedule class time* ​- `/timetable schedule [class id] [date \u0026 time in DD/MM/YYYY HH:mm format] [description]​(optional)` +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/timetable schedule unity “18/11/2019 11:00” “Math class”` +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*: ​schedule id."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View schedule for all classes​* - `/timetable view all` +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/timetable view all` +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*: ​schedule id, class id, class name, date time, description"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View schedule for specific class​* - `/timetable view [class id]` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/timetable view unity` +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Return*: ​schedule id, class id, class name, date time, description"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Delete scheduled class time* ​- `/timetable delete [schedule id]` +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/timetable delete 1`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Attendance ​-​ `/attendance`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "View and mark student’s attendance."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View attendance* ​- `/attendance show` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/attendance show`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Mark attendance* ​- `/attendance check [class id] [student no.]` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/attendance check unity 1`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "////"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Notes ​- ​`/notes`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Notes can be specified under general or class. Specifying a class note will allow you to view"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "notes specific to a class."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View all notes* ​- `/note view all` +"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note view all`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View general note* ​- `/note view general` +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note view general`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *View class note* ​- `/note view class [class id]` +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note view class unity`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Create general note​* - `/note create general “[description]”` +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note create general “Remember to attend cca briefing”`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Create class note* ​- `/note create class “[class id]” “[description]”` +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/note create class unity “Remember to meet john after class”`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "////"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Generating Questions ​-​ `/question`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Create and store questions according to the type specified."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *Open ended questions* ​- `/question open “[topic]” “[answer]”` +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g. `/question open “Which year did Singapore gain independence?” “1965”`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ". *MCQs* ​- `/question mcq “[topic]” “[answer]” “[option1]” “[option2]” “[option3]” “[option 4]”` +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "e.g `​/question mcq “Which year did Singapore gain independence?” “1965” “1963” “2019” “1926” “1965”`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "\u003d\u003d\u003d Help ​-​ `/help`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "Show all available commands usable in the application."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*Q*: Typing a command result in “Invalid command entered.” +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "*A*: Please ensure that the command is entered as specified in the format above. Note that all fields all mandatory except those marked as ​(optional).​"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 108,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.JsonStudentRecordStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.storage.StudentRecordStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        StudentRecordStorage studentRecordStorage \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            new JsonStudentRecordStorage(userPrefs.getStudentRecordFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, studentRecordStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 5,
      "-": 181
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Creates a new note to be added to the note list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteAddCommand extends NoteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new note\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"desc/ [Description]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Example: desc/ Give class 10 minutes extra for recess today\\n\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a NoteAddCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note to set."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param details   of the note."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteAddCommand(String note, String details) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireAllNonNull(note);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.description \u003d details;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note note;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        note \u003d new Note(this.note, this.description);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.addNote(note);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(generateSuccessMessage(note));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note that has been added."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private String generateSuccessMessage(Note note) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return \"Added note: \" + note;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!(other instanceof NoteAddCommand)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NoteAddCommand e \u003d (NoteAddCommand) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return note.equals(e.note);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a Note Command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public abstract class NoteCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"note\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Deletes a note in the note list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteDeleteCommand extends NoteCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [index]: Deletes a note\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Note: index has to be greater than 0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a QuestionDeleteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param index of question to delete from the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteDeleteCommand(Index index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.deleteNote(index)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note that has been added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private String generateSuccessMessage(Note note) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return \"Deleted note: \" + note;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Edits the note details in the note list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteEditCommand extends NoteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits an existing note\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"desc/ [Description]\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            + \"Example: desc/ Give class 10 minutes extra for recess today\\n\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a QuestionEditCommand object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param fields to edit."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteEditCommand(Index index, HashMap\u003cString, String\u003e fields) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.note \u003d fields.get(\"note\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.description \u003d fields.get(\"description\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Note noteObj \u003d model.getNote(index);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String note \u003d (!this.note.isBlank()) ? this.note : noteObj.getNote();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String details \u003d (!this.description.isBlank()) ? this.description : noteObj.getDescription();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        noteObj.setNote(note);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        noteObj.setDescription(details);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        model.setNote(index, noteObj);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(generateSuccessMessage(noteObj));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note that has been added."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private String generateSuccessMessage(Note note) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return \"Edited note: \" + note;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (!(other instanceof NoteEditCommand)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        NoteEditCommand e \u003d (NoteEditCommand) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return note.equals(e.note);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/note/NoteListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.commands.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Lists the summary of notes in note list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Lists the summary of notes in note list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteListCommand extends NoteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" list: List of notes\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return new CommandResult(model.getNoteList());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Creates a new question to be added to the question list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionAddCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new question\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Parameters:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"topic/ [TOPIC]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: topic/ What is the year that Singapore gained independence?\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"answer/ [ANSWER]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: answer/ 1965\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"type/ [TYPE: open/mcq]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: type/ open\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a QuestionAddCommand object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param type     of question e.g open or mcq."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionAddCommand(String question, String answer, String type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireAllNonNull(question);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question question;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        case \"open\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            question \u003d new OpenEndedQuestion(this.question, this.answer);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        case \"mcq\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            question \u003d new McqQuestion(this.question, this.answer);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            question \u003d new OpenEndedQuestion(this.question, this.answer);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        model.addQuestion(question);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new CommandResult(generateSuccessMessage(question));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question that has been added."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String generateSuccessMessage(Question question) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return \"Added question: \" + question;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!(other instanceof QuestionAddCommand)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionAddCommand e \u003d (QuestionAddCommand) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return question.equals(e.question);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 88,
      "alages97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents a question command."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public abstract class QuestionCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"question\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Deletes a question in the question list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionDeleteCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [index]: Deletes a question\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Note: index has to be greater than 0\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a QuestionDeleteCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index of question to delete from the list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionDeleteCommand(Index index) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.deleteQuestion(index)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question that has been added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String generateSuccessMessage(Question question) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return \"Deleted question: \" + question;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.McqQuestion;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.OpenEndedQuestion;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Edits the question details in the question list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionEditCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [index]: Edits a question\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Parameters(All are optional):\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"topic/ [TOPIC]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: topic/ What is the year that Singapore gained independence?\\n\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"answer/ [ANSWER]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: answer/ 1965\\n\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"type/ [TYPE: open/mcq]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        + \"Example: type/ open\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String answer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a QuestionEditCommand object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param fields to edit."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionEditCommand(Index index, HashMap\u003cString, String\u003e fields) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d fields.get(\"question\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d fields.get(\"answer\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.type \u003d fields.get(\"type\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Question questionObj \u003d model.getQuestion(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String question \u003d (!this.question.isBlank()) ? this.question : questionObj.getQuestion();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String answer \u003d (!this.answer.isBlank()) ? this.answer : questionObj.getAnswer();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!type.isBlank()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            switch (type) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            case \"open\":"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                questionObj \u003d new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            case \"mcq\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                questionObj \u003d new McqQuestion(question, answer);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                questionObj \u003d new OpenEndedQuestion(question, answer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionObj.setQuestion(question);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            questionObj.setAnswer(answer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        model.setQuestion(index, questionObj);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new CommandResult(generateSuccessMessage(questionObj));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question that has been added."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private String generateSuccessMessage(Question question) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return \"Edited question: \" + question;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (!(other instanceof QuestionEditCommand)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        QuestionEditCommand e \u003d (QuestionEditCommand) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return question.equals(e.question);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/question/QuestionListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.commands.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Creates a new question to be added to the question list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionListCommand extends QuestionCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" list: List summary of questions\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return new CommandResult(model.getQuestionsSummary());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentAddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentAddCommand extends StudentCommand{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new student\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"name/ [NAME]\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: name/ Jeong Sock Hwee\\n\\n\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a StudentAddCommand object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param name to set."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentAddCommand(String name) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Student student;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "        student \u003d new Student(new Name(this.name));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "        model.addStudent(student);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(generateSuccessMessage(student));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param student that has been added."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage(Student student) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"Added student: \" + student;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (!(other instanceof StudentAddCommand)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "        StudentAddCommand e \u003d (StudentAddCommand) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return name.equals(e.name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "public abstract class StudentCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"student\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentDeleteCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentDeleteCommand extends StudentCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" [index]: Deletes a student\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Note: index has to be greater than 0\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a StudentDeleteCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param index index of student to delete from the list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentDeleteCommand(Index index) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(generateSuccessMessage(model.deleteStudent(index)));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param student that has been added."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage(Student student) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"Deleted student: \" + student;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentEditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentEditCommand extends StudentCommand{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a new student\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Parameters:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"name/ [NAME]\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "            + \"Example: name/ Jeong Sock Hwee\\n\\n\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Creates a StudentEditCommand object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param fields to edit."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentEditCommand(Index index, HashMap\u003cString, String\u003e fields) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.name \u003d fields.get(\"name\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Student studentObj \u003d model.getStudent(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "        String studentName \u003d (!this.name.isBlank()) ? this.name : studentObj.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "        studentObj.setName(studentName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "        model.setStudent(index, studentObj);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(generateSuccessMessage(studentObj));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Generates a command execution success message."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param student that has been added."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private String generateSuccessMessage(Student student) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return \"Edited student: \" + student;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (!(other instanceof StudentEditCommand)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "        StudentEditCommand e \u003d (StudentEditCommand) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return name.equals(e.name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/student/StudentListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.commands.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentListCommand extends StudentCommand{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" list: List of students\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return new CommandResult(model.getStudentList());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteAddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionAddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.student.StudentAddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.note.NoteCommandParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.question.QuestionCommandParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.student.StudentCommandParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        case QuestionAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        case NoteAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new NoteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "        case StudentAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 5,
      "Russell-Loh-NUS": 5,
      "alages97": 5,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    // ADDRESS BOOK PREFIX"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    // END OF ADDRESS BOOK PREFIX"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "    // QUESTION PREFIX"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_QUESTION \u003d new Prefix(\"question/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_ANSWER \u003d new Prefix(\"answer/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "    // END OF QUESTION PREFIX"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": "    // STUDENT PREFIX"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public static final Prefix PREFIX_STUDENT \u003d new Prefix(\"student/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "    // END OF STUDENT PREFIX"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"note/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_LIST \u003d new Prefix(\"list\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public static final Prefix PREFIX_DELETE \u003d new Prefix(\"delete\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 3,
      "Russell-Loh-NUS": 9,
      "alages97": 6,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/note/NoteCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.logic.parser.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteDeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteEditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.commands.note.NoteListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Parses input arguments and creates a new {@code NoteCommand} object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteCommandParser implements Parser\u003cNoteCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddNoteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * and returns an NoteCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                .tokenize(args, PREFIX_NOTE, PREFIX_DESCRIPTION, PREFIX_LIST,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        PREFIX_DELETE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (!preamble.isBlank()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, NoteEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LIST).isPresent()) { // List command"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new NoteListCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DELETE).isPresent()) { // Delete command"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                int indexToDelete \u003d Integer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        .parseInt(argMultimap.getValue(PREFIX_DELETE).orElse(\"0\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                if (indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                                    NoteDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                index.fromOneBased(indexToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                                NoteDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new NoteDeleteCommand(index);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else if (isEdit) { // Edit command"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            // Add parameters to be edited. Note: the fields are optional"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            fields.put(\"note\", argMultimap.getValue(PREFIX_NOTE).orElse(\"\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            fields.put(\"description\", argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new NoteEditCommand(index, fields);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        } else { // Create command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_NOTE, PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, NoteAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            String note \u003d argMultimap.getValue(PREFIX_NOTE).orElse(\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            String description \u003d argMultimap.getValue(PREFIX_DESCRIPTION).orElse(\"\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            return new NoteAddCommand(note, description);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                                              Prefix... prefixes) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/question/QuestionCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.logic.parser.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ANSWER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DELETE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LIST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUESTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionAddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionDeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionEditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.commands.question.QuestionListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionCommandParser implements Parser\u003cQuestionCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreationQuestionCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * and returns an CreateQuestionCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .tokenize(args, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TYPE, PREFIX_LIST,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                PREFIX_DELETE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (!preamble.isBlank()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, QuestionEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                pe);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LIST).isPresent()) { // List command"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionListCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DELETE).isPresent()) { // Delete command"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                int indexToDelete \u003d Integer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    .parseInt(argMultimap.getValue(PREFIX_DELETE).orElse(\"0\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                if (indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                            QuestionDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                index.fromOneBased(indexToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                        QuestionDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionDeleteCommand(index);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else if (isEdit) { // Edit command"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            // Add parameters to be edited. Note: the fields are optional"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            fields.put(\"question\", argMultimap.getValue(PREFIX_QUESTION).orElse(\"\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            fields.put(\"answer\", argMultimap.getValue(PREFIX_ANSWER).orElse(\"\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            fields.put(\"type\", argMultimap.getValue(PREFIX_TYPE).orElse(\"\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionEditCommand(index, fields);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        } else { // Create command"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_QUESTION, PREFIX_ANSWER, PREFIX_TYPE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                    String"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT, QuestionAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            String question \u003d argMultimap.getValue(PREFIX_QUESTION).orElse(\"\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            String answer \u003d argMultimap.getValue(PREFIX_ANSWER).orElse(\"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            String typeName \u003d argMultimap.getValue(PREFIX_TYPE).orElse(\"\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            return new QuestionAddCommand(question, answer, typeName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        Prefix... prefixes) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 115
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/student/StudentCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alages97"
        },
        "content": "package seedu.address.logic.parser.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.commands.student.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alages97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alages97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alages97"
        },
        "content": "public class StudentCommandParser implements Parser\u003cStudentCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreationQuestionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * and returns an CreateQuestionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public StudentCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alages97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alages97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alages97"
        },
        "content": "                .tokenize(args, PREFIX_STUDENT, PREFIX_LIST,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        PREFIX_DELETE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alages97"
        },
        "content": "        boolean isEdit \u003d false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Index index \u003d Index.fromZeroBased(0);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alages97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alages97"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (!preamble.isBlank()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alages97"
        },
        "content": "                index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alages97"
        },
        "content": "                isEdit \u003d true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alages97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, StudentEditCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alages97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LIST).isPresent()) { // List command"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentListCommand();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else if (argMultimap.getValue(PREFIX_DELETE).isPresent()) { // Delete command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alages97"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alages97"
        },
        "content": "                int indexToDelete \u003d Integer"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        .parseInt(argMultimap.getValue(PREFIX_DELETE).orElse(\"0\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "                if (indexToDelete \u003c\u003d 0) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alages97"
        },
        "content": "                            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                    StudentDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alages97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alages97"
        },
        "content": "                index.fromOneBased(indexToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alages97"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alages97"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                StudentDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentDeleteCommand(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else if (isEdit) { // Edit command"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "            // Add parameters to be edited. Note: the fields are optional"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "            HashMap\u003cString, String\u003e fields \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": "            fields.put(\"name\", argMultimap.getValue(PREFIX_QUESTION).orElse(\"\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentEditCommand(index, fields);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alages97"
        },
        "content": "        } else { // Create command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "            if (!arePrefixesPresent(argMultimap, PREFIX_STUDENT)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": "                    || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alages97"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": "                        String"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                .format(MESSAGE_INVALID_COMMAND_FORMAT, StudentAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": "            String name \u003d argMultimap.getValue(PREFIX_STUDENT).orElse(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": "            return new StudentAddCommand(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alages97"
        },
        "content": "                                              Prefix... prefixes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alages97"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alages97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 93
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Students \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Adds the given student."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * {@code student} must not exist in the student list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alages97"
        },
        "content": "    void addStudent(Student student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns the student that has been deleted based on the index."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alages97"
        },
        "content": "    Student deleteStudent(Index index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns the student based on its Index."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": "    Student getStudent(Index index);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Replaces the student at the specified index."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alages97"
        },
        "content": "    void setStudent(Index index, Student student);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alages97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * Returns the list of students."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alages97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @return list of students"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alages97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alages97"
        },
        "content": "    String getStudentList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Questions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Adds the given question."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * {@code question} must not exist in the question list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void addQuestion(Question question);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question that has been deleted based on the index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Question deleteQuestion(Index index);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question based on its Index."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    Question getQuestion(Index index);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Replaces the question at the specified index."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    void setQuestion(Index index, Question question);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the questions summary."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Summary of questions list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    String getQuestionsSummary();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Questions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Adds the given note."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * {@code note} must not exist in the note list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void addNote(Note note);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the note that has been deleted based on the index."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Note deleteNote(Index index);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the note based on its Index."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    Note getNote(Index index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Replaces the note at the specified index."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    void setNote(Index index, Note question);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the notes summary."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return Summary of notes list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    String getNoteList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 31,
      "Russell-Loh-NUS": 35,
      "alages97": 32,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.Note;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.model.note.NoteList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.QuestionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private final QuestionList questions;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private final NoteList notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        logger.fine("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            \"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.questions \u003d new QuestionList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.notes \u003d new NoteList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alages97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Students \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void addStudent(Student student) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alages97"
        },
        "content": "        students.add(student);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student deleteStudent(Index index) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return students.remove(index);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student getStudent(Index index) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return students.getStudent(index);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void setStudent(Index index, Student student) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alages97"
        },
        "content": "        students.setStudent(index, student);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alages97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public String getStudentList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return students.getStudentList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Questions \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.addQuestion(question);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question deleteQuestion(Index index) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.deleteQuestion(index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question getQuestion(Index index) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.getQuestion(index);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(Index index, Question question) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.setQuestion(index, question);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getQuestionsSummary() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.getQuestionsSummary();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes.addNote(note);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Note deleteNote(Index index) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notes.deleteNote(index);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Note getNote(Index index) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notes.getNote(index);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNote(Index index, Note question) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes.setNote(index, question);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String getNoteList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notes.getNoteList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Person \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 31,
      "Russell-Loh-NUS": 37,
      "alages97": 31,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyStudentRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Unmodifiable view of an student record"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public interface ReadOnlyStudentRecord {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns an unmodifiable view of the students list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * This list will not contain any duplicate students."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    ObservableList\u003cStudent\u003e getStudentList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getStudentRecordFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 2,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/StudentRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.UniqueStudentList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Duplicates are not allowed (by .isSameStudent comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class StudentRecord implements ReadOnlyStudentRecord {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final UniqueStudentList students;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students \u003d new UniqueStudentList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public StudentRecord() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Creates an AddressBook using the Students in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public StudentRecord(ReadOnlyStudentRecord toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the contents of the Student list with {@code Students}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code Students} must not contain duplicate Students."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.students.setStudents(students);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void resetData(ReadOnlyStudentRecord newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        setStudents(newData.getStudentList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //// Student-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if a Student with the same identity as {@code Student} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean hasStudent(Student student) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(student);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return students.contains(student);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Adds a Student to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void addStudent(Student p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the given Student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student identity of {@code editedStudent} must not be the same as another"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * existing Student in the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(editedStudent);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students.setStudent(target, editedStudent);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void removeStudent(Student key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return students.asUnmodifiableObservableList().size() + \" Students\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public ObservableList\u003cStudent\u003e getStudentList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return students.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                || (other instanceof StudentRecord // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 students.equals(((StudentRecord) other).students));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return students.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private Path studentRecordFilePath \u003d Paths.get(\"data\" , \"students.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        setStudentRecordFilePath(newUserPrefs.getStudentRecordFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getStudentRecordFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return studentRecordFilePath;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudentRecordFilePath(Path studentsFilePath) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(studentsFilePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.studentRecordFilePath \u003d studentsFilePath;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 studentRecordFilePath.equals(o.studentRecordFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, studentRecordFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        sb.append(\"\\nLocal address book data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        sb.append(\"\\nLocal student data file location : \" + studentRecordFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 17,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/Note.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a note in the note list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    protected String note;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a new question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note to set."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param description to the question."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Note(String note, String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the note."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return Note string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String getNote() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the description."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return Description string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Sets the note."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note to set."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNote(String note) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Sets the description."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param description to set."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/note/NoteList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "package seedu.address.model.note;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " * Represents a list of Notes."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "public class NoteList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    private ArrayList\u003cNote\u003e notes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Creates a new NoteList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public NoteList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Add a new note to the question list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note to add to the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void addNote(Note note) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        this.notes.add(note);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        // TODO: Implement check if duplicated note AND desc is entered"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Deletes the note at the specified index in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param index of the note in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return note object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Note deleteNote(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notes.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Returns the note object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param index of the note in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return Note object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public Note getNote(Index index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return notes.get(index.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Sets the note object at the specified index in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param index of the question in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @param note object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public void setNote(Index index, Note note) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        notes.set(index.getZeroBased(), note);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * Printing out the list of notes and how many are there."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     * @return Summary of notes."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    public String getNoteList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        String summary \u003d \"There are currently \" + notes.size() + \" notes saved.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                + \"Here is the list of notes:\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        for (int i \u003d 0; i \u003c notes.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            summary +\u003d (i + 1) + \". \" + \"\\\"\" + notes.get(i) + \"\\\"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            if ((i + 1) !\u003d notes.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "                summary +\u003d \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeongyh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeongyh99": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/McqQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents an MCQ question in the question list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class McqQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a new question."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public McqQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/OpenEndedQuestion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents an open ended question in the question list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class OpenEndedQuestion extends Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a new question."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public OpenEndedQuestion(String question, String answer) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        super(question, answer);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/Question.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Represents a question in the question list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public abstract class Question {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    protected String question;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    protected String answer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a new question."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer   to the question."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question(String question, String answer) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Question string"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getQuestion() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this.question;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the answer."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Answer string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getAnswer() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return this.answer;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the question."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to set."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(String question) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.question \u003d question;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the answer."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param answer to set."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setAnswer(String answer) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.answer \u003d answer;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return question;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/question/QuestionList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "package seedu.address.model.question;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " * Stores questions and provides functionality to manage them."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "public class QuestionList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    private ArrayList\u003cQuestion\u003e questions;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Creates a new QuestionList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public QuestionList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Add a new question to the question list."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question to add to the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        this.questions.add(question);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        // TODO: Implement check if duplicated question AND answer is entered"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Deletes the question at the specified index in the list."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index of the question in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return question object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question deleteQuestion(Index index) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Returns the question object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index of the question in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Question object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public Question getQuestion(Index index) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return questions.get(index.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Sets the question object at the specified index in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param index    of the question in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @param question object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public void setQuestion(Index index, Question question) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        questions.set(index.getZeroBased(), question);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * Printing out the list of questions and how many are there."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     * @return Summary of questions."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    public String getQuestionsSummary() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        String summary \u003d \"There are currently \" + questions.size() + \" questions saved.\\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            + \"Here is the list of questions:\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        for (int i \u003d 0; i \u003c questions.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            summary +\u003d (i + 1) + \". \" + \"\\\"\" + questions.get(i) + \"\\\"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            if ((i + 1) !\u003d questions.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "                summary +\u003d \"\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        return summary;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/Student.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a Student in the student record."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class Student {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alages97"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Student(Name name) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if both students of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * This defines a weaker notion of equality between two students."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean isSameStudent(Student otherStudent) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (otherStudent \u003d\u003d this) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return otherStudent !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            \u0026\u0026 otherStudent.getName().equals(getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if both students have the same identity and data fields."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * This defines a stronger notion of equality between two students."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!(other instanceof Student)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Student otherStudent \u003d (Student) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return otherStudent.getName().equals(getName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alages97"
        },
        "content": "        Name studentName \u003d new Name(name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alages97"
        },
        "content": "        this.name \u003d studentName;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return Objects.hash(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        builder.append(getName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 71,
      "alages97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/UniqueStudentList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alages97"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.exceptions.DuplicateStudentException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.exceptions.StudentNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * A list of Students that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * A Student is considered unique by comparing using {@code Student#isSameStudent(Student)}. As such, adding and"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * updating of Students uses Student#isSameStudent(Student) for equality so as to ensure that the"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Student being added or updated is unique in terms of identity in the UniqueStudentList. However, the removal of"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * a Student uses Student#equals(Object) so as to ensure that the Student with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * @see Student#isSameStudent(Student)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class UniqueStudentList implements Iterable\u003cStudent\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final ObservableList\u003cStudent\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if the list contains an equivalent Student as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean contains(Student toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameStudent);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Adds a Student to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void add(Student toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the Student {@code target} in the list with {@code editedStudent}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student identity of {@code editedStudent} must not be the same as another existing Student in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudent(Student target, Student editedStudent) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(target, editedStudent);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!target.isSameStudent(editedStudent) \u0026\u0026 contains(editedStudent)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        internalList.set(index, editedStudent);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student remove(Index index) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public void setStudent(Index index, Student student) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alages97"
        },
        "content": "        internalList.set(index.getZeroBased(), student);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Removes the equivalent Student from the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * The Student must exist in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void remove(Student toRemove) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new StudentNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudents(UniqueStudentList replacement) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public Student getStudent(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Replaces the contents of this list with {@code Students}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * {@code Students} must not contain duplicate Students."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void setStudents(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireAllNonNull(students);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!studentsAreUnique(students)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DuplicateStudentException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        internalList.setAll(students);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alages97"
        },
        "content": "    public String getStudentList() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alages97"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alages97"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alages97"
        },
        "content": "            sb.append(internalList.get(i));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alages97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alages97"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alages97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alages97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public ObservableList\u003cStudent\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Iterator\u003cStudent\u003e iterator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                || (other instanceof UniqueStudentList // instanceof handles nulls"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueStudentList) other).internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns true if {@code Students} contains only unique Students."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private boolean studentsAreUnique(List\u003cStudent\u003e students) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (int i \u003d 0; i \u003c students.size() - 1; i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            for (int j \u003d i + 1; j \u003c students.size(); j++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                if (students.get(i).isSameStudent(students.get(j))) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 137,
      "alages97": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/DuplicateStudentException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Signals that the operation will result in duplicate Students (Students are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class DuplicateStudentException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public DuplicateStudentException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        super(\"Operation would result in duplicate Students\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/student/exceptions/StudentNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.model.student.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class StudentNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStudent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Jackson-friendly version of {@link Student}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "class JsonAdaptedStudent {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"student\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Constructs a {@code JsonAdaptedStudent} with the given student details."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonAdaptedStudent(@JsonProperty(\"name\") String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts a given {@code Student} into this class for Jackson use."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonAdaptedStudent(Student source) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts this Jackson-friendly adapted student object into the model\u0027s {@code Student} object."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted student."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Student toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return new Student(modelName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableStudentRecord.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.StudentRecord;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.student.Student;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * An Immutable studentRecord that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "@JsonRootName(value \u003d \"studentRecord\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "class JsonSerializableStudentRecord {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STUDENT \u003d \"Students list contains duplicate student(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private final List\u003cJsonAdaptedStudent\u003e students \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Constructs a {@code JsonSerializableStudentRecord} with the given students."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonSerializableStudentRecord(@JsonProperty(\"students\") List\u003cJsonAdaptedStudent\u003e students) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.students.addAll(students);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts a given {@code ReadOnlyStudentRecord} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializablestudentRecord}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonSerializableStudentRecord(ReadOnlyStudentRecord source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        students.addAll(source.getStudentList().stream().map(JsonAdaptedStudent::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Converts this address book into the model\u0027s {@code studentRecord} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public StudentRecord toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        StudentRecord studentRecord \u003d new StudentRecord();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        for (JsonAdaptedStudent jsonAdaptedstudent : students) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            Student student \u003d jsonAdaptedstudent.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            if (studentRecord.hasStudent(student)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STUDENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            studentRecord.addStudent(student);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return studentRecord;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonStudentRecordStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public class JsonStudentRecordStorage implements StudentRecordStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStudentRecordStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public JsonStudentRecordStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getStudentRecordFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return readStudentRecord(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Similar to {@link #readStudentRecord()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        Optional\u003cJsonSerializableStudentRecord\u003e jsonStudentRecord \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                filePath, JsonSerializableStudentRecord.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        if (!jsonStudentRecord.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            return Optional.of(jsonStudentRecord.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveStudentRecord(ReadOnlyStudentRecord studentRecord) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        saveStudentRecord(studentRecord, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Similar to {@link #saveStudentRecord(ReadOnlyStudentRecord)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alages97"
        },
        "content": "     * @param filePath location of the data."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveStudentRecord(ReadOnlyStudentRecord studentRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(studentRecord);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStudentRecord(studentRecord), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 79,
      "alages97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, StudentRecordStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentRecord methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getStudentRecordFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveStudentRecord(ReadOnlyStudentRecord studentRecord) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 14,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    private StudentRecordStorage studentRecordStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "                          StudentRecordStorage studentRecordStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        this.studentRecordStorage \u003d studentRecordStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d StudentRecord methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Path getStudentRecordFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return studentRecordStorage.getStudentRecordFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return readStudentRecord(studentRecordStorage.getStudentRecordFilePath());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord(Path filePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lumwb"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        logger.fine(\"Attempting to read student data from file: \" + filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        return studentRecordStorage.readStudentRecord(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveStudentRecord(ReadOnlyStudentRecord studentRecord) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        saveStudentRecord(studentRecord, studentRecordStorage.getStudentRecordFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    public void saveStudentRecord(ReadOnlyStudentRecord studentRecord, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        logger.fine(\"Attempting to write to student data file: \" + filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lumwb"
        },
        "content": "        studentRecordStorage.saveStudentRecord(studentRecord, filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 35,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StudentRecordStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "import seedu.address.model.ReadOnlyStudentRecord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": " * Represents a storage for {@link seedu.address.model.StudentRecord}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "public interface StudentRecordStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Path getStudentRecordFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Returns StudentRecord data as a {@link ReadOnlyStudentRecord}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @see #getStudentRecordFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    Optional\u003cReadOnlyStudentRecord\u003e readStudentRecord(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * Saves the given {@link ReadOnlyStudentRecord} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @param studentRecord cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveStudentRecord(ReadOnlyStudentRecord studentRecord) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     * @see #saveStudentRecord(ReadOnlyStudentRecord)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "    void saveStudentRecord(ReadOnlyStudentRecord studentRecord, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alages97"
        },
        "content": "        //StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alages97"
        },
        "content": "        //logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alages97": 2,
      "-": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "import seedu.address.model.question.Question;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        public void addQuestion(Question question) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        public String getQuestionsSummary() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Russell-Loh-NUS"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Russell-Loh-NUS": 21,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lumwb"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "lumwb": 68
    }
  }
]
