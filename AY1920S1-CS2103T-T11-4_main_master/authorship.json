[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003d TravelPal"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T11-4[image:https://api.travis-ci.org/AY1920S1-CS2103T-T11-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "https://ci.appveyor.com/project/ang-zeyu/main[image:https://ci.appveyor.com/api/projects/status/nuedurfohk4st6o4?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T11-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T11-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* What is _TravelPal_? First and foremost, it is a cross-platform desktop application for those who love to plan and micromanage their travels!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* It includes various features to help in planning the trip beforehand, such as an itinerary planner, a pre-trip inventory manager, bookings and expense manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* During the trip, there is also an inbuilt diary application that allows the user to record details of the trip, and a contacts manager to store important contacts related to the trip."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* In addition, it’s primary preferred form of input from the user is the Command Line Interface (CLI), but it also provides a Graphical User Interface (GUI) for those who like to use alternative inputs, such as a mouse. Jump to the quick start to get started!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* Original code source was from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "ang-zeyu": 11
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "run {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    archiveName \u003d \u0027travelpal.jar\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u0027site-name\u0027: \u0027TravelPal\u0027,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S1-CS2103T-T11-4/main\u0027,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 151,
      "ang-zeyu": 9
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.email \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \u0027Reset to gh-pages branch\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \u0027Creating new gh-pages branch\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \u0027Error occured, ls-remote exit code is\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo $?"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ang-zeyu": 4
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "TravelPal was developed by the https://github.com/AY1920S1-CS2103T-T11-4[AY1920S1-CS2103T-T11-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Ang Ze Yu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "image::ang-zeyu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/ang-zeyu[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: Logic, Deliverables and deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Derrick"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "image::teoha.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/teoha[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: Model, Storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Sakshi"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "image::sakshipradyumn.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/SakshiPradyumn[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: Testing, Integration"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Tianyi"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "image::arjunwangty.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/arjunwangty[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Karan"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eizon05"
        },
        "content": "image::eizon05.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/eizon05[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: Code Quality, Documentation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "teoha": 5,
      "eizon05": 1,
      "-": 32,
      "arjunwangty": 13,
      "ang-zeyu": 4
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T11-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* *Email us* : You can also reach us at the following email addresses:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eizon05"
        },
        "content": "1. `e0322678 [at] u.nus.edu` (Ze Yu\u0027s email)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eizon05"
        },
        "content": "2. `e0313722 [at] u.nus.edu` (Sakshi\u0027s email)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eizon05"
        },
        "content": "3. `e0310242 [at] u.nus.edu` (Derrick\u0027s email)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eizon05"
        },
        "content": "4. `e0322921 [at] u.nus.edu` (Tianyi\u0027s email)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eizon05"
        },
        "content": "5. `e0311234 [at] u.nus.edu`(Karan\u0027s email)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eizon05"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eizon05"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eizon05": 9,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003d TravelPal - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Target user profile:**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Has a need to manage multiple trips"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Prefers using a notebook to other types"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Frequently uses the computer while overseas"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Wants to micromanage all parts of their trips"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Wants to plan all details of the trip before leaving"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Wants to manage a trip even without an internet connection"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Value proposition:** Able to micromanage a trip and access one’s plans"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teoha"
        },
        "content": "more conveniently than traditional forms of trip planning"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teoha"
        },
        "content": "image::us1.PNG[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teoha"
        },
        "content": "image::us2.PNG[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teoha"
        },
        "content": "image::us3.PNG[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teoha"
        },
        "content": "image::us4.PNG[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "teoha"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Use case: UC1 - Add Trip**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to **Trip Manager** to list trips"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal shows a list of **Trips**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User requests to add a specific **Trip** to the list"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  User \u003cspan class\u003d\"underline\"\u003eedits the **Trip** (UC2)\u003c/span\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teoha"
        },
        "content": "5.  TravelPal adds the **Trip**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "6.  TravelPal shows the list of **Trips**."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a. The trip added clashes with another trip"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a2. TravelPal does not discard information the user has provided"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a3. TravelPal displays the **Edit Trip** page containing the user’s"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teoha"
        },
        "content": "previous input"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a4. TravelPal requests the user to change the dates of the **Trip**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 5a1-5a2 are repeated until no clashes occur between trips"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cspan class\u003d\"underline\"\u003eUse case: UC2 – Edit Trip\u003c/span\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User chooses to edit specific **Trip**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  Travelpal shows **Edit Trip Screen** with fields to edit/enter"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User edits the information in the specified **Trip**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "4.  User submits the details and confirms the edit."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. User enters an invalid field"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not edit invalid field"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 2"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b. User requests to list of **Days** in the trip"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b1. TravelPal shows a list of days to the user (can be empty)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b2. User chooses to \u003cspan class\u003d\"underline\"\u003eadd/edit/delete (UC4/5/6)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Day**\u003c/span\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 4"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "teoha"
        },
        "content": "4b. User leaves necessary information empty"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a2. TravelPal does not submit the details and does not confirm the edit"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a3. User enters new data"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 4a1-4a3 are repeated until the data entered are non empty"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Use case: UC3 – Delete Trip**"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to **Trip Manager** to list **Trips**"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal shows a list of **Trips**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User requests to delete a specific **Trip** in the list"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  TravelPal deletes the **Trip**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "teoha"
        },
        "content": "`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teoha"
        },
        "content": "2a. The list is empty"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. The **Name** provided is invalid"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not delete any trips"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Use case: UC4 – Add Day**"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User chooses to add a **Day** to a specified **Trip**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  User _edits the day (UC5)_"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  TravelPal saves the **Day**"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a **Day** added clashes with other days in the **Trip**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not discard information the user has provided"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a3. TravelPal displays the **Edit Day** page containing the user’s"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "teoha"
        },
        "content": "input"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a4. TravelPal requests the user to change the date of the **Day**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 3a1 – 3a4 are repeated until the user provided non clashing date"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Use case: UC5 – Edit Day**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to edit specific **Day**"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal shows the **Edit Day** page with fields to enter"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User edits information in the specified **Day**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  User submits and confirms the edit"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. User enters an invalid field"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not edit invalid field"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 2"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b. User requests to list of **Events** in the trip"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b1. TravelPal shows a list of **Events** to the user (can be empty)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b2. User chooses to _add/edit/delete (UC 7/8/9) **Event**_"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 4"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "teoha"
        },
        "content": "4b. User leaves necessary information empty"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a2. TravelPal does not submit the details and does not confirm the edit"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a3. User enters new data"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 4a1-4a3 are repeated until the data entered are correct"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "teoha"
        },
        "content": "**User case: UC6 – Delete Day**"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to delete a specific **Day** in the list"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal deletes the **Day**"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "teoha"
        },
        "content": "2a. The list is empty"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. The **Name** provided is invalid"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not delete any **Day**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "teoha"
        },
        "content": "**User case: UC7 – Add Event**"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User chooses to add a **Event** to a specified **Day**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  User _edits the event (UC5)_"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  TravelPal saves the **Event**"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a **Event** added clashes with other **Events** in the **Day**"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not discard information the user has provided"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a3. TravelPal displays the **Edit Event** page containing the user’s"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "teoha"
        },
        "content": "input"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a4. TravelPal requests the user to change the date of the **Event**"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 3a1 – 3a4 are repeated until the user provided non clashing date"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "teoha"
        },
        "content": "**User case UC8 – Edit Event**"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to edit specific **Day**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal shows the **Edit Day** page with fields to enter"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User edits information in the specified **Day**"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  User submits and confirms the edit"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. User enters an invalid field"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not edit invalid field"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 2"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b. User requests to list of **Events** in the **trip**"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b1. TravelPal shows a list of **Events** to the user (can be empty)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b2. User chooses to _add/edit/delete (UC 7/8/9) **Event**_"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 4"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "teoha"
        },
        "content": "4b. User leaves necessary information empty"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a2. TravelPal does not submit the details and does not confirm the edit"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a3. User enters new data"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 4a1-4a3 are repeated until the data entered are non empty"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "teoha"
        },
        "content": "**User case UC9 – Delete Event**"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to delete a specific **Event** in the list"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal deletes the **Event**"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "teoha"
        },
        "content": "2a. The list is empty"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. The **Name** provided is invalid"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not delete any **Event**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  Should work on any [mainstream OS] as"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "teoha"
        },
        "content": "    long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  A user with above average typing speed for regular English text"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "teoha"
        },
        "content": "    (i.e. not code, not system admin commands) should be able to"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "teoha"
        },
        "content": "    accomplish most of the tasks faster using commands than using the"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "teoha"
        },
        "content": "    mouse."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  Should be able to hold up to 30 trips without a noticeable"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "teoha"
        },
        "content": "    sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  A user familiar with travelling should be able to navigate the app"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "teoha"
        },
        "content": "    easily"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "teoha"
        },
        "content": "5. \tA novice user should be able to navigate without prior experience"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "teoha"
        },
        "content": "6.\tApplication does not depend on online resources to operate"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "teoha"
        },
        "content": "7.\tProducts is not required to make decisions for the user"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "teoha"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "teoha"
        },
        "content": "**TravelPal** – Our cross-platform desktop application for those who"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "teoha"
        },
        "content": "love to plan and micromanage their travels"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "teoha"
        },
        "content": "**CLI** – Command Line Interface. CLI is a command line program that"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "teoha"
        },
        "content": "accepts text input to execute operating system functions."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "teoha"
        },
        "content": "**GUI** – Graphical User Interface. The graphical user interface is a"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "teoha"
        },
        "content": "form of user interface that allows users to interact"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "teoha"
        },
        "content": "**OS** - An operating system, or \"OS,\" is software that communicates"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "teoha"
        },
        "content": "with the hardware and allows other programs to run"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Mainstream OS** - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "teoha": 294,
      "-": 384,
      "ang-zeyu": 4
    }
  },
  {
    "path": "docs/Documentation.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003d TravelPal - Documentation"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Editing Diagrams"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingPlantUml#, UsingPlantUml.adoc\u003e\u003e to find out how to create and update the UML diagrams in the developer guide."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Template"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "-": 121,
      "ang-zeyu": 2
    }
  },
  {
    "path": "docs/SettingUp.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003d TravelPal - Setting Up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `11`* or above"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.Main` and try a few commands"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting#,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level3` repo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level3`), you should do the following:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocumentation#Docs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding, we recommend that you get some sense of the overall design by reading about \u003c\u003cDeveloperGuide#Design-Architecture, AddressBook\u0027s architecture\u003e\u003e."
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "ang-zeyu": 2
    }
  },
  {
    "path": "docs/Testing.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003d TravelPal - Testing"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T11-4/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "We have three types of tests:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: Keyboard and mouse movements are not simulated on macOS Mojave, resulting in GUI Tests failure.**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: From macOS Mojave onwards, applications without `Accessibility` permission cannot simulate certain keyboard and mouse movements."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Open `System Preferences`, click `Security and Privacy` -\u003e `Privacy` -\u003e `Accessibility`, and check the box beside `Intellij IDEA`."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".`Accessibility` permission is granted to `IntelliJ IDEA`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "image::testfx-idea-accessibility-permissions.png[width\u003d\"600\"]"
      }
    ],
    "authorContributionMap": {
      "-": 50,
      "ang-zeyu": 2
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d TravelPal - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eizon05"
        },
        "content": "By: `Team 11-4`      Since: `In Development`      Licence: `None`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eizon05"
        },
        "content": "What is TravelPal? First and foremost, it is a cross-platform desktop application for those who love to plan and micromanage their travels. It includes various features to help in planning the trip beforehand, such as an itinerary planner, a pre-trip inventory manager, bookings and expense manager. During the trip, there is also an inbuilt diary application that allows the user to record details of the trip, and a contacts manager to store important contacts related to the trip. In addition, it’s primary preferred form of input from the user is the Command Line Interface (CLI), but it also provides a Graphical User Interface (GUI) for those who like to use alternative inputs, such as a mouse. Jump to the \u003c\u003cQuick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eizon05"
        },
        "content": "*General Command tips*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eizon05"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Most commands are in the format of \u003ccommand\u003e \u003cargument1\u003e \u003cargument2\u003e \u003c...\u003e."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** \u003ccommand\u003e is case insensitive, so typing it in any combination of UPPER_CASE or lower_case will work."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** When an argument is optional, it will be tagged be enclosed in square brackets [...] instead of angle brackets \u003c...\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** When required, a separator / delimiter between arguments will be displayed with *separator*."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Commands support tab-autocomplete when appropriate."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Autocompletion for commands : For example, typing he then pressing tab will autocomplete the command to help."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eizon05"
        },
        "content": "**Autocompletion for separators : When a command requires a separator, and the command name is already in the text input, pressing tab again will append the separator automatically."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Commands help popup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Once the command name is already in the text input, a handy, non-intrusive popup will appear slightly above the text input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** You can disable this feature in the user preferences."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Leading and trailing white spaces in the inputted command are ignored."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d General commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* help : brings a pdf version of the user guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* goto \u003cpage\u003e : all navigation between pages in the app follows this format. \u003cpage\u003e will be detailed in each of the relevant sections"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* undo : this will undo the last undoable operation attempted by the user, prompting the user with the details of the operation first."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* exit : this will exit the program, discarding any unsaved changes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d User preferences"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* To access the user preferences gui, you can :"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Click the user icon in the top right of the app"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Type the command “preferences”"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* To change preferences, you can :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** As per the user interface, you can click on various fields and edit them."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Use the command edit \u003cfield\u003e \u003cvalue\u003e, where field is the field you want to edit as shown in the interface, and value is the respective value for the field, as detailed below."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Types of fields :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Checkboxes \u0026 toggles : edit \u003cfield\u003e will toggle the current value of the checkbox"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Text fields : edit \u003cfield\u003e \u003cvalue\u003e will change the value of the checkbox to the new value specified."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Dropdowns :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eizon05"
        },
        "content": "*** To see the available options for a dropdown, first type edit \u003cfield\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eizon05"
        },
        "content": "*** To change the value, type edit \u003cfield\u003e \u003cvalue\u003e, where \u003cvalue\u003e is one of the options shown, or the number of the option in the order in which they were shown."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Trip manager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eizon05"
        },
        "content": "The trip manager is the main starting ground of the application. Here, the user is able to create, delete and archive trips. There is also an archive section, where the archived trips are displayed exclusively."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* create \u003cname of trip\u003e : creates a new trip with specified name, then bringing up the trip creation user interface."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* delete \u003cname of trip\u003e *yes_i_am_sure* : deletes the trip with the specified name and all data associated with it."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* archive \u003cname of trip\u003e : moves the trip to the archive section of the trip manager."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* goto \u003cname of trip\u003e : enters the main day-by-day view of the trip."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Trip setup"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Trip setup is the first page in configuring a new/existing task. Upon commands to create or edit a specified trip from the Trip Manager, the user will be directed to a page where they can edit the necessary details to create a new trip. This page will contain a form with 2 necessary fields:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eizon05"
        },
        "content": "1. Duration (Starting date, Ending date)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eizon05"
        },
        "content": "2. Destination"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -startDate \u003cstarting Date\u003e -endDate \u003cending Date\u003e: sets the starting date and ending date of the trip being created/edited"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -dest \u003cdestination\u003e: sets the destination of the trip being created/edited"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -addDay \u003cname of day\u003e: adds a day after the last day previously added. If no days were previously added, add the first day"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Event Setup"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Event setup creates/edits properties of a specified event. It is necessary for event to contains a starting and ending time. Events contains mostly optional fields that the user can edit in future"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -name \u003cname of event\u003e: sets the name of the event"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -description \u003cdescription of event\u003e: sets the description of the event"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -startDate \u003cstarting time\u003e: sets the starting time of the event"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -endingTime \u003cending time\u003e: sets the ending time of the event"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -expenditure: sets the current known expenditure for a single event"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Itinerary"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eizon05"
        },
        "content": "tinerary contains commands to view the list of relevant event/day/trips. The order can be changed by using different commands"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* list -id \u003cid of trip\u003e: Lists the days of a trip in chronological order"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* list -d \u003cid of trip\u003e -day \u003cindex of day\u003e: Lists the events of a day chronological order"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Additional tags:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* byExpenses: list all elements by expenses, from highest to lowest"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* byAlphabetical: list all elements by the alphabetical order of their names"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Expense Manager"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Expense manager records the expenditure by the user. Expenses are connected to bookings/events to automatically update the current known expenditure for any date/trip/event. There are two types of expenditure: 1. Planned expenditure 2. Miscellaneous/Unplanned expenditure"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -spend \u003camount spent\u003e: sets the total amount spent during an event which was unplanned"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -spent \u003camount spent\u003e: sets the total: sets the total amount spent during a day which was not planned"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Additional tags:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* time \u003ctime of expense\u003e: time which the expenditure occurred"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Bookings Manager"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Bookings manager manages bookings and reservations made by the user. The bookings under this feature include hotel reservations and transport bookings (flight, train and bus)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -name \u003cname of booking\u003e: sets the name of the booking"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -description \u003cdescription of booking\u003e: sets the description of the booking"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -from \u003ccheck-in time/date\u003e: sets the starting date and time of a hotel booking"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -to \u003ccheck-out time/date\u003e: sets the ending date and time of a hotel booking"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -time \u003cdeparture time\u003e: sets the departure time of a transport booking"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -expenditure: sets the known expenditure of a booking"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Contacts Manager"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Throughout the Bookings Manager, there will be many contacts which you will come across. Contacts Manager helps in easy management of such contacts along with extra contacts the user wishes to enter. Default contacts include the Emergency Contacts of Police, Ambulance and Fire Brigade of the area."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* addcontact -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e - name [name of the contact] -number [contact number] -email [email address]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Diary [coming in v2.0]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Pre-trip Inventory Manager [coming in v2.0]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d General info"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Save data:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** The data of the trips is saved in the data directory located in the same directory as where TravelPal.jar is."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** The data is stored in a human readable json format, allowing manual editing of the data files using a seperate text editor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Most info, where relevant, can be sent to a printer or saved in pdf format, if the info is needed while travelling without your computer."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** The pdfs are output in the output directory located in the same directory as TravelPal.jar"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "eizon05": 87,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.storage.JsonTravelPalStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.storage.TravelPalStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TravelPal ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TravelPalStorage travelPalStorage \u003d new JsonTravelPalStorage(userPrefs.getTravelPalFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        storage \u003d new StorageManager(travelPalStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        LogicManager logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ui \u003d new UiManager(logic, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        logic.setUi(ui);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Optional\u003cReadOnlyTravelPal\u003e addressBookOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ReadOnlyTravelPal initialData;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TravelPal\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TravelPal\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "            initialData \u003d new TravelPal();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelPal\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "            initialData \u003d new TravelPal();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teoha"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelPal\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teoha"
        },
        "content": "        logger.info(\"Starting TravelPal \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "-": 165,
      "arjunwangty": 1,
      "ang-zeyu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        sb.append(\"Width : \").append(windowWidth)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .append(\" Height : \").append(windowHeight);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (windowCoordinates !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "            sb.append(\" X Position : \").append(windowCoordinates.x);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "            sb.append(\" Y Position : \").append(windowCoordinates.y);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 5,
      "-": 70,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String LOG_FILE \u003d \"travelpal.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_TYPE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \"Invalid command type for the current page you\u0027re at! \\n %1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_INVALID_GENERIC_INDEX \u003d \"The index for the operation you provided was invalid!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_INVALID_PATH \u003d \"The path you specified for the operation was invalid!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_EXISTING \u003d \"The file you specified for the operation dosen\u0027t exist!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_INVALID_GENERIC_BOOLEAN \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \"The boolean you specified for the operation was invalid!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns true if all {{@code Optional} in {@code optionals }are not empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Test needs to be created. Delete this comment once it is."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static boolean isAllPresent(Optional... optionals) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(optionals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return Arrays.stream(optionals).allMatch(Optional::isPresent);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns true if {@code optionals} has at least one {@code Optional} not being empty."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Test needs to be created. Delete this comment once it is."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static boolean isAnyPresent(Optional... optionals) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return optionals !\u003d null \u0026\u0026 Arrays.stream(optionals).anyMatch(Optional::isPresent);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "ang-zeyu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.TravelPalParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final TravelPalParser travelPalParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        travelPalParser \u003d new TravelPalParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assert ui !\u003d null : \"Tried to execute command without initialising ui.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Command command \u003d travelPalParser.parseCommand(commandText, model.getPageStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "            storage.saveAddressBook(model.getTravelPal());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the {@code Ui} instance associated with this {@code LogicManager} instance."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui Ui instance to use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setUi(Ui ui) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 45,
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setTravelPal(new TravelPal());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 21,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Whether a page switch operation should be performed. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final boolean doSwitchPage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final boolean shouldExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean shouldExit, boolean doSwitchPage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.shouldExit \u003d shouldExit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.doSwitchPage \u003d doSwitchPage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean shouldExit) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(feedbackToUser, showHelp, shouldExit, false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and a page switch {@code Class} extending from {@code MainWindow} using {@code page},"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean doSwitchPage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(feedbackToUser, false, false, doSwitchPage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return shouldExit;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean doSwitchPage() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return doSwitchPage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 shouldExit \u003d\u003d otherCommandResult.shouldExit"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 doSwitchPage \u003d\u003d otherCommandResult.doSwitchPage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, shouldExit);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ang-zeyu": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 226,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/bookings/AddBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.bookings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Command class used for adding a booking."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class AddBookingCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/bookings/BookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.bookings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a generic booking command supporting common booking operations."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class BookingCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/EnterPrefsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand.EditPrefsDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Command class responsible for navigating to the preferences screen."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterPrefsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"prefs\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the preferences page of TravelPal.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered the preferences screen.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditPrefsDescriptor editPrefsDescriptor \u003d new EditPrefsDescriptor(model.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewPageType(PageType.PREFERENCES)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewEditPrefsDescriptor(editPrefsDescriptor));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof EnterPrefsCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/days/DeleteDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.days;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Command class responsible for executing a delete operation on a {@code Day}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DeleteDayCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a day from trip list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_DELETE_DAY_FAILURE \u003d \"Failed to delete your day, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"the index you specified is likely out of bounds!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_DELETE_DAY_SUCCESS \u003d \"Deleted your day : %1$s!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Index indexToDelete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DeleteDayCommand(Index indexToDelete) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.indexToDelete \u003d indexToDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Assumes enter trip has been called first"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cDay\u003e lastShownList \u003d model.getPageStatus().getTrip().getDayList().internalList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (indexToDelete.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // References preserved by pagestatus"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Day dayToDelete \u003d lastShownList.get(indexToDelete.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "            model.getPageStatus().getTrip().getDayList().remove(indexToDelete);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_DAY_FAILURE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_DAY_SUCCESS, dayToDelete));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || other instanceof DeleteDayCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 55,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/days/EnterCreateDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.days;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterCreateDayCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the day creation page of TravelPal.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered the day creation screen.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "                model.getPageStatus().withNewPageType(PageType.ADD_DAY));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || other instanceof EnterCreateDayCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teoha": 32,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/days/EnterDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.days;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterDayCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the overview of a day.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_ENTER_DAY_SUCCESS \u003d \"Here is your day!: %1$s!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Index indexToEnter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterDayCommand(Index indexToEnter) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.indexToEnter \u003d indexToEnter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Reference to in memory daylist is stored by pageStatus"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cDay\u003e lastShownList \u003d model.getPageStatus().getTrip().getDayList().internalList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (indexToEnter.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Day dayToEnter \u003d lastShownList.get(indexToEnter.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewPageType(PageType.EVENT_PAGE)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewDay(dayToEnter));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENTER_DAY_SUCCESS, dayToEnter), true);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || other instanceof EnterDayCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 51,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/days/EnterEditDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.days;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.EditDayFieldCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterEditDayCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the day information editing screen\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_ENTER_EDIT_DAY_SUCCESS \u003d \" Welcome to your day! %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Index indexToEdit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterEditDayCommand(Index indexToEdit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.indexToEdit \u003d indexToEdit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cDay\u003e lastShownList \u003d model.getPageStatus().getTrip().getDayList().internalList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (indexToEdit.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Day dayToEdit \u003d lastShownList.get(indexToEdit.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditDayFieldCommand.EditDayDescriptor editDayDescriptor \u003d new EditDayFieldCommand.EditDayDescriptor(dayToEdit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewPageType(PageType.ADD_DAY)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewDay(dayToEdit)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewEditDayDescriptor(editDayDescriptor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENTER_EDIT_DAY_SUCCESS, dayToEdit), true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || other instanceof EnterEditDayCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 53,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/days/edit/CancelEditDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.days.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class CancelEditDayCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels editing or creating a new day.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CANCEL_CREATE_SUCCESS \u003d \"Cancelled creating the day!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CANCEL_EDIT_SUCCESS \u003d \"Cancelled editing the day: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CancelEditDayCommand() { }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Day currentlyEditingDay \u003d model.getPageStatus().getDay();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetEditDayDescriptor()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewPageType(PageType.OVERALL_VIEW)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetDay());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (currentlyEditingDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult(MESSAGE_CANCEL_CREATE_SUCCESS, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    String.format(MESSAGE_CANCEL_EDIT_SUCCESS, currentlyEditingDay), true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other instanceof CancelEditDayCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 42,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/days/edit/DoneEditDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.days.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.exceptions.ClashingDayException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.exceptions.DayNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DoneEditDayCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Commits your new or edited day information.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CREATE_DAY_SUCCESS \u003d \"Created Day: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_EDIT_DAY_SUCCESS \u003d \"Edited Day: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"All the fields must be provided!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CLASHING_DAY \u003d \"This day clashes with one of your other days!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DoneEditDayCommand() { }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditDayFieldCommand.EditDayDescriptor editDayDescriptor \u003d model.getPageStatus().getEditDayDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Day dayToEdit \u003d model.getPageStatus().getDay();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Day dayToAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (editDayDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (dayToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "                //buildDay() requires compulsory fields to be non null, failing which"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                //NullPointerException is caught below"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayToAdd \u003d editDayDescriptor.buildDay();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                model.getPageStatus().getTrip().getDayList().add(dayToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "                //edit the current \"selected\" day"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayToAdd \u003d editDayDescriptor.buildDay(dayToEdit);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "                model.getPageStatus().getTrip().getDayList().set(dayToEdit, dayToAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "            model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .withResetEditDayDescriptor()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .withNewPageType(PageType.OVERALL_VIEW)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .withResetDay());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_DAY_SUCCESS, dayToAdd), true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (NullPointerException | DayNotFoundException ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ClashingDayException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(MESSAGE_CLASHING_DAY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other instanceof DoneEditDayCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 67,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/days/edit/EditDayFieldCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.days.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.isAllPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.EventList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EditDayFieldCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of your form \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"by the index of the form field as displayed, or by the various prefixes of the fields. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_DATE_START + \"START DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_DATE_END + \"END DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"DESTINATION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_BUDGET + \"TOTAL BUDGET] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION]...\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DESCRIPTION + \" First Day\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + PREFIX_BUDGET + \"3000\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to must be provided!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"Edited the current form:%1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final EditDayFieldCommand.EditDayDescriptor editDayDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param editDayDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EditDayFieldCommand(EditDayDescriptor editDayDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(editDayDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.editDayDescriptor \u003d editDayDescriptor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditDayDescriptor currentDescriptor \u003d model.getPageStatus().getEditDayDescriptor();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditDayDescriptor newEditDayDescriptor \u003d currentDescriptor \u003d\u003d null"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "                ? new EditDayDescriptor(editDayDescriptor)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "                : new EditDayDescriptor(currentDescriptor, editDayDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "                model.getPageStatus().withNewEditDayDescriptor(newEditDayDescriptor));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUCCESS, editDayDescriptor));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!(other instanceof EditDayFieldCommand)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditDayFieldCommand e \u003d (EditDayFieldCommand) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return editDayDescriptor.equals(e.editDayDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Stores the details to edit the day with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static class EditDayDescriptor {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cName\u003e name;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cLocalDateTime\u003e startDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cLocalDateTime\u003e endDate;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cLocation\u003e destination;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cExpenditure\u003e totalBudget;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cDescription\u003e description;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public EditDayDescriptor() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "            name \u003d Optional.empty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "            startDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "            endDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "            destination \u003d Optional.empty();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "            totalBudget \u003d Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "            description \u003d Optional.empty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public EditDayDescriptor(EditDayFieldCommand.EditDayDescriptor toCopy) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": "            name \u003d toCopy.getName();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "            startDate \u003d toCopy.getStartDate();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "            endDate \u003d toCopy.getEndDate();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": "            destination \u003d toCopy.getDestination();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teoha"
        },
        "content": "            totalBudget \u003d toCopy.getBudget();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teoha"
        },
        "content": "            description \u003d toCopy.getDescription();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public EditDayDescriptor(Day toCopy) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setName(toCopy.getName());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setStartDate(toCopy.getStartDate());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setEndDate(toCopy.getEndDate());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setDestination(toCopy.getDestination());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setBudget(toCopy.getTotalBudget());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setDescription(toCopy.getDescription());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Overwrite constructor."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Constructs a new {@code EditEventDescriptor} using an {@code oldDescriptor}, overwritten with"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * values of the {@code newDescriptor} where they exist."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @param oldDescriptor Old {@code EditEventDescriptor} to use."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @param newDescriptor New {@code EditEventDescriptor} to use."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditDayDescriptor(EditDayFieldCommand.EditDayDescriptor oldDescriptor,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                 EditDayFieldCommand.EditDayDescriptor newDescriptor) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.name.ifPresentOrElse(this::setName, () -\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.name.ifPresent(this::setName));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.startDate.ifPresentOrElse(this::setStartDate, () -\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.startDate.ifPresent(this::setStartDate));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.endDate.ifPresentOrElse(this::setEndDate, () -\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.endDate.ifPresent(this::setEndDate));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.destination.ifPresentOrElse(this::setDestination, () -\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.destination.ifPresent(this::setDestination));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.totalBudget.ifPresentOrElse(this::setBudget, () -\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.totalBudget.ifPresent(this::setBudget));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.description.ifPresentOrElse(this::setDescription, () -\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.description.ifPresent(this::setDescription));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Builds a new {@code Day} instance."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Requires name, startDate, destination to have been set minimally."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Uses the Optional constructor for day to accommodate missing optional fields."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teoha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @return New {@code Day} created."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @throws NullPointerException If any of the fields are empty."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Day buildDay() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (isAllPresent(name, startDate, endDate, destination)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teoha"
        },
        "content": "                return new Day(name.get(), startDate.get(), endDate.get(), description,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        destination.get(), totalBudget, new EventList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teoha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teoha"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Builds an edited {@code Day} instance from this {@code EditEventDescriptor}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Uses the original day information first, overwriting where the values exist."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teoha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @param day Source {@code Day} instance."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @return Edited {@code Day} instance."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Day buildDay(Day day) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Name dayName \u003d day.getName();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teoha"
        },
        "content": "            LocalDateTime startDate \u003d day.getStartDate();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teoha"
        },
        "content": "            LocalDateTime endDate \u003d day.getEndDate();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Location destination \u003d day.getDestination();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Optional\u003cExpenditure\u003e budget \u003d day.getTotalBudget();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Optional\u003cDescription\u003e description \u003d day.getDescription();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.name.isPresent()) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayName \u003d this.name.get();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.startDate.isPresent()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teoha"
        },
        "content": "                startDate \u003d this.startDate.get();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.endDate.isPresent()) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teoha"
        },
        "content": "                endDate \u003d this.endDate.get();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.destination.isPresent()) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teoha"
        },
        "content": "                destination \u003d this.destination.get();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.totalBudget.isPresent()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teoha"
        },
        "content": "                budget \u003d this.totalBudget;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.description.isPresent()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teoha"
        },
        "content": "                description \u003d this.description;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new Day(dayName, startDate, endDate, description, destination, budget, day.getEventList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return CollectionUtil.isAnyPresent(name, startDate, endDate, destination, totalBudget, description);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.name \u003d Optional.of(name);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.startDate \u003d Optional.of(startDate);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getStartDate() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return startDate;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.endDate \u003d Optional.of(endDate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getEndDate() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teoha"
        },
        "content": "            //end date is optional, but return null to conform with the rest."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return endDate;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setDestination(Location destination) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.destination \u003d Optional.of(destination);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cLocation\u003e getDestination() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return destination;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.description \u003d Optional.of(description);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private void setDescription(Optional\u003cDescription\u003e description) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setBudget(Expenditure totalBudget) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d Optional.of(totalBudget);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Support optional fields from Day"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setBudget(Optional\u003cExpenditure\u003e totalBudget) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cExpenditure\u003e getBudget() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return totalBudget;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return description;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teoha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teoha"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "teoha"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teoha"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (!(other instanceof EditCommand.EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teoha"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "teoha"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teoha"
        },
        "content": "            EditDayFieldCommand.EditDayDescriptor e \u003d (EditDayFieldCommand.EditDayDescriptor) other;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getDestination().equals(e.getDestination())"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getBudget().equals(e.getBudget())"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teoha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teoha"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.name.ifPresent(name -\u003e builder.append(\" Name of day: \").append(name));"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.startDate.ifPresent(startDate -\u003e"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    builder.append(\" Start date: \").append(ParserDateUtil.getDisplayTime(startDate)));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.endDate.ifPresent(endDate -\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    builder.append(\" End date: \").append(ParserDateUtil.getDisplayTime(endDate)));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.destination.ifPresent(destination -\u003e builder.append(\" Destination: \").append(destination));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget.ifPresent(totalBudget -\u003e builder.append(\" Total Budget: \").append(totalBudget));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.description.ifPresent(description -\u003e builder.append(\" Description: \").append(description));"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 299,
      "ang-zeyu": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/events/DeleteEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a event from day list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_FAILURE \u003d \"Failed to delete your event, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"the index you specified is likely out of bounds!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_DELETE_EVENT_SUCCESS \u003d \"Deleted your event : %1$s!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Index indexToDelete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DeleteEventCommand(Index indexToDelete) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.indexToDelete \u003d indexToDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Assumes EnterDayCommand has been called first"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Reference to EventList in model is preserved in PageStatus"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getPageStatus().getDay().getEventList().internalList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (indexToDelete.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // References preserved by PageStatus"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Event eventToDelete \u003d lastShownList.get(indexToDelete.getZeroBased());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            model.getPageStatus().getDay().getEventList().remove(indexToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_EVENT_FAILURE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EVENT_SUCCESS, eventToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || other instanceof DeleteEventCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 56,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/events/EnterCreateEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterCreateEventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the event creation page of TravelPal.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered the event creation screen.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "                model.getPageStatus().withNewPageType(PageType.ADD_EVENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || other instanceof EnterCreateEventCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teoha": 32,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/events/EnterEditEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.events;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.EditEventFieldCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterEditEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the event information editing screen\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_ENTER_EDIT_EVENT_SUCCESS \u003d \" Welcome to your event! %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Index indexToEdit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterEditEventCommand(Index indexToEdit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.indexToEdit \u003d indexToEdit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Assumes EnterDayCommand has already been called"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cEvent\u003e lastShownList \u003d model.getPageStatus().getDay().getEventList().internalList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (indexToEdit.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Event eventToEdit \u003d lastShownList.get(indexToEdit.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditEventFieldCommand.EditEventDescriptor editEventDescriptor \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new EditEventFieldCommand.EditEventDescriptor(eventToEdit);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewPageType(PageType.ADD_EVENT)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewEvent(eventToEdit)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewEditEventDescriptor(editEventDescriptor));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENTER_EDIT_EVENT_SUCCESS, eventToEdit), true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || other instanceof EnterEditEventCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 54,
      "ang-zeyu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/events/edit/CancelEditEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.events.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class CancelEditEventCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels editing or creating a new event.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CANCEL_CREATE_SUCCESS \u003d \"Cancelled creating the event!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CANCEL_EDIT_SUCCESS \u003d \"Cancelled editing the event: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CancelEditEventCommand() { }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Event currentlyEditingEvent \u003d model.getPageStatus().getEvent();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetEditEventDescriptor()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewPageType(PageType.EVENT_PAGE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetEvent());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (currentlyEditingEvent \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult(MESSAGE_CANCEL_CREATE_SUCCESS, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    String.format(MESSAGE_CANCEL_EDIT_SUCCESS, currentlyEditingEvent), true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other instanceof CancelEditEventCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 43,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/events/edit/DoneEditEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.events.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.exceptions.ClashingEventException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DoneEditEventCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Commits your new or edited event information.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CREATE_EVENT_SUCCESS \u003d \"Created Event: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_EDIT_EVENT_SUCCESS \u003d \"Edited Event: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"All the fields must be provided!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CLASHING_EVENT \u003d \"This event clashes with one of your other events!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DoneEditEventCommand() { }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditEventFieldCommand.EditEventDescriptor editEventDescriptor \u003d model.getPageStatus().getEditEventDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Event eventToEdit \u003d model.getPageStatus().getEvent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Event eventToAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (editEventDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (eventToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "                //buildEvent() requires compulsory fields to be non null, failing which"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                //NullPointerException is caught below"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventToAdd \u003d editEventDescriptor.buildEvent();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                model.getPageStatus().getDay().getEventList().add(eventToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "                //edit the current \"selected\" event"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventToAdd \u003d editEventDescriptor.buildEvent(eventToEdit);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "                model.getPageStatus().getDay().getEventList().set(eventToEdit, eventToAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "            model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .withResetEditEventDescriptor()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .withNewPageType(PageType.EVENT_PAGE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .withResetEvent());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_EVENT_SUCCESS, eventToAdd), true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (NullPointerException | EventNotFoundException ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ClashingEventException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new CommandException(MESSAGE_CLASHING_EVENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other instanceof DoneEditEventCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 67,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/events/edit/EditEventFieldCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.itinerary.events.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.isAllPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EditEventFieldCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of your form \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"by the index of the form field as displayed, or by the various prefixes of the fields. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_DATE_START + \"START DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_DATE_END + \"END DATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"DESTINATION] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_BUDGET + \"TOTAL BUDGET \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"[\" + PREFIX_INVENTORY + \"\u003cto be implemented\u003e \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"|\" + PREFIX_BOOKING + \"\u003cto be implemented\u003e]...\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_LOCATION + \" ABC Zoo \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + PREFIX_BUDGET + \"10\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to must be provided!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"Edited the current form:%1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param editEventDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EditEventFieldCommand(EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(editEventDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.editEventDescriptor \u003d editEventDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditEventDescriptor currentDescriptor \u003d model.getPageStatus().getEditEventDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditEventDescriptor newEditEventDescriptor \u003d currentDescriptor \u003d\u003d null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "                ? new EditEventDescriptor(editEventDescriptor)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "                : new EditEventDescriptor(currentDescriptor, editEventDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "                model.getPageStatus().withNewEditEventDescriptor(newEditEventDescriptor));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUCCESS, editEventDescriptor));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!(other instanceof EditEventDescriptor)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditEventFieldCommand e \u003d (EditEventFieldCommand) other;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return editEventDescriptor.equals(e.editEventDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Stores the details to edit the event with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * corresponding field value of the event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * WARNING: REFACTOR AFTER COMPLETING IMPLEMENTATION OF JSONADAPTED BOOKING/INVENTORY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static class EditEventDescriptor {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cName\u003e name;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cLocalDateTime\u003e startDate;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cLocalDateTime\u003e endDate;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cLocation\u003e destination;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cExpenditure\u003e totalBudget;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cInventory\u003e inventory;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private Optional\u003cBooking\u003e booking;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public EditEventDescriptor() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "            name \u003d Optional.empty();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "            startDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "            endDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "            destination \u003d Optional.empty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "            totalBudget \u003d Optional.empty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor toCopy) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teoha"
        },
        "content": "            name \u003d toCopy.getName();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teoha"
        },
        "content": "            startDate \u003d toCopy.getStartDate();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teoha"
        },
        "content": "            endDate \u003d toCopy.getEndDate();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teoha"
        },
        "content": "            destination \u003d toCopy.getDestination();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teoha"
        },
        "content": "            totalBudget \u003d toCopy.getBudget();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teoha"
        },
        "content": "            inventory \u003d toCopy.getInventory();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teoha"
        },
        "content": "            booking \u003d toCopy.getBooking();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public EditEventDescriptor(Event toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setName(toCopy.getName());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setStartDate(toCopy.getStartDate());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setEndDate(toCopy.getEndDate());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setDestination(toCopy.getDestination());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setBudget(toCopy.getTotalBudget());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setInventory(toCopy.getInventory());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setBooking(toCopy.getBooking());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Overwrite constructor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Constructs a new {@code EditEventDescriptor} using an {@code oldDescriptor}, overwritten with"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * values of the {@code newDescriptor} where they exist."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teoha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @param oldDescriptor Old {@code EditEventDescriptor} to use."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @param newDescriptor New {@code EditEventDescriptor} to use."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public EditEventDescriptor(EditEventDescriptor oldDescriptor, EditEventDescriptor newDescriptor) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.name.ifPresentOrElse(this::setName, () -\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.name.ifPresent(this::setName));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.startDate.ifPresentOrElse(this::setStartDate, () -\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.startDate.ifPresent(this::setStartDate));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.endDate.ifPresentOrElse(this::setEndDate, () -\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.endDate.ifPresent(this::setEndDate));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.destination.ifPresentOrElse(this::setDestination, () -\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.destination.ifPresent(this::setDestination));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.totalBudget.ifPresentOrElse(this::setBudget, () -\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.totalBudget.ifPresent(this::setBudget));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.inventory.ifPresentOrElse(this::setInventory,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    () -\u003e oldDescriptor.inventory.ifPresent(this::setInventory));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.booking.ifPresentOrElse(this::setBooking,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    () -\u003e oldDescriptor.booking.ifPresent(this::setBooking));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "             */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Builds a new {@code Event} instance."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Requires name, startDate, destination to have been set minimally."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Uses the Optional constructor for event to accommodate missing optional fields."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teoha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @return New {@code Event} created."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @throws NullPointerException If any of the fields are empty."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Event buildEvent() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (isAllPresent(name, startDate, endDate, destination)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teoha"
        },
        "content": "                return new Event(name.get(), startDate.get(), endDate.get(), totalBudget, destination.get());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teoha"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teoha"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Builds an edited {@code Event} instance from this {@code EditEventDescriptor}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Uses the original eventrmation first, overwriting where the values exist."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * WARNING: USING INCOMPLETE CONSTRUCTOR, REFACTOR AFTER IMPLEMENTING BOOKING AND INVENTORY"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teoha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @param event Source {@code Event} instance."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @param event"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @return Edited {@code Event} instance."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Event buildEvent(Event event) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Name eventName \u003d event.getName();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teoha"
        },
        "content": "            LocalDateTime startDate \u003d event.getStartDate();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teoha"
        },
        "content": "            LocalDateTime endDate \u003d event.getEndDate();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Location destination \u003d event.getDestination();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Optional\u003cExpenditure\u003e budget \u003d event.getTotalBudget();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Optional\u003cBooking\u003e booking \u003d event.getBooking();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Optional\u003cInventory\u003e inventory \u003d event.getInventory();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.name.isPresent()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventName \u003d this.name.get();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.startDate.isPresent()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teoha"
        },
        "content": "                startDate \u003d this.startDate.get();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.endDate.isPresent()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teoha"
        },
        "content": "                endDate \u003d this.endDate.get();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.destination.isPresent()) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teoha"
        },
        "content": "                destination \u003d this.destination.get();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.totalBudget.isPresent()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "teoha"
        },
        "content": "                budget \u003d this.totalBudget;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.inventory.isPresent()) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teoha"
        },
        "content": "                inventory \u003d this.inventory;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (this.booking.isPresent()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teoha"
        },
        "content": "                booking \u003d this.booking;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new Event(eventName, startDate, endDate, totalBudget, destination);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return CollectionUtil.isAnyPresent(name, startDate, endDate, destination, totalBudget, booking, inventory);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.name \u003d Optional.of(name);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.startDate \u003d Optional.of(startDate);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getStartDate() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return startDate;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.endDate \u003d Optional.of(endDate);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getEndDate() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "teoha"
        },
        "content": "            //end date is optional, but return null to conform with the rest."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return endDate;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setDestination(Location destination) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.destination \u003d Optional.of(destination);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cLocation\u003e getDestination() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return destination;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setBudget(Expenditure totalBudget) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d Optional.of(totalBudget);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setBudget(Optional\u003cExpenditure\u003e totalBudget) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cExpenditure\u003e getBudget() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return totalBudget;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cBooking\u003e getBooking() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return booking;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Optional\u003cInventory\u003e getInventory() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return inventory;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private void setInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.inventory \u003d Optional.of(inventory);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Support optional fields from Event"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setInventory(Optional\u003cInventory\u003e inventory) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private void setBooking(Booking booking) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.booking \u003d Optional.of(booking);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setBooking(Optional\u003cBooking\u003e booking) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.booking \u003d booking;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teoha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "teoha"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "teoha"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teoha"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (!(other instanceof EditCommand.EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teoha"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teoha"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "teoha"
        },
        "content": "            EditEventDescriptor e \u003d (EditEventDescriptor) other;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getDestination().equals(e.getDestination())"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 getBudget().equals(e.getBudget());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teoha"
        },
        "content": "//                    \u0026\u0026 getInventory().equals((e.getInventory()))"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "teoha"
        },
        "content": "//                    \u0026\u0026 getBooking().equals((e.getBooking()));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "teoha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "teoha"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.name.ifPresent(name -\u003e builder.append(\" Name of event: \").append(name));"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.startDate.ifPresent(startDate -\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    builder.append(\" Start date: \").append(ParserDateUtil.getDisplayTime(startDate)));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.endDate.ifPresent(endDate -\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    builder.append(\" End date: \").append(ParserDateUtil.getDisplayTime(endDate)));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.destination.ifPresent(destination -\u003e builder.append(\" Destination: \").append(destination));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget.ifPresent(totalBudget -\u003e builder.append(\" Total Budget: \").append(totalBudget));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            /*"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.inventory.ifPresent(inventory -\u003e builder.append(\" Inventory: \").append(inventory));"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.booking.ifPresent(booking -\u003e builder.append(\" Booking/s: \").append(booking));"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 323,
      "ang-zeyu": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/preferences/CancelEditPrefsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand.EditPrefsDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Command that brings the user out of the preferences screen."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CancelEditPrefsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels editing your preferences.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CANCEL_EDIT_SUCCESS \u003d \"Cancelled editing your preferences!\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Your changes have been discarded. %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CancelEditPrefsCommand() { }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditPrefsDescriptor currentEditedPrefs \u003d model.getPageStatus().getEditPrefsDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewEditPrefsDescriptor(null)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewPageType(PageType.TRIP_MANAGER));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                String.format(MESSAGE_CANCEL_EDIT_SUCCESS, currentEditedPrefs),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other instanceof CancelEditPrefsCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/preferences/DoneEditPrefsCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand.EditPrefsDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Constructs a command that attempts to commit the current changes in the edit trip page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DoneEditPrefsCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Commits your edited preferneces.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_EDIT_PREFERENCES_SUCCESS \u003d \"Edited Preferences: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"All the fields must be provided!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CLASHING_TRIP \u003d \"This trip clashes with one of your other trips!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoneEditPrefsCommand() { }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditPrefsDescriptor editPrefsDescriptor \u003d model.getPageStatus().getEditPrefsDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(editPrefsDescriptor);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //buildUserPrefs() requires all fields to be non present, failing which"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //NullPointerException is caught below"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            UserPrefs userPrefs \u003d editPrefsDescriptor.buildUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            model.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .withNewEditPrefsDescriptor(null)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .withNewPageType(PageType.TRIP_MANAGER));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PREFERENCES_SUCCESS, userPrefs), true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (NullPointerException ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other instanceof DoneEditPrefsCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/preferences/EditPrefsFieldCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.isAllPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_DATA_FILE_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_GUI_LOCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_HEIGHT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_WIDTH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_XPOS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_YPOS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.OptionalDouble;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.OptionalInt;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Constructs a command that attempts to modify the current values in the edit trip page."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * It overwrites each of the values of the current pageStatus editTripDescriptor with"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * the provided editTripDescriptor\u0027s values if they are specified."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditPrefsFieldCommand extends Command {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits your preferences fields \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"by the index of the form field as displayed, or by the various prefixes of the fields. \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_WINDOW_WIDTH + \"WINDOW WIDTH (must be a positive decimal integer)] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_WINDOW_HEIGHT + \"WINDOW HEIGHT (must be a positive decimal integer)] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_WINDOW_XPOS + \"WINDOW X POSITION (must be an integer)] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_WINDOW_YPOS + \"WINDOW Y POSITION (must be an integer)] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_GUI_LOCK + \"GUI LOCK (\u0027t\u0027 or \u0027f\u0027, case insensitive)] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_DATA_FILE_PATH + \"DATA FILE PATH (must be a valid path to an existing file)]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + PREFIX_WINDOW_WIDTH + \"800 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + PREFIX_WINDOW_HEIGHT + \"600\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to must be provided!\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"Edited the current form:%1$s\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final EditPrefsDescriptor editPrefsDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param editPrefsDescriptor {@code EditPrefsDescriptor} to modify the current descriptor with."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditPrefsFieldCommand(EditPrefsDescriptor editPrefsDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(editPrefsDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.editPrefsDescriptor \u003d editPrefsDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditPrefsDescriptor currentDescriptor \u003d model.getPageStatus().getEditPrefsDescriptor();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(currentDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditPrefsDescriptor newEditPrefsDescriptor \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new EditPrefsDescriptor(currentDescriptor, editPrefsDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().withNewEditPrefsDescriptor(newEditPrefsDescriptor));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUCCESS, editPrefsDescriptor));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!(other instanceof EditPrefsFieldCommand)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditPrefsFieldCommand e \u003d (EditPrefsFieldCommand) other;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return editPrefsDescriptor.equals(e.editPrefsDescriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Stores the details to edit the preferences with."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Each non-empty field value will replace the"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * corresponding field value of the preferences field."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static class EditPrefsDescriptor {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private OptionalDouble windowWidth;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private OptionalDouble windowHeight;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private OptionalInt windowXPosition;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private OptionalInt windowYPosition;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Optional\u003cString\u003e dataFilePath;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Optional\u003cBoolean\u003e isGuiLocked;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditPrefsDescriptor() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowWidth \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowHeight \u003d OptionalDouble.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowXPosition \u003d OptionalInt.empty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowYPosition \u003d OptionalInt.empty();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            dataFilePath \u003d Optional.empty();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            isGuiLocked \u003d Optional.empty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditPrefsDescriptor(EditPrefsDescriptor toCopy) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowHeight \u003d toCopy.getWindowHeight();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowWidth \u003d toCopy.getWindowWidth();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowXPosition \u003d toCopy.getWindowXPos();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowYPosition \u003d toCopy.getWindowYPos();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            dataFilePath \u003d toCopy.getDataFilePath();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            isGuiLocked \u003d toCopy.isGuiLocked();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditPrefsDescriptor(ReadOnlyUserPrefs toCopy) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            GuiSettings currentGuiSettings \u003d toCopy.getGuiSettings();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Path currentDataFilePath \u003d toCopy.getTravelPalFilePath();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowHeight \u003d OptionalDouble.of(currentGuiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowWidth \u003d OptionalDouble.of(currentGuiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowXPosition \u003d OptionalInt.of(currentGuiSettings.getWindowCoordinates().x);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowYPosition \u003d OptionalInt.of(currentGuiSettings.getWindowCoordinates().y);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            dataFilePath \u003d Optional.of(currentDataFilePath.toString());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            isGuiLocked \u003d Optional.of(toCopy.isGuiPrefsLocked());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Overwrite constructor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Constructs a new {@code EditTripDescriptor} using an {@code oldDescriptor}, overwritten with"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * values of the {@code newDescriptor} where they exist."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @param oldDescriptor Old {@code EditTripDescriptor} to use."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @param newDescriptor New {@code EditTripDescriptor} to use."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditPrefsDescriptor(EditPrefsDescriptor oldDescriptor, EditPrefsDescriptor newDescriptor) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.windowWidth.ifPresentOrElse("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    this::setWindowWidth, () -\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            oldDescriptor.windowWidth.ifPresent(this::setWindowWidth));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.windowHeight.ifPresentOrElse("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    this::setWindowHeight, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            oldDescriptor.windowHeight.ifPresent(this::setWindowHeight));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.windowXPosition.ifPresentOrElse("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    this::setWindowXPos, () -\u003e"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            oldDescriptor.windowXPosition.ifPresent(this::setWindowXPos));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.windowYPosition.ifPresentOrElse("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    this::setWindowYPos, () -\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            oldDescriptor.windowYPosition.ifPresent(this::setWindowYPos));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.dataFilePath.ifPresentOrElse("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    this::setDataFilePath, () -\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            oldDescriptor.dataFilePath.ifPresent(this::setDataFilePath));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.isGuiLocked.ifPresentOrElse("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    this::setGuiLocked, () -\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            oldDescriptor.isGuiLocked.ifPresent(this::setGuiLocked));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Builds a new {@code UserPrefs} instance."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Requires all fields to have been set."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @return New {@code UserPrefs} created."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @throws NullPointerException If any of the specified fields are empty."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public UserPrefs buildUserPrefs() throws NullPointerException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (isAllPresent(dataFilePath, isGuiLocked) \u0026\u0026 windowWidth.isPresent() \u0026\u0026 windowHeight.isPresent()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 windowXPosition.isPresent() \u0026\u0026 windowYPosition.isPresent()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                GuiSettings guiSettings \u003d new GuiSettings(windowWidth.getAsDouble(), windowHeight.getAsDouble(),"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        windowXPosition.getAsInt(), windowYPosition.getAsInt());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Path dataFilePath \u003d Paths.get(this.dataFilePath.get());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                userPrefs.setTravelPalFilePath(dataFilePath);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                userPrefs.setGuiPrefsLocked(isGuiLocked.get());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return userPrefs;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return CollectionUtil.isAnyPresent(dataFilePath, isGuiLocked)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    || windowWidth.isPresent() || windowHeight.isPresent()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    || windowXPosition.isPresent() || windowYPosition.isPresent();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setWindowHeight(double windowHeight) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.windowHeight \u003d OptionalDouble.of(windowHeight);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public OptionalDouble getWindowHeight() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return this.windowHeight;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setWindowWidth(double windowWidth) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.windowWidth \u003d OptionalDouble.of(windowWidth);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public OptionalDouble getWindowWidth() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return this.windowWidth;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setWindowXPos(int windowXPosition) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.windowXPosition \u003d OptionalInt.of(windowXPosition);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public OptionalInt getWindowXPos() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return this.windowXPosition;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setWindowYPos(int windowYPosition) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.windowYPosition \u003d OptionalInt.of(windowYPosition);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public OptionalInt getWindowYPos() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return this.windowYPosition;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setDataFilePath(String dataFilePath) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.dataFilePath \u003d Optional.of(dataFilePath);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Optional\u003cString\u003e getDataFilePath() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return this.dataFilePath;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Optional\u003cBoolean\u003e isGuiLocked() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return isGuiLocked;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setGuiLocked(boolean isGuiLocked) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.isGuiLocked \u003d Optional.of(isGuiLocked);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (!(other instanceof EditCommand.EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            EditPrefsDescriptor e \u003d (EditPrefsDescriptor) other;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return getWindowWidth().equals(e.getWindowWidth())"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getWindowHeight().equals(e.getWindowHeight())"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getWindowXPos().equals(e.getWindowXPos())"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getWindowYPos().equals(e.getWindowYPos())"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getDataFilePath().equals(e.getDataFilePath())"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 isGuiLocked().equals(e.isGuiLocked());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowHeight.ifPresent(height -\u003e builder.append(\" Window Height: \").append(height));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowWidth.ifPresent(width -\u003e builder.append(\" Window Width: \").append(width));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowXPosition.ifPresent(xPos -\u003e builder.append(\" Window X Position: \").append(xPos));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            windowYPosition.ifPresent(yPos -\u003e builder.append(\" Window Y Position: \").append(yPos));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            isGuiLocked.ifPresent(guiLocked -\u003e builder.append(\" Is gui locked: \").append(guiLocked));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            dataFilePath.ifPresent(dataFilePath -\u003e builder.append(\" Data file path: \").append(dataFilePath));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 304
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sidebar/EnterDayPageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterDayPageCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"days\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the days page of TravelPal.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered the days screen.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetEvent()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetDay()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewPageType(PageType.OVERALL_VIEW));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 26,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sidebar/EnterItineraryPageCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Enters the itinerary page of travel pal."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterItineraryPageCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"itinerary\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the itinerary page of TravelPal.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered the itinerary screen.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetEvent()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetDay()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewPageType(PageType.ITINERARY));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 25,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/sidebar/EnterTripManagerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.commands.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Command that brings the user to the TripManager Page via the navbar."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Clears the trip, day, and event in model."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterTripManagerCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"home\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the landing page of TravelPal.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered the landing screen.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetEvent()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetDay()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetTrip()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withNewPageType(PageType.TRIP_MANAGER));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || other instanceof EnterTripManagerCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/DeleteTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Command that deletes a trip."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DeleteTripCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a trip from TravelPal.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_DELETE_TRIP_FAILURE \u003d \"Failed to delete your trip, \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"the index you specified is likely out of bounds!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_DELETE_TRIP_SUCCESS \u003d \"Deleted your trip : %1$s!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Index indexToDelete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DeleteTripCommand(Index indexToDelete) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.indexToDelete \u003d indexToDelete;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d model.getFilteredTripList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (indexToDelete.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToDelete \u003d lastShownList.get(indexToDelete.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            model.deleteTrip(tripToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_TRIP_FAILURE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRIP_SUCCESS, tripToDelete));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof DeleteTripCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/EnterCreateTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Command that brings the user to the trip creation screen."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterCreateTripCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the trip creation page of TravelPal.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered the trip creation screen.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().withNewPageType(PageType.ADD_TRIP));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, true);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof EnterCreateTripCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/EnterEditTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand.EditTripDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Enters the trip editing screen for the indicated trip."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterEditTripCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the trip information editing screen\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_ENTER_EDIT_TRIP_SUCCESS \u003d \" Welcome to your trip! %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Index indexToEdit;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterEditTripCommand(Index indexToEdit) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.indexToEdit \u003d indexToEdit;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d model.getFilteredTripList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (indexToEdit.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToEdit \u003d lastShownList.get(indexToEdit.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripDescriptor editTripDescriptor \u003d new EditTripDescriptor(tripToEdit);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewPageType(PageType.ADD_TRIP)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewTrip(tripToEdit)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewEditTripDescriptor(editTripDescriptor));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENTER_EDIT_TRIP_SUCCESS, tripToEdit), true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof EnterEditTripCommand;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/EnterTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Command that enters the itienrary page of the trip."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterTripCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the main landing page of the trip.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_ENTER_TRIP_SUCCESS \u003d \" Welcome to your trip! %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Index indexToEnter;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterTripCommand(Index indexToEnter) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.indexToEnter \u003d indexToEnter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d model.getFilteredTripList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (indexToEnter.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToEnter \u003d lastShownList.get(indexToEnter.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewPageType(PageType.ITINERARY)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewTrip(tripToEnter));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENTER_TRIP_SUCCESS, tripToEnter), true);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof EnterTripCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/edit/CancelEditTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Command that cancels editing the trip, bringing the user back to the trip manager screen."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CancelEditTripCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels editing or creating a new trip.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CANCEL_CREATE_SUCCESS \u003d \"Cancelled creating the trip!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CANCEL_EDIT_SUCCESS \u003d \"Cancelled editing the trip: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CancelEditTripCommand() { }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip currentlyEditingTrip \u003d model.getPageStatus().getTrip();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewEditTripDescriptor(null)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewPageType(PageType.TRIP_MANAGER)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .withResetTrip());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentlyEditingTrip \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(MESSAGE_CANCEL_CREATE_SUCCESS, true);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_CANCEL_EDIT_SUCCESS, currentlyEditingTrip), true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other instanceof CancelEditTripCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "ang-zeyu": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/edit/DoneEditTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Constructs a command that attempts to commit the current changes in the edit trip page."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DoneEditTripCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Commits your new or edited trip information.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CREATE_TRIP_SUCCESS \u003d \"Created Trip: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_EDIT_TRIP_SUCCESS \u003d \"Edited Trip: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"All the fields must be provided!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CLASHING_TRIP \u003d \"This trip clashes with one of your other trips!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoneEditTripCommand() { }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand.EditTripDescriptor editTripDescriptor \u003d model.getPageStatus().getEditTripDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToEdit \u003d model.getPageStatus().getTrip();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (editTripDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (tripToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                //buildTrip() requires all fields to be non null, failing which"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                //NullPointerException is caught below"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripToAdd \u003d editTripDescriptor.buildTrip();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.addTrip(tripToAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                //edit the current \"selected\" trip"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripToAdd \u003d editTripDescriptor.buildTrip(tripToEdit);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.setTrip(tripToEdit, tripToAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .withResetEditTripDescriptor()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .withNewPageType(PageType.TRIP_MANAGER)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .withResetTrip());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_TRIP_SUCCESS, tripToAdd), true);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (NullPointerException | TripNotFoundException ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ClashingTripException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(MESSAGE_CLASHING_TRIP);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other instanceof DoneEditTripCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 2,
      "ang-zeyu": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/edit/EditTripFieldCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.isAllPresent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Constructs a command that attempts to modify the current values in the edit trip page."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * It overwrites each of the values of the current pageStatus editTripDescriptor with"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * the provided editTripDescriptor\u0027s values if they are specified."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditTripFieldCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of your form \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"by the index of the form field as displayed, or by the various prefixes of the fields. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_DATE_START + \"START DATE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_DATE_END + \"END DATE] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"DESTINATION] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_BUDGET + \"TOTAL BUDGET]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 Thailand trip\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + PREFIX_BUDGET + \"3000\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to must be provided!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"Edited the current form:%1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final EditTripDescriptor editTripDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param editTripDescriptor details to edit the trip with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditTripFieldCommand(EditTripDescriptor editTripDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(editTripDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.editTripDescriptor \u003d editTripDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripDescriptor currentDescriptor \u003d model.getPageStatus().getEditTripDescriptor();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripDescriptor newEditTripDescriptor \u003d currentDescriptor \u003d\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                ? new EditTripDescriptor(editTripDescriptor)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                : new EditTripDescriptor(currentDescriptor, editTripDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().withNewEditTripDescriptor(newEditTripDescriptor));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUCCESS, editTripDescriptor));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!(other instanceof EditTripFieldCommand)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand e \u003d (EditTripFieldCommand) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return editTripDescriptor.equals(e.editTripDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Stores the details to edit the trip with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * corresponding field value of the trip."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static class EditTripDescriptor {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Optional\u003cName\u003e name;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Optional\u003cLocalDateTime\u003e startDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Optional\u003cLocalDateTime\u003e endDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Optional\u003cLocation\u003e destination;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Optional\u003cExpenditure\u003e totalBudget;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditTripDescriptor() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            name \u003d Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            startDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            endDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            destination \u003d Optional.empty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            totalBudget \u003d Optional.empty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditTripDescriptor(EditTripDescriptor toCopy) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            name \u003d toCopy.getName();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            startDate \u003d toCopy.getStartDate();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            endDate \u003d toCopy.getEndDate();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            destination \u003d toCopy.getDestination();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            totalBudget \u003d toCopy.getBudget();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditTripDescriptor(Trip toCopy) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setName(toCopy.getName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setStartDate(toCopy.getStartDate());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setEndDate(toCopy.getEndDate());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setDestination(toCopy.getDestination());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teoha"
        },
        "content": "            setBudget(toCopy.getBudget());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Overwrite constructor."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Constructs a new {@code EditTripDescriptor} using an {@code oldDescriptor}, overwritten with"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * values of the {@code newDescriptor} where they exist."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @param oldDescriptor Old {@code EditTripDescriptor} to use."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @param newDescriptor New {@code EditTripDescriptor} to use."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditTripDescriptor(EditTripDescriptor oldDescriptor, EditTripDescriptor newDescriptor) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.name.ifPresentOrElse(this::setName, () -\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.name.ifPresent(this::setName));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.startDate.ifPresentOrElse(this::setStartDate, () -\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.startDate.ifPresent(this::setStartDate));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.endDate.ifPresentOrElse(this::setEndDate, () -\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.endDate.ifPresent(this::setEndDate));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.destination.ifPresentOrElse(this::setDestination, () -\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.destination.ifPresent(this::setDestination));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newDescriptor.totalBudget.ifPresentOrElse(this::setBudget, () -\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    oldDescriptor.totalBudget.ifPresent(this::setBudget));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Builds a new {@code Trip} instance."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Requires name, startDate, destination and budget to have been set minimally."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @return New {@code Trip} created."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @throws NullPointerException If any of the fields are empty."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Trip buildTrip() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (isAllPresent(name, startDate, endDate, destination, totalBudget)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return new Trip(name.get(), startDate.get(), endDate.get(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        destination.get(), totalBudget.get(), new DayList());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Builds an edited {@code Trip} instance from this {@code EditTripDescriptor}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Uses the original trip information first, overwriting where the values exist."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @param trip Source {@code Trip} instance."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @return Edited {@code Trip} instance."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Trip buildTrip(Trip trip) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Name tripName \u003d trip.getName();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            LocalDateTime startDate \u003d trip.getStartDate();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            LocalDateTime endDate \u003d trip.getEndDate();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Location destination \u003d trip.getDestination();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Expenditure budget \u003d trip.getBudget();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.name.isPresent()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripName \u003d this.name.get();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.startDate.isPresent()) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                startDate \u003d this.startDate.get();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.endDate.isPresent()) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                endDate \u003d this.endDate.get();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.destination.isPresent()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                destination \u003d this.destination.get();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.totalBudget.isPresent()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                budget \u003d this.totalBudget.get();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new Trip(tripName, startDate, endDate, destination, budget, trip.getDayList());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return CollectionUtil.isAnyPresent(name, startDate, endDate, destination, totalBudget);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.name \u003d Optional.of(name);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.startDate \u003d Optional.of(startDate);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getStartDate() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return startDate;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.endDate \u003d Optional.of(endDate);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Optional\u003cLocalDateTime\u003e getEndDate() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //end date is optional, but return null to conform with the rest."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return endDate;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setDestination(Location destination) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.destination \u003d Optional.of(destination);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Optional\u003cLocation\u003e getDestination() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return destination;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setBudget(Expenditure totalBudget) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.totalBudget \u003d Optional.of(totalBudget);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Optional\u003cExpenditure\u003e getBudget() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return totalBudget;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (!(other instanceof EditTripFieldCommand.EditTripDescriptor)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            EditTripDescriptor e \u003d (EditTripDescriptor) other;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getDestination().equals(e.getDestination())"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getBudget().equals(e.getBudget());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.name.ifPresent(name -\u003e builder.append(\" Name of trip: \").append(name));"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.startDate.ifPresent(startDate -\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    builder.append(\" Start date: \").append(ParserDateUtil.getDisplayTime(startDate)));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.endDate.ifPresent(endDate -\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    builder.append(\" End date: \").append(ParserDateUtil.getDisplayTime(endDate)));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.destination.ifPresent(destination -\u003e builder.append(\" Destination: \").append(destination));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.totalBudget.ifPresent(totalBudget -\u003e builder.append(\" Total Budget: \").append(totalBudget));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 6,
      "ang-zeyu": 290
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_DATE_START \u003d new Prefix(\"ds/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_DATE_END \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Prefix PREFIX_INVENTORY \u003d new Prefix(\"inv/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Prefix PREFIX_BOOKING \u003d new Prefix(\"bo/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "-": 14,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 82,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Represents a categorical Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public interface PageParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses {@code command} into an exact, non-categorical {@code Parser}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * which then parses the arguments into a {@code Command} and returns the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if {@code command} does not conform any of the expected formats"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Command parse(String command, String arguments) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserDateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Utility methods for parsing date times and collection of date formats."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class ParserDateUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The required input date format to use. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DATE_TIME_FORMAT \u003d \"d/M/y HHmm\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The required input date format to use. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"d/M/y\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The required input time format to use. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The output format for displaying dates and times. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DISPLAY_FORMAT \u003d \"d MMM y h:mma\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the DATE_TIME_FORMAT pattern. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the DATE_FORMAT pattern. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the TIME_FORMAT pattern. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the DISPLAY_FORMAT pattern. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(DISPLAY_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The error display message format to be shown if parsing fails. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d \"Invalid %1$s inputted, use %2$s.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the input string using the {@code DATE_TIME_FORMATTER}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the LocalDateTime representation of the string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dateTimeString The input string."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The localDateTime object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException If the input string format does not follow the pattern."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static LocalDateTime getDateTimeFromString(String dateTimeString) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return LocalDateTime.parse(dateTimeString.trim(), DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FORMAT, \"date or time\", DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the input string using the {@code DATE_FORMATTER}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the LocalDateTime representation of the string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dateString The input string."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The localDateTime object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException If the input string format does not follow the pattern."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static LocalDateTime getDateFromString(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return LocalDate.parse(dateString.trim(), DATE_FORMATTER).atStartOfDay();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FORMAT, \"date\", DATE_FORMAT));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the input string using the timeFormatter."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the LocalTime representation of the string."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param timeString The input string."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The LocalTime object."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException If the input string format does not follow the pattern."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static LocalTime getTimeFromString(String timeString) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return LocalTime.parse(timeString.trim(), TIME_FORMATTER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FORMAT, \"time\", TIME_FORMAT));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the string representation of the LocalDateTime object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Uses the displayFormatter and DISPLAY_FORMAT to format the string."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dateTime The input LocalDateTime object."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The string representation of the localDateTime."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static String getDisplayTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return DISPLAY_FORMATTER.format(dateTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Converts the input {@code localDateTime} using the {@code DATE_FORMATTER}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the date string representation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param localDateTime The input localDateTime."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The string representation."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static String getStringFromDate(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return DATE_FORMATTER.format(localDateTime);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_GENERIC_BOOLEAN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the given {@code String} into a {@code boolean}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns true if the string is \"t\", or false if \"f\"."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * It is case insensitive."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param bool The boolean string to parse."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException If the string is neither \"t\" nor \"f\" (case-insensitive)."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static boolean parseBool(String bool) throws ParseException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (bool.equalsIgnoreCase(\"t\")) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else if (bool.equalsIgnoreCase(\"f\")) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new ParseException(MESSAGE_INVALID_GENERIC_BOOLEAN);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 124,
      "ang-zeyu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TravelPalParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.common.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.bookings.BookingsParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.common.CommonParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.contacts.ContactsParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.diary.DiaryParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.expense.ExpenseParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.inventory.InventoryParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.itinerary.dayview.DayViewParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.itinerary.dayview.edit.EditDayParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.itinerary.eventview.EventViewParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.itinerary.eventview.edit.EditEventParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.itinerary.overallview.ItineraryViewParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.preferences.PreferencesParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.trips.TripManagerParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.trips.edit.EditTripParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TravelPalParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Message to display when the command for the page has not been implemented. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String UNKNOWN_PAGE_MESSAGE \u003d \"The commands for the page have not been implemented yet!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Logger associated with TravelPalParser instance. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TravelPalParser.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param pageStatus the PageStatus instance with which to parse this input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parseCommand(String userInput, PageStatus pageStatus) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toUpperCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        PageParser commonParser;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Command commonCommand \u003d new CommonParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return commonCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            logger.info(\"User command executed was not a common command\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        PageType currentPage \u003d pageStatus.getPageType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (currentPage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case PREFERENCES:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new PreferencesParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case TRIP_MANAGER:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new TripManagerParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ADD_TRIP:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EditTripParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ADD_DAY:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EditDayParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EditEventParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ITINERARY:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new ItineraryViewParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case OVERALL_VIEW:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new DayViewParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EVENT_PAGE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EventViewParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case PRETRIP_INVENTORY:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new InventoryParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EXPENSE_MANAGER:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new ExpenseParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DIARY:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DiaryParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case CONTACTS_MANAGER:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new ContactsParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case BOOKINGS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new BookingsParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(UNKNOWN_PAGE_MESSAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 8,
      "ang-zeyu": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/bookings/BookingsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.bookings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class BookingsParser implements PageParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/common/CommonCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Enumeration of commands that can be executed at any {@code Page}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum CommonCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    PREFS,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    HELP"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/common/CommonParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.common.EnterPrefsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses commands that work regardless of the current page of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CommonParser implements PageParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EnterPrefsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        CommonCommand commandType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            commandType \u003d CommonCommand.valueOf(command);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case PREFS:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterPrefsCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case HELP:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/ContactsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class ContactsParser implements PageParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/diary/DiaryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DiaryParser implements PageParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expense/ExpenseParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class ExpenseParser implements PageParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class InventoryParser implements PageParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/ItineraryParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Utility class for itinerary."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": " * WARNING INCOMPLETE: IMPLEMENT PARSING FOR BOOKING/INVENTORY HERE"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public abstract class ItineraryParserUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws ParseException if the given {@code Location} is invalid."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Parses a {@code String budget} into a {@code Expenditure}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws ParseException if the given {@code Expenditure} is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static Expenditure parseBudget(String budget) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String trimmedBudget \u003d budget.trim();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Expenditure.isValidExpenditure(trimmedBudget)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(Expenditure.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new Expenditure(trimmedBudget);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws ParseException if the {@code Description} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Optional\u003cBooking\u003e parseBooking() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Optional\u003cInventory\u003e parseInventory() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 75,
      "ang-zeyu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/addday/AddDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.addday;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class AddDayParser implements PageParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/addevent/AddEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.addevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class AddEventParser implements PageParser {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/DayViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public enum DayViewCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    CREATE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    GOTO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    HOME,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    DAYS,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ITINERARY"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 11,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/DayViewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.DeleteDayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.EnterCreateDayCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.EnterDayCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.EnterEditDayCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterDayPageCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterItineraryPageCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterTripManagerCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterDayPageParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterItineraryPageParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterTripManagerParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parser class responsible for directing commands belonging to the day view."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DayViewParser implements PageParser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterCreateDayCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + DeleteDayCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterDayCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterEditDayCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterTripManagerCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterDayPageCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterItineraryPageCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DayViewCommand commandType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "            commandType \u003d DayViewCommand.valueOf(command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case CREATE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterCreateDayParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new DeleteDayParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case GOTO:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterDayParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterEditDayParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case HOME:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterTripManagerParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case DAYS:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterDayPageParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case ITINERARY:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterItineraryPageParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 44,
      "ang-zeyu": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/DeleteDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.DeleteDayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DeleteDayParser implements Parser\u003cDeleteDayCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DeleteDayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new DeleteDayCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteDayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 20,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/EnterCreateDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.EnterCreateDayCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterCreateDayParser implements Parser\u003cEnterCreateDayCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterCreateDayCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new EnterCreateDayCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/EnterDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.EnterDayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterDayParser implements Parser\u003cEnterDayCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterDayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterDayCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterDayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 21,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/EnterEditDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.EnterEditDayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterEditDayParser implements Parser\u003cEnterEditDayCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterEditDayCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterEditDayCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterEditDayCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 20,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/edit/CancelEditDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.CancelEditDayCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class CancelEditDayParser implements Parser\u003cCancelEditDayCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CancelEditDayCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CancelEditDayCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/edit/DoneEditDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.DoneEditDayCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DoneEditDayParser implements Parser\u003cDoneEditDayCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DoneEditDayCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new DoneEditDayCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/edit/EditDayCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public enum EditDayCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    CANCEL"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 7,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/edit/EditDayFieldParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.EditDayFieldCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.itinerary.ItineraryParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EditDayFieldParser implements Parser\u003cEditDayFieldCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditDayFieldCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * and returns an EditDayFieldCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EditDayFieldCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_DATE_START,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_DATE_END,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_BUDGET,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_LOCATION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_INDEX,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_DESCRIPTION);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "            index \u003d Optional.ofNullable(ParserUtil.parseIndex(argMultimap.getPreamble()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "            index \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "            //throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            //        EditTripFieldCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!index.isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "            //edit by field specified by index only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new UnsupportedOperationException(\"Parsing edit day by index not yet supported.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //edit by prefixes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditDayFieldCommand.EditDayDescriptor editDayDescriptor \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "                new EditDayFieldCommand.EditDayDescriptor();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "            editDayDescriptor.setName(ItineraryParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_START).isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "            editDayDescriptor.setStartDate("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    ParserDateUtil.getDateFromString(argMultimap.getValue(PREFIX_DATE_START).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_END).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "            editDayDescriptor.setEndDate("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    ParserDateUtil.getDateFromString(argMultimap.getValue(PREFIX_DATE_END).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editDayDescriptor.setBudget("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ItineraryParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editDayDescriptor.setDestination("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ItineraryParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editDayDescriptor.setDescription("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ItineraryParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!editDayDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(EditDayFieldCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new EditDayFieldCommand(editDayDescriptor);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 72,
      "ang-zeyu": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/edit/EditDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.CancelEditDayCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.DoneEditDayCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.EditDayFieldCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EditDayParser implements PageParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EditDayFieldCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + DoneEditDayCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + CancelEditDayCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditDayCommand commandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            commandType \u003d EditDayCommand.valueOf(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EditDayFieldParser().parse(arguments);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new DoneEditDayParser().parse(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case CANCEL:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CancelEditDayParser().parse(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 37,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/DeleteEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DeleteEventParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Placeholder."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param args placeholder."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new DeleteEventCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 20,
      "ang-zeyu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/EnterCreateEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.EnterCreateEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterCreateEventParser implements Parser\u003cEnterCreateEventCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterCreateEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new EnterCreateEventCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/EnterEditEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.EnterEditEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterEditEventParser implements Parser\u003cEnterEditEventCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterEditEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterEditEventCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterEditEventCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 20,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/EventManagerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public enum EventManagerCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    CREATE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    DELETE"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 7,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/EventViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public enum EventViewCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    CREATE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    HOME,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    DAYS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ITINERARY"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 10,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/EventViewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.DeleteEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.EnterCreateEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.EnterEditEventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterDayPageCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterItineraryPageCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterTripManagerCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterDayPageParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterItineraryPageParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterTripManagerParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EventViewParser implements PageParser {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterCreateEventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + DeleteEventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterEditEventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterTripManagerCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterDayPageCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterItineraryPageCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EventViewCommand commandType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "            commandType \u003d EventViewCommand.valueOf(command);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case CREATE:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterCreateEventParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new DeleteEventParser().parse(arguments);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterEditEventParser().parse(arguments);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case HOME:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterTripManagerParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case DAYS:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterDayPageParser().parse(arguments);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case ITINERARY:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterItineraryPageParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 40,
      "ang-zeyu": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/edit/CancelEditEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.CancelEditEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class CancelEditEventParser implements Parser\u003cCancelEditEventCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public CancelEditEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new CancelEditEventCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/edit/DoneEditEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.DoneEditEventCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DoneEditEventParser implements Parser\u003cDoneEditEventCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DoneEditEventCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new DoneEditEventCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/edit/EditEventCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public enum EditEventCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    CANCEL"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 7,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/edit/EditEventFieldParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BOOKING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INVENTORY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.EditEventFieldCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.itinerary.ItineraryParserUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EditEventFieldParser implements Parser\u003cEditEventFieldCommand\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditEventFieldCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * and returns an EditEventFieldCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EditEventFieldCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_DATE_START,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_DATE_END,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_BUDGET,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_LOCATION,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_INDEX,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_BOOKING,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        PREFIX_INVENTORY);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "            index \u003d Optional.ofNullable(ParserUtil.parseIndex(argMultimap.getPreamble()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "            index \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            //throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "            //        EditTripFieldCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!index.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "            //edit by field specified by index only"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new UnsupportedOperationException(\"Parsing edit event by index not yet supported.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //edit by prefixes"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditEventFieldCommand.EditEventDescriptor editEventDescriptor \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "                new EditEventFieldCommand.EditEventDescriptor();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "            editEventDescriptor.setName(ItineraryParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_START).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "            editEventDescriptor.setStartDate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    ParserDateUtil.getDateFromString(argMultimap.getValue(PREFIX_DATE_START).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_END).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "            editEventDescriptor.setEndDate("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    ParserDateUtil.getDateFromString(argMultimap.getValue(PREFIX_DATE_END).get()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "            editEventDescriptor.setBudget(ItineraryParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editEventDescriptor.setDestination("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ItineraryParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if(argMultimap.getValue(PREFIX_BOOKING).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editEventDescriptor.setBooking(ItineraryParserUtil.parseBooking());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_INVENTORY).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editEventDescriptor.setInventory(ItineraryParserUtil.parseInventory());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!editEventDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(EditEventFieldCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new EditEventFieldCommand(editEventDescriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 71,
      "ang-zeyu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/edit/EditEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.CancelEditEventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.DoneEditEventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.EditEventFieldCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EditEventParser implements PageParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EditEventFieldCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + DoneEditEventCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + CancelEditEventCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EditEventCommand commandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            commandType \u003d EditEventCommand.valueOf(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EditEventFieldParser().parse(arguments);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new DoneEditEventParser().parse(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case CANCEL:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new CancelEditEventParser().parse(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 37,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/overallview/ItineraryViewCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.overallview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Enumeration of commands belonging to the itinerary view."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public enum ItineraryViewCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    HOME,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    DAYS,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ITINERARY,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    GOTO"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 8,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/overallview/ItineraryViewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.itinerary.overallview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterDayPageCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterItineraryPageCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterTripManagerCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.itinerary.dayview.EnterDayParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterDayPageParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterItineraryPageParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.sidebar.EnterTripManagerParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the commands related to the itinerary view page."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class ItineraryViewParser implements PageParser {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterTripManagerCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterDayPageCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "            + EnterItineraryPageCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ItineraryViewCommand commandType;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "            commandType \u003d ItineraryViewCommand.valueOf(command);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case HOME:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterTripManagerParser().parse(arguments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case DAYS:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterDayPageParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case ITINERARY:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterItineraryPageParser().parse(arguments);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case GOTO:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new EnterDayParser().parse(arguments);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 41,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/preferences/CancelEditPrefsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.CancelEditPrefsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments into a {@code CancelEditPrefsCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CancelEditPrefsParser implements Parser\u003cCancelEditPrefsCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CancelEditPrefsCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CancelEditPrefsCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/preferences/DoneEditPrefsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.DoneEditPrefsCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments into a {@code DoneEditPrefsCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DoneEditPrefsParser implements Parser\u003cDoneEditPrefsCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoneEditPrefsCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new DoneEditPrefsCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/preferences/EditPrefsFieldParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_NOT_EXISTING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PATH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_DATA_FILE_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_GUI_LOCK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_HEIGHT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_WIDTH;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_XPOS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_YPOS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand.EditPrefsDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code EditPrefsFieldCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditPrefsFieldParser implements Parser\u003cEditPrefsFieldCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditPrefsFieldCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditPrefsFieldCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_WINDOW_HEIGHT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_WINDOW_WIDTH,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_WINDOW_XPOS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_WINDOW_YPOS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_DATA_FILE_PATH,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_GUI_LOCK);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            index \u003d Optional.ofNullable(ParserUtil.parseIndex(argMultimap.getPreamble()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            index \u003d Optional.empty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //        EditTripFieldCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!index.isEmpty()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //edit by field specified by index only"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new UnsupportedOperationException(\"Parsing edit trip by index not yet supported.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //edit by prefixes"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditPrefsDescriptor editPrefsDescriptor \u003d new EditPrefsDescriptor();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setPrefsDescriptor(argMultimap, editPrefsDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!editPrefsDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(EditPrefsFieldCommand.MESSAGE_NOT_EDITED"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + EditPrefsFieldCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new EditPrefsFieldCommand(editPrefsDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void setPrefsDescriptor(ArgumentMultimap argMultimap, EditPrefsDescriptor editPrefsDescriptor)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            argMultimap.getValue(PREFIX_WINDOW_HEIGHT)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .ifPresent(height -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        double heightVal \u003d Double.parseDouble(height);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        if (heightVal \u003c\u003d 0) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            throw new NumberFormatException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        editPrefsDescriptor.setWindowHeight(heightVal);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            argMultimap.getValue(PREFIX_WINDOW_WIDTH)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .ifPresent(width -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        double widthVal \u003d Double.parseDouble(width);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        if (widthVal \u003c\u003d 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            throw new NumberFormatException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        editPrefsDescriptor.setWindowWidth(widthVal);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            argMultimap.getValue(PREFIX_WINDOW_XPOS)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .ifPresent(xPos -\u003e editPrefsDescriptor.setWindowXPos(Integer.parseInt(xPos)));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            argMultimap.getValue(PREFIX_WINDOW_YPOS)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .ifPresent(yPos -\u003e editPrefsDescriptor.setWindowYPos(Integer.parseInt(yPos)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (argMultimap.getValue(PREFIX_GUI_LOCK).isPresent()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                editPrefsDescriptor.setGuiLocked("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        ParserUtil.parseBool(argMultimap.getValue(PREFIX_GUI_LOCK).get()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (NumberFormatException | ParseException ex) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditPrefsFieldCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATA_FILE_PATH).isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Path p \u003d Paths.get(argMultimap.getValue(PREFIX_DATA_FILE_PATH).get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                if (!Files.exists(p)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    throw new ParseException(MESSAGE_FILE_NOT_EXISTING);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (InvalidPathException ex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_PATH);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/preferences/PreferencesCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Enumeration of the commands related to the preferences page."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum PreferencesCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    CANCEL,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DONE"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/preferences/PreferencesParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.CancelEditPrefsCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.DoneEditPrefsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses commands related to the preferences page."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class PreferencesParser implements PageParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EditPrefsFieldCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + DoneEditPrefsCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + CancelEditPrefsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        PreferencesCommand commandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            commandType \u003d PreferencesCommand.valueOf(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EditPrefsFieldParser().parse(arguments);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case CANCEL:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CancelEditPrefsParser().parse(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DoneEditPrefsParser().parse(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/preferences/PrefsCliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to preferences page commands"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class PrefsCliSyntax {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_WINDOW_HEIGHT \u003d new Prefix(\"wh/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_WINDOW_WIDTH \u003d new Prefix(\"ww/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_WINDOW_XPOS \u003d new Prefix(\"wx/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_WINDOW_YPOS \u003d new Prefix(\"wy/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_DATA_FILE_PATH \u003d new Prefix(\"fp/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_GUI_LOCK \u003d new Prefix(\"lg/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sidebar/EnterDayPageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterDayPageCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code EnterDayPageCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterDayPageParser implements Parser\u003cEnterDayPageCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterDayPageCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new EnterDayPageCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sidebar/EnterItineraryPageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterItineraryPageCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code EnterItineraryPageCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterItineraryPageParser implements Parser\u003cEnterItineraryPageCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterItineraryPageCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new EnterItineraryPageCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/sidebar/EnterTripManagerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.logic.parser.sidebar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterTripManagerCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code EnterTripManagerCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EnterTripManagerParser implements Parser\u003cEnterTripManagerCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EnterTripManagerCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new EnterTripManagerCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/DeleteTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.DeleteTripCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code DeleteTripCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DeleteTripParser implements Parser\u003cDeleteTripCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DeleteTripCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DeleteTripCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTripCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/EnterCreateTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterCreateTripCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code EnterCreateTripCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterCreateTripParser implements Parser\u003cEnterCreateTripCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterCreateTripCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new EnterCreateTripCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/EnterEditTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterEditTripCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code EnterEditTripCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterEditTripParser implements Parser\u003cEnterEditTripCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterEditTripCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterEditTripCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterEditTripCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/EnterTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterTripCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code EnterTripCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterTripParser implements Parser\u003cEnterTripCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterTripCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterTripCommand(index);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterTripCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/TripManagerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Enumeration of the commands related to the trip manager page."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum TripManagerCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    CREATE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    GOTO,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DELETE"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/TripManagerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.DeleteTripCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterCreateTripCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterEditTripCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterTripCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses commands related to the trip manager page."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripManagerParser implements PageParser {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EnterCreateTripCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + DeleteTripCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EnterTripCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EnterEditTripCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripManagerCommand commandType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            commandType \u003d TripManagerCommand.valueOf(command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case CREATE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterCreateTripParser().parse(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DeleteTripParser().parse(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case GOTO:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterTripParser().parse(arguments);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterEditTripParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/TripParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Collection of methods for parsing trip\u0027s abstractions."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class TripParserUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the given {@code Location} is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses a {@code String budget} into a {@code Expenditure}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the given {@code Expenditure} is invalid."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Expenditure parseBudget(String budget) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String trimmedName \u003d budget.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!Expenditure.isValidExpenditure(trimmedName)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ParseException(Expenditure.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Expenditure(trimmedName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 2,
      "ang-zeyu": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/CancelEditTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.CancelEditTripCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code CancelEditTripCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CancelEditTripParser implements Parser\u003cCancelEditTripCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CancelEditTripCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CancelEditTripCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/DoneEditTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.DoneEditTripCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code DoneEditTripCommand}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DoneEditTripParser implements Parser\u003cDoneEditTripCommand\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoneEditTripCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new DoneEditTripCommand();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/EditTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Enumeration of the commands related to the edit trip page."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum EditTripCommand {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    CANCEL"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/EditTripFieldParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.trips.TripParserUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses the arguments to return a {@code EditTripFieldCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditTripFieldParser implements Parser\u003cEditTripFieldCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTripFieldCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and returns an EditTripFieldCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditTripFieldCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_DATE_START,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_DATE_END,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_BUDGET,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_LOCATION,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            index \u003d Optional.ofNullable(ParserUtil.parseIndex(argMultimap.getPreamble()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            index \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //        EditTripFieldCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!index.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //edit by field specified by index only"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new UnsupportedOperationException(\"Parsing edit trip by index not yet supported.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //edit by prefixes"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand.EditTripDescriptor editTripDescriptor \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new EditTripFieldCommand.EditTripDescriptor();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setName(TripParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_START).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setStartDate("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ParserDateUtil.getDateFromString(argMultimap.getValue(PREFIX_DATE_START).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_END).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setEndDate("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ParserDateUtil.getDateFromString(argMultimap.getValue(PREFIX_DATE_END).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setBudget(TripParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setDestination("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TripParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!editTripDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(EditTripFieldCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new EditTripFieldCommand(editTripDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/EditTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.CancelEditTripCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.DoneEditTripCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * The page parser for parsing the edit trip page commands."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditTripParser implements PageParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EditTripFieldCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + DoneEditTripCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + CancelEditTripCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripCommand commandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            commandType \u003d EditTripCommand.valueOf(command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EditTripFieldParser().parse(arguments);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DoneEditTripParser().parse(arguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case CANCEL:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CancelEditTripParser().parse(arguments);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Path getTravelPalFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void setTravelPalFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Replaces address book data with the data in {@code travelPal}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void setTravelPal(ReadOnlyTravelPal travelPal);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** Returns the TravelPal */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ReadOnlyTravelPal getTravelPal();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Sets {@link PageStatus} with an edited version."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param editedPageStatus Edited version of {@link PageStatus}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void setPageStatus(PageStatus editedPageStatus);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns {@link PageStatus} in TravelPal."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @return {@link PageStatus} of TravelPal"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "    PageStatus getPageStatus();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Adds a {@link Trip} to TravelPal."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param trip {@link Trip} to be added"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws ClashingTripException Thrown when {@link Trip} with overlapping duration is added."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void addTrip(Trip trip) throws ClashingTripException;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Replaces an existing {@link Trip} with another."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param target {@link Trip} set for replacement"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param replacement Replacement {@link Trip}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws ClashingTripException Thrown when {@link Trip} with overlapping duration is set"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws TripNotFoundException Thrown when {@code target} cannot be found"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setTrip(Trip target, Trip replacement) throws ClashingTripException, TripNotFoundException;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Deletes an existing {@link Trip}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param target {@link Trip} set for deletion"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws TripNotFoundException Thrown when {@code target} cannot be found"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void deleteTrip(Trip target) throws TripNotFoundException;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** Returns an unmodifiable view of the filtered trip list */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "    FilteredList\u003cTrip\u003e getFilteredTripList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 44,
      "-": 81,
      "ang-zeyu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageStatus;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final TravelPal travelPal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final FilteredList\u003cTrip\u003e filteredTripList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private PageStatus pageStatus;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Initializes a ModelManager with the given travelPal and userPrefs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ModelManager(ReadOnlyTravelPal addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.travelPal \u003d new TravelPal(addressBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.pageStatus \u003d new PageStatus(PageType.TRIP_MANAGER, null, null, null, null, null, null, null);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.travelPal.getPersonList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        filteredTripList \u003d new FilteredList\u003c\u003e(this.travelPal.getTripList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this(new TravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Path getTravelPalFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return userPrefs.getTravelPalFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTravelPalFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userPrefs.setTravelPalFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelPal \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTravelPal(ReadOnlyTravelPal travelPal) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.travelPal.resetData(travelPal);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ReadOnlyTravelPal getTravelPal() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal.hasPerson(person);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.removePerson(target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.addPerson(person);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Trip List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public FilteredList\u003cTrip\u003e getFilteredTripList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return filteredTripList;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void addTrip(Trip trip) throws ClashingTripException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.addTrip(trip);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTrip(Trip target, Trip replacement) throws ClashingTripException, TripNotFoundException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(target, replacement);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.setTrip(target, replacement);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void deleteTrip(Trip target) throws TripNotFoundException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.deleteTrip(target);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PageStatus List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setPageStatus(PageStatus pageStatus) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(pageStatus);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.pageStatus \u003d pageStatus;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus getPageStatus() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return pageStatus;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal.equals(other.travelPal)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 filteredTripList.equals(other.filteredTripList);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 49,
      "-": 137,
      "ang-zeyu": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTravelPal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public interface ReadOnlyTravelPal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ObservableList\u003cTrip\u003e getTripList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "-": 16,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Path getTravelPalFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    boolean isGuiPrefsLocked();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TravelPal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.TripList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TravelPal implements ReadOnlyTravelPal {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final TripList tripList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        tripList \u003d new TripList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TravelPal() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Creates an TravelPal using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPal(ReadOnlyTravelPal toBeCopied) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTripList(List\u003cTrip\u003e trips) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.tripList.set(trips);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Resets the existing data of this {@code TravelPal} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void resetData(ReadOnlyTravelPal newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        setTripList(newData.getTripList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Removes {@code key} from this {@code TravelPal}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof TravelPal // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 persons.equals(((TravelPal) other).persons)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 tripList.equals(((TravelPal) other).tripList));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void addTrip(Trip trip) throws ClashingTripException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teoha"
        },
        "content": "        tripList.add(trip);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setTrip(Trip target, Trip replacement) throws ClashingTripException, TripNotFoundException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripList.set(target, replacement);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void deleteTrip(Trip trip) throws TripNotFoundException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teoha"
        },
        "content": "        tripList.remove(trip);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Convenience wrapper for checking whether the specified trip exists."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param trip The trip instance to check."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Boolean of whether the trip exists."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean hasTrip(Trip trip) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return tripList.contains(trip);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return ObservableList of the trip list in the application."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ObservableList\u003cTrip\u003e getTripList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return tripList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 32,
      "-": 110,
      "ang-zeyu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private boolean isGuiLocked;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Path travelPalFilePath \u003d Paths.get(\"data\" , \"travelpal.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setTravelPalFilePath(newUserPrefs.getTravelPalFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setGuiPrefsLocked(newUserPrefs.isGuiPrefsLocked());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean isGuiPrefsLocked() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return isGuiLocked;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setGuiPrefsLocked(boolean doLock) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        isGuiLocked \u003d doLock;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Path getTravelPalFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return travelPalFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setTravelPalFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.travelPalFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 travelPalFilePath.equals(o.travelPalFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return Objects.hash(guiSettings, travelPalFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        sb.append(\" | Is gui settings locked: \" + isGuiLocked);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + travelPalFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "ang-zeyu": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appstatus/PageStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.appstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.EditDayFieldCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.EditEventFieldCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand.EditPrefsDescriptor;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand.EditTripDescriptor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of the page context of the TravelPal application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class PageStatus {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final PageType pageType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Trip trip;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Event event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final EditTripDescriptor editTripDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final EditPrefsDescriptor editPrefsDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final EditDayFieldCommand.EditDayDescriptor editDayDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final EditEventFieldCommand.EditEventDescriptor editEventDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus(PageType pageType, Trip trip, Day day,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                      Event event, EditTripDescriptor editTripDescriptor, EditPrefsDescriptor editPrefsDescriptor,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                      EditDayFieldCommand.EditDayDescriptor editDayDescriptor,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                      EditEventFieldCommand.EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.pageType \u003d pageType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.editTripDescriptor \u003d editTripDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.editPrefsDescriptor \u003d editPrefsDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.editDayDescriptor \u003d editDayDescriptor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.editEventDescriptor \u003d editEventDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Immutable chained constructor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param pageType page type to use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The new PageStatus instance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewPageType(PageType pageType) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(pageType, getTrip(), getDay(), getEvent(), getEditTripDescriptor(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getEditPrefsDescriptor(), getEditDayDescriptor(), getEditEventDescriptor());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Immutable chained constructor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param trip trip to use."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The new PageStatus instance."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewTrip(Trip trip) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), trip, getDay(), getEvent(), getEditTripDescriptor(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getEditPrefsDescriptor(), getEditDayDescriptor(), getEditEventDescriptor());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Immutable chained constructor."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param day day to use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The new PageStatus instance."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewDay(Day day) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), getTrip(), day, getEvent(), getEditTripDescriptor(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getEditPrefsDescriptor(), getEditDayDescriptor(), getEditEventDescriptor());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Immutable chained constructor."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param event event to use."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The new PageStatus instance."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withNewEvent(Event event) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), getTrip(), getDay(), event, getEditTripDescriptor(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getEditPrefsDescriptor(), getEditDayDescriptor(), getEditEventDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withResetTrip() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return withNewTrip(null);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withResetDay() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return withNewDay(null);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withResetEvent() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return withNewEvent(null);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Immutable chained constructor."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param editTripDescriptor editTripDescriptor to use."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The new PageStatus instance."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewEditTripDescriptor(EditTripDescriptor editTripDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), getTrip(), getDay(), getEvent(), editTripDescriptor,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getEditPrefsDescriptor(), getEditDayDescriptor(), getEditEventDescriptor());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Immutable chained constructor."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param editPrefsDescriptor editPrefsDescriptor to use."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The new PageStatus instance."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewEditPrefsDescriptor(EditPrefsDescriptor editPrefsDescriptor) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), getTrip(), getDay(), getEvent(), getEditTripDescriptor(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                editPrefsDescriptor, getEditDayDescriptor(), getEditEventDescriptor());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Immutable chained constructor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param editDayDescriptor editDayDescriptor to use."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The new PageStatus instance."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withNewEditDayDescriptor(EditDayFieldCommand.EditDayDescriptor editDayDescriptor) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), getTrip(), getDay(), getEvent(), getEditTripDescriptor(),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getEditPrefsDescriptor(), editDayDescriptor, getEditEventDescriptor());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Immutable chained constructor."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param editEventDescriptor editEventDescriptor to use."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The new PageStatus instance."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withNewEditEventDescriptor(EditEventFieldCommand.EditEventDescriptor editEventDescriptor) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), getTrip(), getDay(), getEvent(), getEditTripDescriptor(),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                getEditPrefsDescriptor(), getEditDayDescriptor(), editEventDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withResetEditTripDescriptor() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return withNewEditTripDescriptor(null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withResetEditPrefsDescriptor() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return withNewEditPrefsDescriptor(null);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withResetEditDayDescriptor() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return withNewEditDayDescriptor(null);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus withResetEditEventDescriptor() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return withNewEditEventDescriptor(null);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return trip;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Event getEvent() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return event;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditTripDescriptor getEditTripDescriptor() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return editTripDescriptor;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EditDayFieldCommand.EditDayDescriptor getEditDayDescriptor() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return editDayDescriptor;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EditEventFieldCommand.EditEventDescriptor getEditEventDescriptor() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return editEventDescriptor;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditPrefsDescriptor getEditPrefsDescriptor() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return editPrefsDescriptor;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 78,
      "ang-zeyu": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appstatus/PageType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.appstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * The available page types in the TravelPal application."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum PageType {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    PREFERENCES,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TRIP_MANAGER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    BOOKINGS,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DIARY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    CONTACTS_MANAGER,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EXPENSE_MANAGER,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    PRETRIP_INVENTORY,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ITINERARY,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EVENT_PAGE,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    OVERALL_VIEW,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ADD_TRIP,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ADD_DAY,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ADD_EVENT"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Accomodation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Accomodation extends Booking{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Activities.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Activities extends Booking {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Booking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public abstract class Booking {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 5,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class BookingList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //implements Iterable\u003cBooking\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/RestaurantBooking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class RestaurantBooking extends Booking {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Travel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Travel extends Booking {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateEntityExcpetion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DuplicateEntityExcpetion {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/Inventory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Inventory {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Inventory(Name name) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 13,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/InventoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class InventoryList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 5,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Placeholder javadoc."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 54,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ConsecutiveOccurrenceList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Represents a list of consecutive, non clashing occurrences (trips/events/days)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Todo, make list consecutive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": " * @param \u003cT\u003e Type of occurrence"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "public abstract class ConsecutiveOccurrenceList\u003cT\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if the list contains an equivalent occurrence as the given argument."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public abstract boolean contains(T toCheck);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if the list contains"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param toCheck"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public abstract boolean containsClashing(T toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void add(T toAdd) throws ClashingTripException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void set(T target, T edited) throws TripNotFoundException, ClashingTripException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void set(ConsecutiveOccurrenceList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void set(List\u003cT\u003e entities);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void remove(T toRemove) throws TripNotFoundException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Removes the item at the specified index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param index The index of the item to remove."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void remove(Index index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof ConsecutiveOccurrenceList // instanceof handles nulls"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 internalList.equals(((ConsecutiveOccurrenceList) other).internalList));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public abstract boolean areConsecutive(List\u003cT\u003e persons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if {@code trips} contains only unique trips."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param occurrence"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public abstract boolean areUnique(List\u003cT\u003e occurrence);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 88,
      "ang-zeyu": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Generic abstraction of a description for various abstractions."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 51,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Expenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Generic abstraction of expenditure."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Expenditure {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Expenditure can take any positive numerical value with\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \" no more than 2 decimal places, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[+]?[0-9]+([.][0-9]{1,2})?$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final Double value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs an {@code Expenditure}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param value A valid expenditure."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Expenditure(String value) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidExpenditure(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.value \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Expenditure(double value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.value \u003d (double) Math.round(value * 100) / 100;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid expenditure."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidExpenditure(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidExpenditure(double test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Expenditure // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 value.equals(((Expenditure) other).value)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 61,
      "ang-zeyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Generic abstraction of a location."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param location A valid address."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 52,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Generic Name abstraction."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 54,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/Day.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Description;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.EventList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Represents a Day in TravelPal."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Compulsory fields: name, startDate, endDate, destination, eventList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Optional fields: totalBudget, description."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Compulsory Fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final LocalDateTime endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Location destination;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final EventList eventList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Optional Fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Expenditure totalBudget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** Constructs a Day */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Day(Name name, LocalDateTime startDate, LocalDateTime endDate, Description description,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               Location destination, Expenditure totalBudget, EventList eventList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** Constructs a day with optional fields */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Day (Name name, LocalDateTime startDate, LocalDateTime endDate, Optional\u003cDescription\u003e description,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Location destination, Optional\u003cExpenditure\u003e totalBudget, EventList eventList) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.description \u003d description.isPresent() ? description.get() : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget.isPresent() ? totalBudget.get() : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Compulsory Field getters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventList getEventList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return eventList;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Location getDestination() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return destination;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Optional field getters"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return Optional.of(description);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cExpenditure\u003e getTotalBudget() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return Optional.of(totalBudget);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Soft check of whether the days clash."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param otherDay The other day to check."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Boolean of whether the days clash."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isSameDay(Day otherDay) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (otherDay \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return otherDay.getName().equals(getName())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 otherDay.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 otherDay.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 otherDay.getDestination().equals(getDestination());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!(other instanceof Day)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Day otherDay \u003d (Day) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return otherDay.getName().equals(getName())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherDay.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherDay.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherDay.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherDay.getDestination().equals(getDestination())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherDay.getEventList().equals(getEventList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks whether this day clashes with another."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param other The other day instance to check."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Boolean of whether the days clash."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isClashingWith(Day other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return (this.getStartDate().compareTo(other.getStartDate()) \u003e\u003d 0"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 this.getStartDate().compareTo(other.getEndDate()) \u003c\u003d 0)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (this.getEndDate().compareTo(other.getStartDate()) \u003e\u003d 0"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 this.getEndDate().compareTo(other.getEndDate()) \u003c\u003d 0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 115,
      "ang-zeyu": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/DayList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.ConsecutiveOccurrenceList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.day.exceptions.ClashingDayException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.day.exceptions.DayNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * List holding {@code Day}s."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DayList extends ConsecutiveOccurrenceList\u003cDay\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean contains(Day toCheck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean containsClashing(Day toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isClashingWith);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void add(Day toAdd) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (containsClashing(toAdd)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingDayException();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(Day targetDay, Day editedDay) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(targetDay, editedDay);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        int index \u003d internalList.indexOf(targetDay);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!targetDay.isClashingWith(editedDay) \u0026\u0026 contains(editedDay)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingDayException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.set(index, editedDay);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(List\u003cDay\u003e occurrences) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(occurrences);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!areConsecutive(occurrences)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingDayException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(occurrences);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void remove(Day toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean areConsecutive(List\u003cDay\u003e occurrences) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (int i \u003d 0; i \u003c occurrences.size() - 1; i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "            for (int j \u003d i + 1; j \u003c occurrences.size(); j++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "                if (occurrences.get(i).isClashingWith(occurrences.get(j))) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean areUnique(List\u003cDay\u003e occurrence) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (int i \u003d 0; i \u003c occurrence.size() - 1; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "            for (int j \u003d i + 1; j \u003c occurrence.size(); j++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "                if (occurrence.get(i).isSameDay(occurrence.get(j))) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 73,
      "ang-zeyu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/exceptions/ClashingDayException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when {@code Day}s clash."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class ClashingDayException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/exceptions/CompulsoryFieldEmptyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when a field is left empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Probably unneeded."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class CompulsoryFieldEmptyException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/exceptions/DayNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when a day is not found in an operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DayNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/event/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Represents a Event in TravelPal."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Compulsory fields: name, startDate, endDate, destination."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Optional fields: totalBudget, booking, inventory."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Compulsory fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final LocalDateTime endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Location destination;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Optional fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Inventory inventory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Expenditure totalBudget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Booking booking;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs an {@code Event}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Event(Name name, LocalDateTime startDate, LocalDateTime endDate, Booking booking,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                 Expenditure totalBudget, Inventory inventory, Location destination) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(name, startDate, endDate, booking, totalBudget, inventory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.booking \u003d booking;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // temporary constructor until we implement booking and inventory, accepts null for now"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Event(Name name, LocalDateTime startDate, LocalDateTime endDate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                 Expenditure totalBudget, Location destination) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(name, startDate, endDate, totalBudget);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.booking \u003d null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.inventory \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a trip with optional totalBudget field."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Event(Name name, LocalDateTime startDate, LocalDateTime endDate,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                 Optional\u003cExpenditure\u003e totalBudget, Location destination) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(name, startDate, endDate, totalBudget);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.booking \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (totalBudget.isPresent()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d totalBudget.get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.inventory \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Compulsory Field getters"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Location getDestination() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return destination;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Optional field getters"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cExpenditure\u003e getTotalBudget() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return Optional.ofNullable(totalBudget);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cInventory\u003e getInventory() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return Optional.ofNullable(inventory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cBooking\u003e getBooking() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return Optional.ofNullable(booking);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if both {@link Event} contain the same booking and their endDate and startDate time are the same."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isSameEvent(Event otherEvent) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherEvent.getBooking().equals(getBooking())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 (otherEvent.getEndDate().equals(getEndDate()) || otherEvent.getStartDate().equals(getStartDate()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks whether this event is clashing with another."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param other The other event to check."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Boolean of whether the events clash."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isClashingWith(Event other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return (this.getStartDate().compareTo(other.getStartDate()) \u003e\u003d 0"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 this.getStartDate().compareTo(other.getEndDate()) \u003c\u003d 0)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (this.getEndDate().compareTo(other.getStartDate()) \u003e\u003d 0"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 this.getEndDate().compareTo(other.getEndDate()) \u003c\u003d 0);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 119,
      "ang-zeyu": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/event/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.ConsecutiveOccurrenceList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.event.exceptions.ClashingEventException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.event.exceptions.EventNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * List containing {@code Event}s."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EventList extends ConsecutiveOccurrenceList\u003cEvent\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean contains(Event toCheck) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean containsClashing(Event toCheck) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameEvent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void add(Event toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (containsClashing(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingEventException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(Event target, Event edited) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!target.isClashingWith(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingEventException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(List\u003cEvent\u003e occurrences) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(occurrences);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!areConsecutive(occurrences)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingEventException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(occurrences);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void remove(Event toRemove) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new EventNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean areConsecutive(List\u003cEvent\u003e occurrences) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (int i \u003d 0; i \u003c occurrences.size() - 1; i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "            for (int j \u003d i + 1; j \u003c occurrences.size(); j++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "                if (occurrences.get(i).isClashingWith(occurrences.get(j))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean areUnique(List\u003cEvent\u003e occurrence) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (int i \u003d 0; i \u003c occurrence.size() - 1; i++) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "            for (int j \u003d i + 1; j \u003c occurrence.size(); j++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "                if (occurrence.get(i).isSameEvent(occurrence.get(j))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 78,
      "ang-zeyu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/event/exceptions/ClashingEventException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when an event clashes with another."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class ClashingEventException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/event/exceptions/CompulsoryFieldEmptyException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when a compulsory field is left empty."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Probably not needed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class CompulsoryFieldEmptyException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/event/exceptions/EventNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.event.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when an event is not found."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EventNotFoundException extends RuntimeException{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 67,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson(Person)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the person being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniquePersonList. However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 133,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/Trip.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Represents a Trip in TravelPal."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Compulsory fields: name, startDate, endDate, destination, dayList, totalBudget"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Trip {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // Compulsory Fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final LocalDateTime endDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final TripId tripId;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Location destination;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final DayList dayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Expenditure totalBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a trip."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Trip(Name name, LocalDateTime startDate, LocalDateTime endDate,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Location destination, Expenditure totalBudget, DayList dayList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.dayList \u003d dayList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.tripId \u003d new TripId();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //Compulsory field getters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TripId getTripId() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return tripId;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Location getDestination() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return destination;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayList getDayList() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return dayList;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Expenditure getBudget() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return totalBudget;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if both {@link Trip} contain the same booking and their to and from time are the same."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isSameTrip(Trip otherTrip) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (otherTrip \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return otherTrip !\u003d null"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 otherTrip.getName().equals(getName())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 otherTrip.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 otherTrip.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 otherTrip.getDestination().equals(getDestination());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!(other instanceof Trip)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Trip otherTrip \u003d (Trip) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return otherTrip.getName().equals(getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 otherTrip.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 otherTrip.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 otherTrip.getDestination().equals(getDestination())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherTrip.getDayList().equals(getDayList());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Checks whether this trip is clashing with {@code other}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param other The other trip instance to check."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return Boolean of whether the trip clashes."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isClashingWith(Trip other) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return (this.getStartDate().compareTo(other.getStartDate()) \u003e\u003d 0"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 this.getStartDate().compareTo(other.getEndDate()) \u003c\u003d 0)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (this.getEndDate().compareTo(other.getStartDate()) \u003e\u003d 0"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 this.getEndDate().compareTo(other.getEndDate()) \u003c\u003d 0);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(name.toString())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" From: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(ParserDateUtil.getDisplayTime(startDate))"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" To: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(ParserDateUtil.getDisplayTime(endDate))"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" Destination: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(destination.toString())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" Total Budget: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(totalBudget.toString());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 79,
      "ang-zeyu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/TripId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of an identification for Trip."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Currently unused."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TripId {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final UUID tripUuid;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TripId() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.tripUuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return tripUuid.hashCode();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!(other instanceof TripId)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return tripUuid.equals(((TripId) other).tripUuid);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/TripList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.ConsecutiveOccurrenceList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.exceptions.DuplicateTripException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a list containing trips, backed by ConsecutiveOccurenceList."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TripList extends ConsecutiveOccurrenceList\u003cTrip\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean contains(Trip toCheck) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTrip);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean containsClashing(Trip toCheck) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isClashingWith);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void add(Trip toAdd) throws ClashingTripException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new DuplicateTripException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (containsClashing(toAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ClashingTripException();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void set(Trip targetTrip, Trip editedTrip) throws TripNotFoundException, ClashingTripException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(targetTrip, editedTrip);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        int index \u003d internalList.indexOf(targetTrip);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new TripNotFoundException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!targetTrip.isSameTrip(editedTrip) \u0026\u0026 contains(editedTrip)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new DuplicateTripException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        internalList.remove(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (containsClashing(editedTrip)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            internalList.add(index, targetTrip);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingTripException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        internalList.add(index, editedTrip);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(ConsecutiveOccurrenceList\u003cTrip\u003e replacement) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(List\u003cTrip\u003e trips) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(trips);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!areUnique(trips)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new DuplicateTripException();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!areConsecutive(trips)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingTripException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(trips);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void remove(Trip toRemove) throws TripNotFoundException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new TripNotFoundException();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean areConsecutive(List\u003cTrip\u003e trips) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (int i \u003d 0; i \u003c trips.size() - 1; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "            for (int j \u003d i + 1; j \u003c trips.size(); j++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "                if (trips.get(i).isClashingWith(trips.get(j))) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean areUnique(List\u003cTrip\u003e occurrence) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (int i \u003d 0; i \u003c occurrence.size() - 1; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "            for (int j \u003d i + 1; j \u003c occurrence.size(); j++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "                if (occurrence.get(i).isSameTrip(occurrence.get(j))) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 85,
      "ang-zeyu": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/exceptions/ClashingTripException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when attempting an operation that results in clashing trips."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class ClashingTripException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/exceptions/DuplicateTripException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when attempting an operation that results in duplicate trips."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DuplicateTripException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/exceptions/TripNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Exception thrown when a trip is not found in an operation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripNotFoundException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 2,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Contains utility methods for populating {@code TravelPal} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static ReadOnlyTravelPal getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal sampleAb \u003d new TravelPal();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "-": 55,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.EventList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Jackson friendly version of {@code Day}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonAdaptedDay {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Day\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final LocalDateTime startTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final LocalDateTime endTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final String destination;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Optional\u003cDouble\u003e totalBudget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final List\u003cJsonAdaptedEvent\u003e eventList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code JsonAdaptedDay} with the given Day details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public JsonAdaptedDay(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"startTime\") LocalDateTime from,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"endTime\") LocalDateTime to,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"destination\") String destination,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"description\") Optional\u003cString\u003e description,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"totalBudget\") Optional\u003cDouble\u003e totalBudget,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"dayList\") List\u003cJsonAdaptedEvent\u003e eventList"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startTime \u003d from;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endTime \u003d to;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (eventList !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.eventList.addAll(eventList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts a given {@code Day} into this class for Jackson use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonAdaptedDay(Day source) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startTime \u003d source.getStartDate();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endTime \u003d source.getEndDate();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d source.getDestination().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (source.getDescription().isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.description \u003d Optional.of(source.getDescription().get().description);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.description \u003d Optional.empty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (source.getTotalBudget().isPresent()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d Optional.of(source.getTotalBudget().get().value);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d Optional.empty();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.eventList.addAll(source.getEventList()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .stream().map(JsonAdaptedEvent::new)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        );"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts this Jackson-friendly adapted day object into the model\u0027s {@code Day} object."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted day."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Day toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final List\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (JsonAdaptedEvent event : eventList) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "            events.add(event.toModelType());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Assumes validation done upon creation"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final LocalDateTime modelStartTime \u003d startTime;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Assumes validation done upon creation"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final LocalDateTime modelEndTime \u003d endTime;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (destination \u003d\u003d null) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Location.isValidLocation(destination)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Location modelDestination \u003d new Location(destination);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Optional\u003cDescription\u003e modelDescription;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (description.isPresent()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (!Description.isValidDescription(description.get())) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                throw new IllegalValueException("
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teoha"
        },
        "content": "            modelDescription \u003d Optional.of(new Description(description.get()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": "            modelDescription \u003d Optional.empty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //No check for TotalBudget (defaults endTime 0)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Optional\u003cExpenditure\u003e modelTotalBudget;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (totalBudget.isPresent()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teoha"
        },
        "content": "            modelTotalBudget \u003d Optional.of(new Expenditure(totalBudget.get()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teoha"
        },
        "content": "            modelTotalBudget \u003d Optional.empty();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EventList modelEventList \u003d new EventList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teoha"
        },
        "content": "        modelEventList.set(events);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Day(modelName, modelStartTime, modelEndTime, modelDescription,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                modelDestination, modelTotalBudget, modelEventList);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 139,
      "ang-zeyu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Jackson friendly version of {@code Event}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Event\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final LocalDateTime startTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final LocalDateTime endTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final String destination;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //private final Optional\u003cBooking\u003e booking;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Optional\u003cDouble\u003e totalBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //private final Optional\u003cInventory\u003e inventory;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code JsonAdaptedEvent} with the given event details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public JsonAdaptedEvent(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"startTime\") LocalDateTime from,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"endTime\") LocalDateTime to,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"destination\") String destination,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"totalBudget\") Optional\u003cDouble\u003e totalBudget"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //, @JsonProperty(\"booking\")Optional\u003cBooking\u003e booking,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    // @JsonProperty(\"inventory\")Optional\u003cInventory\u003e inventory"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startTime \u003d from;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endTime \u003d to;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts a given {@code Event} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonAdaptedEvent(Event source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startTime \u003d source.getStartDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endTime \u003d source.getEndDate();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d source.getDestination().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (source.getTotalBudget().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d Optional.of(source.getTotalBudget().get().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.totalBudget \u003d Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts this Jackson-friendly adapted event object into the model\u0027s {@code Event} object."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted event."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Event toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Assumes validation done upon creation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final LocalDateTime modelStartTime \u003d startTime;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, LocalDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Assumes validation done upon creation"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final LocalDateTime modelEndTime \u003d endTime;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (destination \u003d\u003d null) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Location.isValidLocation(destination)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Location modelDestination \u003d new Location(destination);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //No check for TotalBudget (defaults endTime 0)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Optional\u003cExpenditure\u003e modelTotalBudget;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (totalBudget.isPresent()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "            modelTotalBudget \u003d Optional.of(new Expenditure(totalBudget.get()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "            modelTotalBudget \u003d Optional.empty();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new Event(modelName, modelStartTime, modelEndTime, modelTotalBudget, modelDestination);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teoha": 104,
      "ang-zeyu": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTrip.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Jackson friendly version of {@code Trip}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonAdaptedTrip {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Trip\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final LocalDateTime endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final String destination;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Double totalBudget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final List\u003cJsonAdaptedDay\u003e dayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code JsonAdaptedTrip} with the given trip details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonAdaptedTrip("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"startDate\")LocalDateTime startDate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"endDate\") LocalDateTime endDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"destination\")String destination,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            @JsonProperty(\"totalBudget\") Double totalBudget,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"dayList\")List\u003cJsonAdaptedDay\u003e dayList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (dayList !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.dayList.addAll(dayList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts a given {@code Trip} into this class for Jackson use."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonAdaptedTrip(Trip source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.startDate \u003d source.getStartDate();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.endDate \u003d source.getEndDate();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.destination \u003d source.getDestination().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d source.getBudget().value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.dayList.addAll(source.getDayList()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .stream().map(JsonAdaptedDay::new)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts this Jackson-friendly adapted trip object into the model\u0027s {@code Trip} object."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted trip."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Trip toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final List\u003cDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (JsonAdaptedDay day : dayList) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "            days.add(day.toModelType());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Date\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final LocalDateTime modelStartDate \u003d startDate;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End Date\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final LocalDateTime modelEndDate \u003d endDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (destination \u003d\u003d null) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!Location.isValidLocation(destination)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Location modelDestination \u003d new Location(destination);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //No check for TotalBudget (defaults to 0)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Expenditure modelTotalBudget \u003d new Expenditure(totalBudget);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DayList modelDayList \u003d new DayList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "        modelDayList.set(days);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Trip(modelName, modelStartDate, modelEndDate,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                modelDestination, modelTotalBudget, modelDayList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 92,
      "ang-zeyu": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTravelPal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": " * An Immutable TravelPal that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "@JsonRootName(value \u003d \"travelpal\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "class JsonSerializableTravelPal {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRIP \u003d \"Trip list contains duplicate trip(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CLASHING_TRIP \u003d \"Trip list contains clashing trip\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final List\u003cJsonAdaptedTrip\u003e trips \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code JsonSerializableTravelPal} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public JsonSerializableTravelPal(@JsonProperty(\"trips\") List\u003cJsonAdaptedTrip\u003e trips) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.trips.addAll(trips);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts a given {@code ReadOnlyTravelPal} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTravelPal}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonSerializableTravelPal(ReadOnlyTravelPal source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        trips.addAll(source.getTripList().stream().map(JsonAdaptedTrip::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TravelPal} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal travelPal \u003d new TravelPal();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (JsonAdaptedTrip jsonAdaptedTrip : trips) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Trip trip \u003d jsonAdaptedTrip.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (travelPal.hasTrip(trip)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRIP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "                travelPal.addTrip(trip);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (ClashingTripException ex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_CLASHING_TRIP);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 25,
      "-": 35,
      "ang-zeyu": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTravelPalStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": " * A class to access TravelPal data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonTravelPalStorage implements TravelPalStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTravelPalStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonTravelPalStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cReadOnlyTravelPal\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cReadOnlyTravelPal\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Optional\u003cJsonSerializableTravelPal\u003e jsonSerializableTravelPal \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                filePath, JsonSerializableTravelPal.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!jsonSerializableTravelPal.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return Optional.of(jsonSerializableTravelPal.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void saveAddressBook(ReadOnlyTravelPal addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyTravelPal)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void saveAddressBook(ReadOnlyTravelPal addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTravelPal(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "-": 65,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public interface Storage extends TravelPalStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Optional\u003cReadOnlyTravelPal\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void saveAddressBook(ReadOnlyTravelPal addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Manages storage of TravelPal data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TravelPalStorage travelPalStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public StorageManager(TravelPalStorage travelPalStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.travelPalStorage \u003d travelPalStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelPal methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPalStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cReadOnlyTravelPal\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return readAddressBook(travelPalStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cReadOnlyTravelPal\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPalStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void saveAddressBook(ReadOnlyTravelPal addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        saveAddressBook(addressBook, travelPalStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void saveAddressBook(ReadOnlyTravelPal addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPalStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 15,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TravelPalStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Represents a storage for {@link TravelPal}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public interface TravelPalStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns TravelPal data as a {@link ReadOnlyTravelPal}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Optional\u003cReadOnlyTravelPal\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Optional\u003cReadOnlyTravelPal\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Saves the given {@link ReadOnlyTravelPal} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void saveAddressBook(ReadOnlyTravelPal addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyTravelPal)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void saveAddressBook(ReadOnlyTravelPal addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 11,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s1-cs2103t-t11-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"common/HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 100,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.animation.Interpolator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.beans.value.ChangeListener;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.CommandBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.ResultDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.StatusBarFooter;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.DaysPage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.EditDayPage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.EditEventPage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.EventsPage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.ItineraryPage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.Page;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.EditTripPage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.TripsPage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.utility.PreferencesPage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final int PAGE_TRANSITION_DURATION_MILLIS \u003d 500;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final double PAGE_TRANSITION_INITIAL_OPACITY \u003d 0.2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_PAGE_NOT_IMPLEMENTED \u003d \"Sorry! We haven\u0027t implemented the %1$s page!\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected Stage primaryStage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private CommandUpdater commandUpdater;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private StackPane contentPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setStageListeners();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void setStageListeners() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ChangeListener\u003cNumber\u003e guiChangeListener \u003d (observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (model.getUserPrefs().isGuiPrefsLocked()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                setWindowDefaultSize(model.getGuiSettings());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        };"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.widthProperty().addListener(guiChangeListener);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.heightProperty().addListener(guiChangeListener);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.xProperty().addListener(guiChangeListener);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.yProperty().addListener(guiChangeListener);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Fills the place holders of the MainWindow."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void fillInnerParts() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(model.getTravelPalFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void show() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setWindowDefaultSize(model.getGuiSettings());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        handleSwitch();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Executes the command and returns the {@code CommandResult}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (commandResult.doSwitchPage()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                handleSwitch();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            commandUpdater.executeUpdateCallback();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Executes the command and returns the {@code CommandResult}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult executeGuiCommand(String commandText) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return executeCommand(commandText);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //Save gui size on exit only if gui prefs are not locked."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!model.getUserPrefs().isGuiPrefsLocked()) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the {@code Page} type and attempts to switch the content in"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * {@code contentPlaceholder} with it."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * TODO"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleSwitch() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        PageType currentPageType \u003d model.getPageStatus().getPageType();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Page\u003c? extends Node\u003e newPage;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (currentPageType) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case TRIP_MANAGER:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newPage \u003d new TripsPage(this, logic, model);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ADD_TRIP:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newPage \u003d new EditTripPage(this, logic, model);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case PREFERENCES:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            newPage \u003d new PreferencesPage(this, logic, model);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "teoha"
        },
        "content": "            newPage \u003d new EditEventPage(this, logic, model);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "teoha"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case OVERALL_VIEW:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "teoha"
        },
        "content": "            newPage \u003d new DaysPage(this, logic, model);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "teoha"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case ADD_DAY:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "teoha"
        },
        "content": "            newPage \u003d new EditDayPage(this, logic, model);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teoha"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case EVENT_PAGE:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "teoha"
        },
        "content": "            newPage \u003d new EventsPage(this, logic, model);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "teoha"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "teoha"
        },
        "content": "        case ITINERARY:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teoha"
        },
        "content": "            newPage \u003d new ItineraryPage(this, logic, model);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teoha"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            resultDisplay.setFeedbackToUser("
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_PAGE_NOT_IMPLEMENTED, currentPageType.toString()));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switchContent(newPage);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.commandUpdater \u003d newPage::fillPage;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Switches the content in the {@code contentPlaceholder} {@code StackPane}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param page The {@code Page} to switch to."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void switchContent(Page\u003c? extends Node\u003e page) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setWindowDefaultSize(model.getGuiSettings());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Node pageNode \u003d page.getRoot();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //transition"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cNode\u003e currentChildren \u003d contentPlaceholder.getChildren();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        int numChildren \u003d currentChildren.size();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assert numChildren \u003d\u003d 0 || numChildren \u003d\u003d 1;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        pageNode.translateXProperty().set(contentPlaceholder.getWidth());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        pageNode.opacityProperty().set(PAGE_TRANSITION_INITIAL_OPACITY);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        contentPlaceholder.getChildren().add(pageNode);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Timeline timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        KeyValue yTranslateKv \u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new KeyValue(pageNode.translateXProperty(), 0, Interpolator.EASE_IN);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        KeyValue opacityKv \u003d"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new KeyValue(pageNode.opacityProperty(), 1.0, Interpolator.EASE_IN);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        KeyFrame keyFrame \u003d new KeyFrame("
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new Duration(PAGE_TRANSITION_DURATION_MILLIS), yTranslateKv, opacityKv);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        timeline.getKeyFrames().add(keyFrame);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (numChildren \u003d\u003d 1) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Node previousPage \u003d currentChildren.get(0);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            timeline.setOnFinished(event -\u003e currentChildren.remove(previousPage));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Functional interface for allowing custom operations to occur after a command is executed."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public interface CommandUpdater {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        void executeUpdateCallback();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //setAccelerator code from AB3 for opening help window"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 17,
      "-": 117,
      "arjunwangty": 5,
      "ang-zeyu": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.TripsPage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/dummytrip.jpeg\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public UiManager(Logic logic, Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            MainWindow mainWindow \u003d new MainWindow(primaryStage, logic, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            TripsPage initialPage \u003d new TripsPage(mainWindow, logic, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.show();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        showAlertDialogAndWait(primaryStage, type, title, headerText, contentText);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/LightTheme.css\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 76,
      "arjunwangty": 4,
      "ang-zeyu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/NavigationSidebarLeft.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterDayPageCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterTripManagerCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a vertical sidebar displayed on the left side."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class NavigationSidebarLeft extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"/components/SidebarLeft.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public NavigationSidebarLeft(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void handleEnterTripManager() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(EnterTripManagerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void handleEnterOverallView() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(EnterDayPageCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterBookingsManager() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterInventoryManager(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 32,
      "ang-zeyu": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/NavigationSidebarRight.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterItineraryPageCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a vertical sidebar displayed on the right side."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class NavigationSidebarRight extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"/components/SidebarRight.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public NavigationSidebarRight(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void handleEnterItinerary() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(EnterItineraryPageCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterContactsManager() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterExpenditureManager() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterDairy() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 25,
      "ang-zeyu": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TravelPal level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 71,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/CheckBoxFormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * A {@code FormItem} implemented using a checkbox control."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CheckBoxFormItem extends FormItem\u003cBoolean\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/forms/CheckBoxFormItem.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private CheckBox formCheckBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CheckBoxFormItem(String textFormItemName, Boolean initialValue, Consumer\u003cBoolean\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, executeChangeHandler);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemLabel.setText(textFormItemName);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formCheckBox.setSelected(initialValue);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CheckBoxFormItem(String textFormItemName, Consumer\u003cBoolean\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(textFormItemName, false, executeChangeHandler);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Boolean getValue() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return formCheckBox.isSelected();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setValue(Boolean value) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formCheckBox.setSelected(value);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * JavaFX handler to call when value of the form field changes."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleChange() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        executeChangeHandler.accept(getValue());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/DateFormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.DatePicker;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a form item allowing the user to choose a date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Backed by JavaFx\u0027s {@code DatePicker} control."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DateFormItem extends FormItem\u003cLocalDate\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/forms/DateFormItem.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DatePicker formDateField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DateFormItem(String textFormItemName, LocalDate initialDate, Consumer\u003cLocalDate\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, executeChangeHandler);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemLabel.setText(textFormItemName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDateField.setValue(initialDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DateFormItem(String textFormItemName, Consumer\u003cLocalDate\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(textFormItemName, null, executeChangeHandler);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return formDateField.getValue();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setValue(LocalDate value) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDateField.setValue(value);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * JavaFX handler to call when value of the form field changes."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleChange() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        executeChangeHandler.accept(getValue());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/DoubleFormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Spinner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.SpinnerValueFactory.DoubleSpinnerValueFactory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a double form item allowing the user to enter double."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Backed by JavaFX\u0027s {@code Spinner} control."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DoubleFormItem extends FormItem\u003cDouble\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/forms/DoubleFormItem.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final double DEFAULT_SPINNER_VALUE \u003d 0.0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final double MIN_SPINNER_VALUE \u003d 0.0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final double MAX_SPINNER_VALUE \u003d Double.MAX_VALUE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final double SPINNER_INCREMENT \u003d 0.5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Spinner\u003cDouble\u003e formDoubleSpinner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoubleFormItem(String textFormItemName, double initialValue, Consumer\u003cDouble\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, executeChangeHandler);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemLabel.setText(textFormItemName);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDoubleSpinner.setValueFactory("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new DoubleSpinnerValueFactory(MIN_SPINNER_VALUE, MAX_SPINNER_VALUE, SPINNER_INCREMENT));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDoubleSpinner.getValueFactory().setValue(initialValue);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Tie execute changeHandler to the value of the Spinner (for clicking up/down),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        and the textProperty of the underlying TextField supporting"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        the spinner (if user types the value manually)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDoubleSpinner.getEditor().textProperty().addListener((observableVal, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Double.parseDouble(newVal);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                formDoubleSpinner.commitValue();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                //valueProperty listener will run after this"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (NumberFormatException ex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                formDoubleSpinner.getEditor().setText(oldVal);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDoubleSpinner.valueProperty().addListener((observableVal, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (oldVal !\u003d newVal) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                executeChangeHandler.accept(getValue());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoubleFormItem(String textFormItemName, Consumer\u003cDouble\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(textFormItemName, DEFAULT_SPINNER_VALUE, executeChangeHandler);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Double getValue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return formDoubleSpinner.getValue();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setValue(Double value) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDoubleSpinner.getValueFactory().setValue(value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/FormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a javaFX form item, consisting of a label and a form control."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * It is backed by a SplitPane, with the label on the left and item on the right."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Supports setters and getters for changing the content of the form item."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Requires all implementing classes to set the executeChangeHandler, to be executed when"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * the value of the form field changes."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class FormItem\u003cT\u003e extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Form field change handler that receives the form field value of type {@code T}. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected Consumer\u003cT\u003e executeChangeHandler;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected Label formItemLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    FormItem(String fxml, Consumer\u003cT\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.executeChangeHandler \u003d executeChangeHandler;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the underlying value of the field."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return T value of the form item field."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract T getValue();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the underlying value of the field."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void setValue(T value);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/TextFormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a text form item allowing the user to enter text."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Backed by JavaFX\u0027s {@code TextField} control."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TextFormItem extends FormItem\u003cString\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/forms/TextFormItem.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextField formTextField;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TextFormItem(String textFormItemName, String initialText, Consumer\u003cString\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, executeChangeHandler);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemLabel.setText(textFormItemName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formTextField.setText(initialText);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //tie execute changeHandler to focusedProperty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formTextField.focusedProperty().addListener((observableVal, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (!newVal) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                executeChangeHandler.accept(getValue());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TextFormItem(String textFormItemName, Consumer\u003cString\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(textFormItemName, \"\", executeChangeHandler);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return formTextField.getText();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setValue(String value) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formTextField.setText(value);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/DayThumbnail.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * A component for displaying the details of a day."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DayThumbnail extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"itinerary/days/DayThumbnail.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label nameLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label destinationLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label indexLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Day day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Index displayedIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayThumbnail(Day day, Index displayedIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fillDayThumbnailLabels();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void fillDayThumbnailLabels() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        indexLabel.setText(\"DAY \" + displayedIndex.getOneBased() + \"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        nameLabel.setText(day.getName().toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        destinationLabel.setText(day.getDestination().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!(other instanceof DayThumbnail)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DayThumbnail otherThumbnail \u003d (DayThumbnail) other;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return day.equals(otherThumbnail.day)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 this.displayedIndex.equals(otherThumbnail.displayedIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 55,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/DaysPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.common.EnterPrefsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.EnterCreateDayCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.NavigationSidebarLeft;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.NavigationSidebarRight;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.PageWithSidebar;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * {@code Page} class implementing the days view page."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DaysPage extends PageWithSidebar\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"itinerary/days/DaysPage.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private FlowPane dayThumbnailPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox sideBarLeft;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox sideBarRight;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DaysPage(MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, mainWindow, logic, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fillPage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void fillPage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // nav bar"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarRight.getChildren().clear();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarLeft.getChildren().clear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        NavigationSidebarRight navigationSidebarRight \u003d new NavigationSidebarRight(mainWindow);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        NavigationSidebarLeft navigationSidebarLeft \u003d new NavigationSidebarLeft(mainWindow);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarLeft.getChildren().add(navigationSidebarLeft.getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarRight.getChildren().add(navigationSidebarRight.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Filling Days"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        dayThumbnailPane.getChildren().clear();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cDay\u003e days \u003d model.getPageStatus().getTrip().getDayList().internalUnmodifiableList;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cNode\u003e dayThumbnails \u003d IntStream.range(0, days.size())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .mapToObj(i -\u003e Index.fromZeroBased(i))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .map(index -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    DayThumbnail dayThumbnail \u003d new DayThumbnail(days.get(index.getZeroBased()), index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return dayThumbnail.getRoot();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        dayThumbnailPane.getChildren().addAll(FXCollections.observableArrayList(dayThumbnails));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void handleAddDay() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(EnterCreateDayCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void handlePreferences() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(EnterPrefsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 58,
      "arjunwangty": 12,
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/EditDayPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.CancelEditDayCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.DoneEditDayCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.edit.EditDayFieldCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.form.DateFormItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.form.DoubleFormItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.form.TextFormItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.template.Page;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * {@code Page} class implementing the edit day page."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EditDayPage extends Page\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"itinerary/days/EditDayPage.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TextFormItem dayNameFormItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TextFormItem dayDestinationFormItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private DateFormItem dayStartDateFormItem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private DateFormItem dayEndDateFormItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private DoubleFormItem dayTotalBudgetFormItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TextFormItem dayDescriptionFormItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private VBox formItemsPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditDayPage(MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, mainWindow, logic, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        initFormWithModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Fills the form items with model data."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void fillPage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditDayFieldCommand.EditDayDescriptor currentEditDescriptor \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().getEditDayDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (currentEditDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getName().ifPresent(name -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayNameFormItem.setValue(name.toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getDestination().ifPresent(destination -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayDestinationFormItem.setValue(destination.toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getStartDate().ifPresent(startDate -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayStartDateFormItem.setValue(startDate.toLocalDate()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getEndDate().ifPresent(endDate -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayEndDateFormItem.setValue(endDate.toLocalDate()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getBudget().ifPresent(budget -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayTotalBudgetFormItem.setValue(budget.value));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getDescription().ifPresent((description -\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayDescriptionFormItem.setValue(description.description)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Initialises and fills up all the placeholders of this window."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void initFormWithModel() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //Initialise with new display data"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        dayNameFormItem \u003d new TextFormItem(\"Name of Day : \", nameFormValue -\u003e {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    EditDayFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "                            + \" \" + PREFIX_NAME + nameFormValue);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dayStartDateFormItem \u003d new DateFormItem(\"Start date : \", startDate -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditDayFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_DATE_START"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + ParserDateUtil.getStringFromDate(startDate.atStartOfDay()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dayEndDateFormItem \u003d new DateFormItem(\"End date : \", endDate -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditDayFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_DATE_END"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + ParserDateUtil.getStringFromDate(endDate.atStartOfDay()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        dayTotalBudgetFormItem \u003d new DoubleFormItem(\"Total budget : \", totalBudget -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditDayFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_BUDGET + totalBudget);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        dayDestinationFormItem \u003d new TextFormItem(\"Destination : \", destinationValue -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditDayFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_LOCATION + destinationValue);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        dayDescriptionFormItem \u003d new TextFormItem(\"Description : \", description -\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditDayFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_DESCRIPTION + description);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fillPage(); //update and overwrite with existing edit descriptor"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "        formItemsPlaceholder.getChildren().addAll("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayNameFormItem.getRoot(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayStartDateFormItem.getRoot(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayEndDateFormItem.getRoot(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayTotalBudgetFormItem.getRoot(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayDestinationFormItem.getRoot(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "                dayDescriptionFormItem.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void handleEditDayDone() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String commandText \u003d DoneEditDayCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(commandText);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void handleEditCancel() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String commandText \u003d CancelEditDayCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(commandText);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 98,
      "arjunwangty": 11,
      "ang-zeyu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/EditEventPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.CancelEditEventCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.DoneEditEventCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.edit.EditEventFieldCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.form.DateFormItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.form.DoubleFormItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.form.TextFormItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.template.Page;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": " * WARNING INCOMEPLETE: TODO: FIELDS FOR INVENTORY AND BOOKING."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EditEventPage extends Page\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"itinerary/events/EditEventPage.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TextFormItem eventNameFormItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TextFormItem eventDestinationFormItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private DateFormItem eventStartDateFormItem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private DateFormItem eventEndDateFormItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private DoubleFormItem eventTotalBudgetFormItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //private TextFormItem eventInventoryFormItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //private TextFormItem eventBookingFormItem;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private VBox formItemsPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditEventPage(MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, mainWindow, logic, model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        initFormWithModel();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Fills the {@code FormItem}s with the model data."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void fillPage() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditEventFieldCommand.EditEventDescriptor currentEditDescriptor \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().getEditEventDescriptor();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (currentEditDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getName().ifPresent(name -\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventNameFormItem.setValue(name.toString()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getDestination().ifPresent(destination -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventDestinationFormItem.setValue(destination.toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getStartDate().ifPresent(startDate -\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventStartDateFormItem.setValue(startDate.toLocalDate()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getEndDate().ifPresent(endDate -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventEndDateFormItem.setValue(endDate.toLocalDate()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        currentEditDescriptor.getBudget().ifPresent(budget -\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventTotalBudgetFormItem.setValue(budget.value));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Initialises and fills up all the placeholders of this window."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void initFormWithModel() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //Initialise with new display data"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        eventNameFormItem \u003d new TextFormItem(\"Name of Event : \", nameFormValue -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    EditEventFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "                            + \" \" + PREFIX_NAME + nameFormValue);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        eventStartDateFormItem \u003d new DateFormItem(\"Start date : \", startDate -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditEventFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_DATE_START"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + ParserDateUtil.getStringFromDate(startDate.atStartOfDay()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        eventEndDateFormItem \u003d new DateFormItem(\"End date : \", endDate -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditEventFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_DATE_END"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + ParserDateUtil.getStringFromDate(endDate.atStartOfDay()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        eventTotalBudgetFormItem \u003d new DoubleFormItem(\"Total budget : \", totalBudget -\u003e {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditEventFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_BUDGET + totalBudget);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "        eventDestinationFormItem \u003d new TextFormItem(\"Destination : \", destinationValue -\u003e {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "            mainWindow.executeGuiCommand(EditEventFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    + \" \" + PREFIX_LOCATION + destinationValue);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "        });"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fillPage(); //update and overwrite with existing edit descriptor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "        formItemsPlaceholder.getChildren().addAll("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventNameFormItem.getRoot(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventStartDateFormItem.getRoot(),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventEndDateFormItem.getRoot(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventTotalBudgetFormItem.getRoot(),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "                eventDestinationFormItem.getRoot());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void handleEditEventDone() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String commandText \u003d DoneEditEventCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(commandText);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void handleEditCancel() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String commandText \u003d CancelEditEventCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(commandText);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 96,
      "arjunwangty": 11,
      "ang-zeyu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/EventCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * TODO: Implement display for inventory and booking labels."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EventCard extends UiPart\u003cHBox\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"itinerary/events/EventCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label idLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label nameLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label startDateLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label endDateLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label destinationLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private VBox propertiesContainer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Index displayedIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventCard(Event event, Index displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.event \u003d event;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fillEventCardLabels();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Fills the labels of this event card."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void fillEventCardLabels() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        idLabel.setText(displayedIndex.getOneBased() + \".\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        nameLabel.setText(\"Name: \" + event.getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        destinationLabel.setText(\"Destination :\" + event.getDestination().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        startDateLabel.setText(\"Start: \" + ParserDateUtil.getDisplayTime(event.getStartDate()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        endDateLabel.setText(\"End: \" + ParserDateUtil.getDisplayTime(event.getEndDate()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!(other instanceof EventCard)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        EventCard otherCard \u003d (EventCard) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return event.equals(otherCard.event)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 this.displayedIndex.equals(otherCard.displayedIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 63,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/EventsPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.common.EnterPrefsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.events.EnterCreateEventCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.NavigationSidebarLeft;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.NavigationSidebarRight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.PageWithSidebar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * {@code Page} for displaying the event details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class EventsPage extends PageWithSidebar\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"itinerary/events/EventsPage.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private VBox eventCardContainer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label inventoryLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label totalBudgetLabel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label bookingLabel;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox sideBarLeft;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox sideBarRight;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EventsPage(MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, mainWindow, logic, model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void fillPage() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // nav bar"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarRight.getChildren().clear();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarLeft.getChildren().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        NavigationSidebarRight navigationSidebarRight \u003d new NavigationSidebarRight(mainWindow);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        NavigationSidebarLeft navigationSidebarLeft \u003d new NavigationSidebarLeft(mainWindow);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarLeft.getChildren().add(navigationSidebarLeft.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarRight.getChildren().add(navigationSidebarRight.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Filling events"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        eventCardContainer.getChildren().clear();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cEvent\u003e events \u003d model.getPageStatus().getDay().getEventList().internalUnmodifiableList;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cNode\u003e eventCards \u003d IntStream.range(0, events.size())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .mapToObj(i -\u003e Index.fromZeroBased(i))"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .map(index -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    EventCard eventCard \u003d new EventCard(events.get(index.getZeroBased()), index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    eventCard.getRoot().addEventFilter(MouseEvent.MOUSE_CLICKED,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            new EventHandler\u003cjavafx.scene.input.MouseEvent\u003e() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                public void handle(javafx.scene.input.MouseEvent event) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                    if (events.get(index.getZeroBased()).getTotalBudget().isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                        totalBudgetLabel.setText(\"Total Budget: \""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                                + events.get(index.getZeroBased()).getTotalBudget().get().toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                    } else {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                        totalBudgetLabel.setText(\"NO BUDGET SET\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return eventCard.getRoot();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "        eventCardContainer.getChildren().addAll(FXCollections.observableArrayList(eventCards));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void handleAddEvent() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(EnterCreateEventCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void handlePreferences() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(EnterPrefsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 70,
      "arjunwangty": 13,
      "ang-zeyu": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/ItineraryPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.itinerary.days.EnterDayCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.NavigationSidebarLeft;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.components.NavigationSidebarRight;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.ui.template.PageWithSidebar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * {@code Page} class implementing the itinerary landing page."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class ItineraryPage extends PageWithSidebar\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final String FXML \u003d \"itinerary/ItineraryPage.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private HBox dayButtonsContainer;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label nameLabel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label startDateLabel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label endDateLabel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label destinationLabel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Label totalBudgetLabel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox sideBarLeft;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox sideBarRight;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ItineraryPage(MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        super(FXML, mainWindow, logic, model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fillPage();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void fillPage() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // nav bar"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarRight.getChildren().clear();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarLeft.getChildren().clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        NavigationSidebarRight navigationSidebarRight \u003d new NavigationSidebarRight(mainWindow);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        NavigationSidebarLeft navigationSidebarLeft \u003d new NavigationSidebarLeft(mainWindow);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarLeft.getChildren().add(navigationSidebarLeft.getRoot());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        sideBarRight.getChildren().add(navigationSidebarRight.getRoot());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        nameLabel.setText(model.getPageStatus().getTrip().getName().toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        startDateLabel.setText(model.getPageStatus().getTrip().getStartDate().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        endDateLabel.setText(model.getPageStatus().getTrip().getEndDate().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //destinationLabel.setText(model.getPageStatus().getTrip().getDestination().toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        totalBudgetLabel.setText(model.getPageStatus().getTrip().getBudget().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cDay\u003e days \u003d model.getPageStatus().getTrip().getDayList().internalUnmodifiableList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cNode\u003e dayButtons \u003d IntStream.range(0, days.size())"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .mapToObj(i -\u003e Index.fromZeroBased(i))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .map(index -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    Button button \u003d new Button();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    button.setText(Integer.toString(index.getOneBased()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    button.addEventFilter(MouseEvent.MOUSE_CLICKED,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            new EventHandler\u003cMouseEvent\u003e() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                public void handle(MouseEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                    mainWindow.executeGuiCommand(EnterDayCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                            + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "                            });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    return button;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "                }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        dayButtonsContainer.getChildren().clear();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "        dayButtonsContainer.getChildren().addAll(FXCollections.observableArrayList(dayButtons));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 87,
      "ang-zeyu": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/template/Page.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Base class of all pages."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * It is the responsibility of implementing classes to ensure components"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * specific to them are initialised and filled with data properly."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * @param \u003cT\u003e JavaFX base node type from which this page is constructed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class Page\u003cT extends Node\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected MainWindow mainWindow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected Page(String fxml, MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(fxml);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * The callback function {@code CommandUpdater} to run after executing a command successfully."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void fillPage();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/template/PageWithSidebar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.sidebar.EnterItineraryPageCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Template class for windows with the navigation sidebar."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class PageWithSidebar\u003cT extends Node\u003e extends Page\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox sideBarLeft;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox sideBarRight;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageWithSidebar(String fxmlFileName, MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(fxmlFileName, mainWindow, logic, model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void handleEnterTripManager() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        mainWindow.executeGuiCommand(EnterTripManagerCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void handleEnterOverallView() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        mainWindow.executeGuiCommand(EnterDayPageCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterBookingsManager() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterInventoryManager(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void handleEnterItinerary() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        mainWindow.executeGuiCommand(EnterItineraryPageCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterContactsManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterExpenditureManager() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEnterDairy() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 16,
      "arjunwangty": 7,
      "ang-zeyu": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/trips/EditTripPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.CancelEditTripCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.DoneEditTripCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.form.DateFormItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.form.DoubleFormItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.form.TextFormItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.Page;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * {@code Page} class for displaying the edit trip page."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditTripPage extends Page\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"trips/EditTripPage.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem tripNameFormItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem tripDestinationFormItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DateFormItem tripStartDateFormItem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DateFormItem tripEndDateFormItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DoubleFormItem tripTotalBudgetFormItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox formItemsPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditTripPage(MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, mainWindow, logic, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        initFormWithModel();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Fills up all the controls of this window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void fillPage() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand.EditTripDescriptor currentEditDescriptor \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().getEditTripDescriptor();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentEditDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        currentEditDescriptor.getName().ifPresent(name -\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripNameFormItem.setValue(name.toString()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        currentEditDescriptor.getDestination().ifPresent(destination -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripDestinationFormItem.setValue(destination.toString()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        currentEditDescriptor.getStartDate().ifPresent(startDate -\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripStartDateFormItem.setValue(startDate.toLocalDate()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        currentEditDescriptor.getEndDate().ifPresent(endDate -\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripEndDateFormItem.setValue(endDate.toLocalDate()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        currentEditDescriptor.getBudget().ifPresent(budget -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripTotalBudgetFormItem.setValue(budget.value));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Initialises and fills up all the placeholders of this window."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void initFormWithModel() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //Initialise with new display data"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripNameFormItem \u003d new TextFormItem(\"Name of trip : \", nameFormValue -\u003e {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    EditTripFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            + \" \" + PREFIX_NAME + nameFormValue);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripStartDateFormItem \u003d new DateFormItem(\"Start date : \", startDate -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand(EditTripFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + \" \" + PREFIX_DATE_START"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + ParserDateUtil.getStringFromDate(startDate.atStartOfDay()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripEndDateFormItem \u003d new DateFormItem(\"End date : \", endDate -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand(EditTripFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + \" \" + PREFIX_DATE_END"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + ParserDateUtil.getStringFromDate(endDate.atStartOfDay()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripTotalBudgetFormItem \u003d new DoubleFormItem(\"Total budget : \", totalBudget -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand(EditTripFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + \" \" + PREFIX_BUDGET + totalBudget);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripDestinationFormItem \u003d new TextFormItem(\"Destination : \", destinationValue -\u003e {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand(EditTripFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + \" \" + PREFIX_LOCATION + destinationValue);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillPage(); //update and overwrite with existing edit descriptor"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemsPlaceholder.getChildren().addAll("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripNameFormItem.getRoot(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripStartDateFormItem.getRoot(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripEndDateFormItem.getRoot(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripTotalBudgetFormItem.getRoot(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripDestinationFormItem.getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEditTripDone() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String commandText \u003d DoneEditTripCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        mainWindow.executeGuiCommand(commandText);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEditCancel() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String commandText \u003d CancelEditTripCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        mainWindow.executeGuiCommand(commandText);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 11,
      "ang-zeyu": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/trips/TripCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * A component for displaying the details of a singular {@code Trip}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripCard extends UiPart\u003cGridPane\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"trips/TripCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripDisplayIndexLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripNameLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripBudgetLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripDestinationLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripStartDateLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripEndDateLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Trip trip;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Index displayedIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TripCard(Trip trip, Index displayedIndex) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillTripCardLabels();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Fills the labels of this trip card with the info in {@code trip}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void fillTripCardLabels() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripDisplayIndexLabel.setText(displayedIndex.getOneBased() + \"\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripNameLabel.setText(trip.getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripBudgetLabel.setText(trip.getBudget().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripDestinationLabel.setText(trip.getDestination().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripStartDateLabel.setText(ParserDateUtil.getDisplayTime(trip.getStartDate()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripEndDateLabel.setText(ParserDateUtil.getDisplayTime(trip.getEndDate()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!(other instanceof TripCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripCard otherCard \u003d (TripCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return trip.equals(otherCard.trip)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 this.displayedIndex.equals(otherCard.displayedIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/trips/TripsPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.common.EnterPrefsCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterCreateTripCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.Page;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * {@code Page} class for displaying the trip manager page."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripsPage extends Page\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"trips/TripsPage.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final int MAX_COLUMNS \u003d 5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private int nextRowToFill \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private int nextColToFill \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private GridPane tripGridPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TripsPage(MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, mainWindow, logic, model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void fillPage() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripGridPane.getChildren().clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cTrip\u003e trips \u003d model.getTravelPal().getTripList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cNode\u003e tripCards \u003d IntStream.range(0, trips.size())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .mapToObj(i -\u003e Index.fromZeroBased(i))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .map(index -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TripCard tripCard \u003d new TripCard(trips.get(index.getZeroBased()), index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    int column \u003d index.getZeroBased() % MAX_COLUMNS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    int row \u003d index.getZeroBased() / MAX_COLUMNS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    //set starting positions of the trip cards with index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    GridPane.setConstraints(tripCard.getRoot(), column, row,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            1, 1,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            HPos.CENTER, VPos.CENTER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    return tripCard.getRoot();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripGridPane.getChildren().addAll(FXCollections.observableArrayList(tripCards));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleAddTrip() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        mainWindow.executeGuiCommand(EnterCreateTripCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handlePreferences() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        mainWindow.executeGuiCommand(EnterPrefsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 24,
      "ang-zeyu": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/utility/PreferencesPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_DATA_FILE_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_GUI_LOCK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_HEIGHT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.preferences.PrefsCliSyntax.PREFIX_WINDOW_WIDTH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.CancelEditPrefsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.DoneEditPrefsCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.preferences.EditPrefsFieldCommand.EditPrefsDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.form.CheckBoxFormItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.form.TextFormItem;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.Page;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * {@code Page} class implementing the preferences page."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class PreferencesPage extends Page\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"common/PreferencesPage.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem windowHeightFormItem;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem windowWidthFormItem;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem windowXPosFormItem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem windowYPosFormItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem dataFilePathFormItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private CheckBoxFormItem guiLockFormItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox formItemsPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PreferencesPage(MainWindow mainWindow, Logic logic, Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, mainWindow, logic, model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        initFormWithModel();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void fillPage() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditPrefsDescriptor currentPrefsDescriptor \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().getEditPrefsDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(currentPrefsDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        windowWidthFormItem.setValue("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                String.format(\"%1$.3f\", currentPrefsDescriptor.getWindowWidth().getAsDouble()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        windowHeightFormItem.setValue("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                String.format(\"%1$.3f\", currentPrefsDescriptor.getWindowHeight().getAsDouble()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        windowXPosFormItem.setValue(currentPrefsDescriptor.getWindowXPos().getAsInt() + \"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        windowYPosFormItem.setValue(currentPrefsDescriptor.getWindowYPos().getAsInt() + \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dataFilePathFormItem.setValue(currentPrefsDescriptor.getDataFilePath().get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        guiLockFormItem.setValue(currentPrefsDescriptor.isGuiLocked().get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Initialises and fills up all the placeholders of this window."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void initFormWithModel() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //Initialise with new display data"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        windowWidthFormItem \u003d new TextFormItem(\"Window Width: \", windowWidth -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    EditPrefsFieldCommand.COMMAND_WORD + \" \" + PREFIX_WINDOW_WIDTH + windowWidth);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        windowHeightFormItem \u003d new TextFormItem(\"Window Height: \", windowHeight -\u003e {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    EditPrefsFieldCommand.COMMAND_WORD + \" \" + PREFIX_WINDOW_HEIGHT + windowHeight);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        windowXPosFormItem \u003d new TextFormItem(\"Window X Position: \", xPos -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    EditPrefsFieldCommand.COMMAND_WORD + \" \" + PREFIX_WINDOW_WIDTH + xPos);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        windowYPosFormItem \u003d new TextFormItem(\"Window Y Position: \", yPos -\u003e {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    EditPrefsFieldCommand.COMMAND_WORD + \" \" + PREFIX_WINDOW_WIDTH + yPos);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dataFilePathFormItem \u003d new TextFormItem(\"Data file path: \", dataFilePath -\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    EditPrefsFieldCommand.COMMAND_WORD + \" \" + PREFIX_DATA_FILE_PATH + dataFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        guiLockFormItem \u003d new CheckBoxFormItem(\"Lock gui settings: \", isLocked -\u003e {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.executeGuiCommand(EditPrefsFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + \" \" + PREFIX_GUI_LOCK"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    + (isLocked.booleanValue() ? \"t\" : \"f\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillPage();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemsPlaceholder.getChildren().addAll("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                windowWidthFormItem.getRoot(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                windowHeightFormItem.getRoot(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                windowXPosFormItem.getRoot(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                windowYPosFormItem.getRoot(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                guiLockFormItem.getRoot(),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                dataFilePathFormItem.getRoot());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEditPrefsDone() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String commandText \u003d DoneEditPrefsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        mainWindow.executeGuiCommand(commandText);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEditPrefsCancel() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String commandText \u003d CancelEditPrefsCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        mainWindow.executeGuiCommand(commandText);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 13,
      "ang-zeyu": 108
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TravelPal\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cImage url\u003d\"@/images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "       \u003cStackPane fx:id\u003d\"contentPlaceholder\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "ang-zeyu": 10
    }
  },
  {
    "path": "src/main/resources/view/PageWithSidebar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"view.PageWithSidebar\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cVBox fx:id\u003d\"leftBar\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cVBox AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 10,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/resources/view/common/HelpWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 37,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/resources/view/common/PreferencesPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" style\u003d\"-fx-background-color: #F2DFD7;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cVBox fx:id\u003d\"formItemsPlaceholder\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cGridPane alignment\u003d\"BOTTOM_CENTER\" style\u003d\"-fx-background-color: #50514F;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditPrefsDone\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Done\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/GridPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditPrefsCancel\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Cancel\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/GridPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 31
    }
  },
  {
    "path": "src/main/resources/view/components/SidebarLeft.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cVBox maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #3e4d52#3e4d52;\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cButton layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEnterOverallView\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@../DarkTheme.css\" text\u003d\"OverallView\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cButton layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEnterTripManager\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@../DarkTheme.css\" text\u003d\"Trip Manager\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cButton mnemonicParsing\u003d\"false\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@../DarkTheme.css\" text\u003d\"Bookings\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cButton layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@../DarkTheme.css\" text\u003d\"Inventory\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 28
    }
  },
  {
    "path": "src/main/resources/view/components/SidebarRight.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cVBox maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #3e4d52#3e4d52;\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cButton fx:id\u003d\"itineraryLabel\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEnterItinerary\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@../DarkTheme.css\" text\u003d\"Itinerary\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cButton fx:id\u003d\"contactsLabel\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@../DarkTheme.css\" text\u003d\"Contacts\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cButton fx:id\u003d\"expenditureLabel\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@../DarkTheme.css\" text\u003d\"Expenditure\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cButton fx:id\u003d\"diaryLabel\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@../DarkTheme.css\" text\u003d\"Diary\" textFill\u003d\"WHITE\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Button\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 28
    }
  },
  {
    "path": "src/main/resources/view/components/forms/CheckBoxFormItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane minHeight\u003d\"80.0\" minWidth\u003d\"-Infinity\" styleClass\u003d\"FormItem\" stylesheets\u003d\"@FormItem.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cLabel fx:id\u003d\"formItemLabel\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" AnchorPane.topAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cCheckBox fx:id\u003d\"formCheckBox\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleChange\" AnchorPane.bottomAnchor\u003d\"3.0\" AnchorPane.leftAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 11
    }
  },
  {
    "path": "src/main/resources/view/components/forms/DateFormItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.DatePicker?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane minHeight\u003d\"80.0\" minWidth\u003d\"-Infinity\" styleClass\u003d\"FormItem\" stylesheets\u003d\"@FormItem.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cLabel fx:id\u003d\"formItemLabel\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" AnchorPane.topAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cDatePicker fx:id\u003d\"formDateField\" onAction\u003d\"#handleChange\" AnchorPane.bottomAnchor\u003d\"3.0\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 11
    }
  },
  {
    "path": "src/main/resources/view/components/forms/DoubleFormItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Spinner?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane minHeight\u003d\"80.0\" minWidth\u003d\"-Infinity\" styleClass\u003d\"FormItem\" stylesheets\u003d\"@FormItem.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cLabel fx:id\u003d\"formItemLabel\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" AnchorPane.topAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cSpinner fx:id\u003d\"formDoubleSpinner\" editable\u003d\"true\" AnchorPane.bottomAnchor\u003d\"3.0\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 11
    }
  },
  {
    "path": "src/main/resources/view/components/forms/TextFormItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane minHeight\u003d\"80.0\" minWidth\u003d\"-Infinity\" styleClass\u003d\"FormItem\" stylesheets\u003d\"@FormItem.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cLabel fx:id\u003d\"formItemLabel\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" AnchorPane.topAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cTextField fx:id\u003d\"formTextField\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" AnchorPane.bottomAnchor\u003d\"3.0\" AnchorPane.leftAnchor\u003d\"3.0\" AnchorPane.rightAnchor\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 11
    }
  },
  {
    "path": "src/main/resources/view/itinerary/ItineraryPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cScrollPane layoutX\u003d\"186.0\" layoutY\u003d\"186.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cHBox fx:id\u003d\"dayButtonsContainer\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/content\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cGridPane layoutX\u003d\"96.0\" layoutY\u003d\"111.0\" AnchorPane.bottomAnchor\u003d\"200.0\" AnchorPane.leftAnchor\u003d\"400.0\" AnchorPane.rightAnchor\u003d\"400.0\" AnchorPane.topAnchor\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cLabel fx:id\u003d\"nameLabel\" text\u003d\"\\$Name\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateLabel\" text\u003d\"\\$StartDate\" GridPane.rowIndex\u003d\"1\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateLabel\" text\u003d\"\\$EndDate\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cLabel fx:id\u003d\"destintationLabel\" text\u003d\"\\$Destination\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalBudgetLabel\" text\u003d\"\\$TotalBudget\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003cImage url\u003d\"@../../../../../build/resources/main/images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cVBox fx:id\u003d\"sideBarLeft\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cVBox fx:id\u003d\"sideBarRight\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 48
    }
  },
  {
    "path": "src/main/resources/view/itinerary/days/DayThumbnail.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" stylesheets\u003d\"@days.css\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cImage url\u003d\"@../../../../../../build/resources/main/images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cLabel fx:id\u003d\"nameLabel\" layoutX\u003d\"57.0\" layoutY\u003d\"36.0\" style\u003d\"-fx-text-fill: black; -fx-font-size: 20;\" styleClass\u003d\"NameLabel\" stylesheets\u003d\"@days.css\" text\u003d\"\\$Name\" textAlignment\u003d\"CENTER\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"36.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cLabel fx:id\u003d\"destinationLabel\" layoutX\u003d\"23.0\" layoutY\u003d\"67.0\" style\u003d\"-fx-text-fill: white; -fx-font-size: 25;\" styleClass\u003d\"DestinationLabel\" stylesheets\u003d\"@days.css\" text\u003d\"\\$Destination\" textAlignment\u003d\"CENTER\" textFill\u003d\"WHITE\" AnchorPane.bottomAnchor\u003d\"29.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"26.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cLabel fx:id\u003d\"indexLabel\" style\u003d\"-fx-text-fill: black; -fx-font-weight: bold; -fx-font-size: 25;\" styleClass\u003d\"IndexLabel\" stylesheets\u003d\"@days.css\" text\u003d\"\\$Index\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cFont size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 31
    }
  },
  {
    "path": "src/main/resources/view/itinerary/days/DaysPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-background-color: #F2DFD7;\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003cVBox style\u003d\"-fx-background-color: #F2DFD7;\" AnchorPane.leftAnchor\u003d\"150.0\" AnchorPane.rightAnchor\u003d\"150.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #F2DFD7;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003ccontent\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cFlowPane fx:id\u003d\"dayThumbnailPane\" hgap\u003d\"10.0\" prefWrapLength\u003d\"1005.0\" style\u003d\"-fx-background-color: #F2DFD7;\" vgap\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003c/content\u003e\u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003cGridPane style\u003d\"-fx-background-color: #50514F;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cButton fx:id\u003d\"addButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleAddDay\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Add Day\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Help\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handlePreferences\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Preferences\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cfont\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/font\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003c/Button\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cVBox fx:id\u003d\"sideBarLeft\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cVBox fx:id\u003d\"sideBarRight\" layoutX\u003d\"10.0\" layoutY\u003d\"10.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 60
    }
  },
  {
    "path": "src/main/resources/view/itinerary/days/EditDayPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-background-color: #F2DFD7;\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003cVBox fx:id\u003d\"formItemsPlaceholder\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003cGridPane alignment\u003d\"BOTTOM_CENTER\" style\u003d\"-fx-background-color: #50514F;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditDayDone\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Done\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/GridPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditCancel\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Cancel\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/GridPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 31
    }
  },
  {
    "path": "src/main/resources/view/itinerary/events/EditEventPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-background-color: #F2DFD7;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003cVBox fx:id\u003d\"formItemsPlaceholder\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003cGridPane alignment\u003d\"BOTTOM_CENTER\" style\u003d\"-fx-background-color: #50514F;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditEventDone\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Done\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/GridPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditCancel\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Cancel\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/GridPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 25,
      "ang-zeyu": 6
    }
  },
  {
    "path": "src/main/resources/view/itinerary/events/EventCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003cVBox fx:id\u003d\"propertiesContainer\" alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cLabel fx:id\u003d\"idLabel\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$id\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cLabel fx:id\u003d\"nameLabel\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$name\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cLabel fx:id\u003d\"destinationLabel\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$destination\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 37
    }
  },
  {
    "path": "src/main/resources/view/itinerary/events/EventsListScrollPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"568.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "       \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cVBox fx:id\u003d\"eventCardsContainer\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "       \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 14
    }
  },
  {
    "path": "src/main/resources/view/itinerary/events/EventsPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cAnchorPane xmlns\u003d\"http://javafx.com/javafx/8.0.172-ea\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "       \u003cGridPane style\u003d\"-fx-background-color: #50514F;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "           \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "           \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "           \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "           \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "           \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cButton fx:id\u003d\"addButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleAddEvent\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Add Event\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "                       \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "                       \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Help\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003cfont\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "                       \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003c/font\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "                       \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" minWidth\u003d\"-Infinity\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handlePreferences\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Preferences\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003cfont\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                       \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003c/font\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "                       \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                   \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "           \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "       \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "       \u003cGridPane gridLinesVisible\u003d\"true\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"150.0\" AnchorPane.rightAnchor\u003d\"150.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003cGridPane GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003cLabel fx:id\u003d\"inventoryLabel\" alignment\u003d\"CENTER\" text\u003d\"\\$Inventory\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003cLabel fx:id\u003d\"totalBudgetLabel\" text\u003d\"\\$TotalBudget\" GridPane.rowIndex\u003d\"3\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003cLabel fx:id\u003d\"bookingLabel\" text\u003d\"\\$Booking\" GridPane.rowIndex\u003d\"4\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "                     \u003cimage\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "                        \u003cImage url\u003d\"@../../../../../../build/resources/main/images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "                     \u003c/image\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "                  \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "             \u003cScrollPane fx:id\u003d\"scrollPane\" fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "                 \u003ccontent\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "                     \u003cVBox fx:id\u003d\"eventCardContainer\" minWidth\u003d\"400.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-border-color: black;\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "                 \u003c/content\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "             \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cVBox fx:id\u003d\"sideBarLeft\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "      \u003cVBox fx:id\u003d\"sideBarRight\" prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "teoha": 95
    }
  },
  {
    "path": "src/main/resources/view/trips/EditTripPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-background-color: #F2DFD7;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cVBox fx:id\u003d\"formItemsPlaceholder\" AnchorPane.bottomAnchor\u003d\"50.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cGridPane alignment\u003d\"BOTTOM_CENTER\" style\u003d\"-fx-background-color: #50514F;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "           \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "             \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "             \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "           \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "           \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "             \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "           \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditTripDone\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Done\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/GridPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditCancel\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Cancel\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/GridPane.margin\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 31
    }
  },
  {
    "path": "src/main/resources/view/trips/TripCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cGridPane alignment\u003d\"CENTER\" gridLinesVisible\u003d\"true\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"350.0\" minWidth\u003d\"200.0\" styleClass\u003d\"TripCard\" stylesheets\u003d\"@Trips.css\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cLabel fx:id\u003d\"tripNameLabel\" text\u003d\"Label\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cFont name\u003d\"Book Antiqua\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/GridPane.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cLabel fx:id\u003d\"tripBudgetLabel\" text\u003d\"Label\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/GridPane.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cLabel fx:id\u003d\"tripDestinationLabel\" text\u003d\"Label\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cFont name\u003d\"Book Antiqua\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/GridPane.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cAnchorPane GridPane.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cImageView fitHeight\u003d\"175.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cimage\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cImage url\u003d\"@../../images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/image\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"tripDisplayIndexLabel\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" styleClass\u003d\"TripCardIndex\" text\u003d\"Label\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.topAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cFont name\u003d\"Book Antiqua Bold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cGridPane GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"tripStartDateLabel\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cFont name\u003d\"Book Antiqua\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"tripEndDateLabel\" text\u003d\"Label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cFont name\u003d\"Book Antiqua\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 93
    }
  },
  {
    "path": "src/main/resources/view/trips/TripsPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane style\u003d\"-fx-background-color: #F2DFD7;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cVBox style\u003d\"-fx-background-color: #F2DFD7;\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #F2DFD7;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cGridPane fx:id\u003d\"tripGridPane\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #F2DFD7;\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \u003cRowConstraints minHeight\u003d\"360.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \u003cRowConstraints minHeight\u003d\"360.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cGridPane style\u003d\"-fx-background-color: #50514F;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleAddTrip\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Add Trip\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Help\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"2\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handlePreferences\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Preferences\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cInsets bottom\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/Button\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 6,
      "ang-zeyu": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/dummytrip.jpeg\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.storage.JsonTravelPalStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonTravelPalStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "                new JsonTravelPalStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Setup LogicManager with JsonTravelPalIoExceptionThrowingStub"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonTravelPalStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "                new JsonTravelPalIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static class JsonTravelPalIoExceptionThrowingStub extends JsonTravelPalStorage {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private JsonTravelPalIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void saveAddressBook(ReadOnlyTravelPal addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 16,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Person personInList \u003d model.getTravelPal().getPersonList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "@Disabled(\"until complete refactor\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public FilteredList\u003cTrip\u003e getFilteredTripList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void deleteTrip(Trip target) throws TripNotFoundException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setTrip(Trip target, Trip replacement) throws ClashingTripException, TripNotFoundException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void addTrip(Trip trip) throws ClashingTripException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public PageStatus getPageStatus() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setPageStatus(PageStatus editedPageStatus) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //tests from AB3 ----------------------------------------------------"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Path getTravelPalFilePath() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setTravelPalFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setTravelPal(ReadOnlyTravelPal newData) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public ReadOnlyTravelPal getTravelPal() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public ReadOnlyTravelPal getTravelPal() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new TravelPal();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 7,
      "-": 186,
      "ang-zeyu": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        expectedModel.setTravelPal(new TravelPal());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 30,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_NAME_AFRICA \u003d \"Africa Trip\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_NAME_BALI \u003d \"Bali Trip\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_AFRICA_1 \u003d \"01/01/2019\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_AFRICA_2 \u003d \"01/01/2019 1200\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_AFRICA_3 \u003d \"1200\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_BALI_1 \u003d \"02/02/2018\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_BALI_2 \u003d \"02/02/2018 1300\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_BALI_3 \u003d \"1300\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_AFRICA_1 \u003d \"01/02/2019\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_AFRICA_2 \u003d \"01/11/2019 1200\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_AFRICA_3 \u003d \"1500\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_BALI_1 \u003d \"05/05/2018\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_BALI_2 \u003d \"07/07/2018 1300\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_BALI_3 \u003d \"2100\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_DESTINATION_AFRICA \u003d \"Africa\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_DESTINATION_BALI \u003d \"Bali\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_TOTAL_BUDGET_AFRICA \u003d \"120.00\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_TOTAL_BUDGET_BALI \u003d \"3100.00\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_NAME_DAY_1 \u003d \"Arrival Day\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_NAME_DAY_2 \u003d \"Best Day\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_DAY_1_1 \u003d \"01/01/2019\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_DAY_1_2 \u003d \"01/01/2019 1200\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_DAY_1_3 \u003d \"1200\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_DAY_2_1 \u003d \"02/02/2018\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_DAY_2_2 \u003d \"02/02/2018 1300\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_STARTDATE_DAY_2_3 \u003d \"1300\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_DAY_1_1 \u003d \"01/02/2019\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_DAY_1_2 \u003d \"01/11/2019 1200\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_DAY_1_3 \u003d \"1500\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_DAY_2_1 \u003d \"05/05/2018\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_DAY_2_2 \u003d \"07/07/2018 1300\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_ENDDATE_DAY_2_3 \u003d \"2100\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_DESTINATION_DAY_1 \u003d \"Gambia\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String VALID_DESTINATION_DAY_2 \u003d \"Bali\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_TOTAL_BUDGET_DAY_1 \u003d \"120.00\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_TOTAL_BUDGET_DAY_2 \u003d \"3100.00\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_DESCRIPTION_DAY_1 \u003d \"This is the day of arrival\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALID_DESCRIPTION_DAY_2 \u003d \"This is the second day of my trip\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The required input date format to use. */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String DATE_TIME_FORMAT \u003d \"d/M/y HHmm\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The required input date format to use. */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"d/M/y\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The required input time format to use. */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String TIME_FORMAT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The output format for displaying dates and times. */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String DISPLAY_FORMAT \u003d \"d MMM y h:mma\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The dateTime formatter that uses the DATE_TIME_FORMAT pattern. */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The dateTime formatter that uses the DATE_FORMAT pattern. */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The dateTime formatter that uses the TIME_FORMAT pattern. */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The dateTime formatter that uses the DISPLAY_FORMAT pattern. */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final DateTimeFormatter DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(DISPLAY_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** The error display message format to be shown if parsing fails. */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_INVALID_FORMAT \u003d \"Invalid %1$s inputted, use %2$s.\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final EditTripFieldCommand.EditTripDescriptor DESC_AFRICA;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DESC_AFRICA \u003d new EditTripFieldCommand.EditTripDescriptor();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DESC_AFRICA.setName(new Name(VALID_NAME_AFRICA));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DESC_AFRICA.setBudget(new Expenditure(VALID_TOTAL_BUDGET_AFRICA));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DESC_AFRICA.setStartDate(LocalDateTime.parse(VALID_STARTDATE_AFRICA_2, DATE_TIME_FORMATTER));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DESC_AFRICA.setDestination(new Location(VALID_DESTINATION_AFRICA));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DESC_AFRICA.setEndDate(LocalDateTime.parse(VALID_ENDDATE_AFRICA_2, DATE_TIME_FORMATTER));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal expectedTravelPal \u003d new TravelPal(actualModel.getTravelPal());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(expectedTravelPal, actualModel.getTravelPal());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 71,
      "-": 125,
      "ang-zeyu": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTravelPal().getPersonList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 7,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPal(model.getTravelPal()), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPal(model.getTravelPal()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPal(model.getTravelPal()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPal(model.getTravelPal()), new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Person personInList \u003d model.getTravelPal().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTravelPal().getPersonList().size());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 14,
      "-": 159,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 2,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.common.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.common.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TravelPalParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "@Disabled(\"until complete refactor\")"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TravelPalParserTest {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final TravelPalParser parser \u003d new TravelPalParser();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.testutil.TypicalTrips.TRIP_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.testutil.TravelPalBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(new TravelPal(), modelManager.getTravelPal());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userPrefs.setTravelPalFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userPrefs.setTravelPalFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTravelPalFilePath(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        modelManager.setTravelPalFilePath(path);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(path, modelManager.getTravelPalFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal travelPal \u003d new TravelPalBuilder().withPerson(ALICE).withPerson(BENSON).withTrip(TRIP_B).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal differentTravelPal \u003d new TravelPal();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "        modelManager \u003d new ModelManager(travelPal, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(travelPal, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different travelPal -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTravelPal, userPrefs)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTravelPal, userPrefs)));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        differentUserPrefs.setTravelPalFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(travelPal, differentUserPrefs)));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 14,
      "-": 116,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TravelPalTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BALI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOTAL_BUDGET_AFRICA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.testutil.TypicalTrips.TRIP_A;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.testutil.TypicalTrips.getTypicalTravelPal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.exceptions.DuplicateTripException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.testutil.TripBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TravelPalTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final TravelPal travelPal \u003d new TravelPal();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(Collections.emptyList(), travelPal.getTripList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e travelPal.resetData(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void resetData_withValidReadOnlyTravelPal_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal newData \u003d getTypicalTravelPal();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(newData, travelPal);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void resetData_withDuplicateTrips_throwsDuplicateTripException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Two trips with the same identity fields"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Trip editedTripA \u003d TripBuilder.of(TRIP_A).setTotalBudget(new Expenditure(VALID_TOTAL_BUDGET_AFRICA)).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cTrip\u003e newTrips \u003d Arrays.asList(TRIP_A, editedTripA);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPalStub newData \u003d new TravelPalStub(newTrips);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(DuplicateTripException.class, () -\u003e travelPal.resetData(newData));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void resetData_withClashingTrips_throwsClashingTripsException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Trip editedTripA \u003d TripBuilder.of(TRIP_A).setName(new Name(VALID_NAME_BALI)).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cTrip\u003e newTrips \u003d Arrays.asList(TRIP_A, editedTripA);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPalStub newData \u003d new TravelPalStub(newTrips);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(ClashingTripException.class, () -\u003e travelPal.resetData(newData));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void hasTrip_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e travelPal.hasTrip(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void hasTrip_tripNotInTravelPal_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(travelPal.hasTrip(TRIP_A));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void hasTrip_tripInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "            travelPal.addTrip(TRIP_A);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertTrue(travelPal.hasTrip(TRIP_A));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void hasTrip_tripWithSameIdentityFieldsInTravelPal_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "            travelPal.addTrip(TRIP_A);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Trip editedTripA \u003d TripBuilder.of(TRIP_A).setTotalBudget(new Expenditure(VALID_TOTAL_BUDGET_AFRICA))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertTrue(travelPal.hasTrip(editedTripA));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void getTripList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPal.getTripList().remove(0));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * A stub ReadOnlyTravelPal whose trip list can violate interface constraints."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static class TravelPalStub implements ReadOnlyTravelPal {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private final ObservableList\u003cTrip\u003e trips \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPalStub(Collection\u003cTrip\u003e trips) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.trips.setAll(trips);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public ObservableList\u003cTrip\u003e getTripList() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return trips;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 56,
      "-": 62,
      "ang-zeyu": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTravelPalFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/DescriptionTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void isValid() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // invalid descriptions"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Description.isValidDescription(\"My Description\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Lorem Ipsum is simply dummy text of the printing \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \"and typesetting industry. Lorem Ipsum has been the industry\u0027s standard dummy text ever \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \"since the 1500s, when an unknown printer took a galley of type and scrambled it to make \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \"a type specimen book. It has survived not only five centuries, but also the leap into \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \"electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \"with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \"desktop publishing software like Aldus PageMaker \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                + \"including versions of Lorem Ipsum.\")); // long description"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 33,
      "ang-zeyu": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/ExpenditureTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class ExpenditureTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Expenditure(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String invalidExpenditure \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Expenditure(invalidExpenditure));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void isValid() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Expenditure.isValidExpenditure(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Expenditure.isValidExpenditure(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Expenditure.isValidExpenditure(\"0.1234\")); // containing more than one decimal place"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Expenditure.isValidExpenditure(\"Not a number\")); // containing only alphabets"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Expenditure.isValidExpenditure(\"0\")); // no decimal point"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Location.isValidLocation(\"1.0\")); // one decimal point"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Location.isValidLocation(\"9.99\")); // two decimal points"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 32,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/LocationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void isValid() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertTrue(Location.isValidLocation("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long location"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 29,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/NameTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(Name.isValidName(\"My Trip*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Name.isValidName(\"africa trip\")); // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Name.isValidName(\"2nd africa arip\")); // alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Name.isValidName(\"Bali Trip\")); // with capital letters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(Name.isValidName(\"My Africa Trip with a long name\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 38,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "@Disabled(\"until contacts manager complete\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //note list references in these two tests were originally of type UniquePersonList(AB3)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cPerson\u003e expectedUniquePersonList \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //-------------------------------------------------------------------"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 168,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/trip/TripListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.testutil.TypicalTrips.TRIP_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.testutil.TypicalTrips.TRIP_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.DuplicateTripException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.testutil.TripBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void contains_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void contains_tripNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(tripList.contains(TRIP_A));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void contains_tripInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertTrue(tripList.contains(TRIP_A));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void contains_tripWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Trip editedTripA \u003d TripBuilder.of(TRIP_A).setTotalBudget(new Expenditure(\"10\"))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertTrue(tripList.contains(editedTripA));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void add_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.add(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void add_duplicateTrip_throwsDuplicateTripException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertThrows(DuplicateTripException.class, () -\u003e tripList.add(TRIP_A));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setTrip_nullTargetTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.set(null, TRIP_A));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setTrip_nullEditedTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.set(TRIP_A, null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setTrip_targetTripNotInList_throwsTripNotFoundException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(TripNotFoundException.class, () -\u003e tripList.set(TRIP_A, TRIP_A));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setTrip_editedTripIsSameTrip_success() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.set(TRIP_A, TRIP_A);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "            TripList expectedUniqueTripList \u003d new TripList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "            expectedUniqueTripList.add(TRIP_A);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertEquals(expectedUniqueTripList, tripList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setTrip_editedTripHasSameIdentity_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Trip editedTrip \u003d TripBuilder.of(TRIP_A)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .setTotalBudget(new Expenditure(\"100\"))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.set(TRIP_A, editedTrip);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "            TripList expectedUniqueTripList \u003d new TripList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "            expectedUniqueTripList.add(editedTrip);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertEquals(expectedUniqueTripList, tripList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setTrip_editedTripHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.set(TRIP_A, TRIP_B);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "            TripList expectedUniqueTripList \u003d new TripList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teoha"
        },
        "content": "            expectedUniqueTripList.add(TRIP_B);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertEquals(expectedUniqueTripList, tripList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTrip_editedTripHasNonUniqueIdentity_throwsDuplicateTripException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_B);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertThrows(DuplicateTripException.class, () -\u003e tripList.set(TRIP_A, TRIP_B));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void remove_nullTrip_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.remove((Trip) null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void remove_tripDoesNotExist_throwsTripNotFoundException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(TripNotFoundException.class, () -\u003e tripList.remove(TRIP_A));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void remove_existingTrip_removesTrip() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.remove(TRIP_A);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teoha"
        },
        "content": "            TripList expectedUniqueTripList \u003d new TripList();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertEquals(expectedUniqueTripList, tripList);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //note list references in these two tests were originally of type TripList"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setTrips_nullUniqueTripList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.set(null));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTrips_uniqueTripList_replacesOwnListWithProvidedUniqueTripList() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "teoha"
        },
        "content": "            List\u003cTrip\u003e expectedUniqueTripList \u003d new ArrayList\u003cTrip\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teoha"
        },
        "content": "            expectedUniqueTripList.add(TRIP_B);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.set(expectedUniqueTripList);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertEquals(expectedUniqueTripList, tripList.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //-------------------------------------------------------------------"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTrips_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e tripList.set((List\u003cTrip\u003e) null));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTrips_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertDoesNotThrow(() -\u003e {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.add(TRIP_A);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teoha"
        },
        "content": "            List\u003cTrip\u003e trips \u003d Collections.singletonList(TRIP_B);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "teoha"
        },
        "content": "            tripList.set(trips);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teoha"
        },
        "content": "            TripList expectedUniqueTripList \u003d new TripList();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "teoha"
        },
        "content": "            expectedUniqueTripList.add(TRIP_B);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "teoha"
        },
        "content": "            assertEquals(expectedUniqueTripList, tripList);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTrips_listWithDuplicateTrips_throwsDuplicateTripException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "teoha"
        },
        "content": "        List\u003cTrip\u003e listWithDuplicateTrips \u003d Arrays.asList(TRIP_A, TRIP_A);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(DuplicateTripException.class, () -\u003e tripList.set(listWithDuplicateTrips));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripList tripList \u003d new TripList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 138,
      "ang-zeyu": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/trip/TripTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_TIME_FORMATTER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_DAY_1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESTINATION_BALI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESTINATION_DAY_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_BALI_2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ENDDATE_DAY_1_2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AFRICA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BALI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_DAY_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_BALI_2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STARTDATE_DAY_1_2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOTAL_BUDGET_AFRICA;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOTAL_BUDGET_BALI;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TOTAL_BUDGET_DAY_1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.testutil.TypicalTrips.TRIP_A;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.testutil.TypicalTrips.TRIP_B;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.testutil.DayBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.testutil.TripBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TripTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void isSameTrip() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(TRIP_A.isSameTrip(TRIP_A));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.isSameTrip(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different start and end dates -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip editedTripA \u003d TripBuilder.of(TRIP_A)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .setStartDate(LocalDateTime.of(2020, 9, 12, 3, 30))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setEndDate(LocalDateTime.of(2021, 4, 3, 4, 13)).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.isSameTrip(editedTripA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        editedTripA \u003d TripBuilder.of(TRIP_A).setName(new Name(VALID_NAME_AFRICA)).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.isSameTrip(editedTripA));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // same name, same start and end times, same destination different attributes -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        editedTripA \u003d TripBuilder.of(TRIP_A).setTotalBudget(new Expenditure(VALID_TOTAL_BUDGET_AFRICA))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(TRIP_A.isSameTrip(editedTripA));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // same name, start and end times, same total budger, same location, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        editedTripA \u003d TripBuilder.of(TRIP_A).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(TRIP_A.isSameTrip(editedTripA));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Trip tripACopy \u003d TripBuilder.of(TRIP_A).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(TRIP_A.equals(tripACopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(TRIP_A.equals(TRIP_A));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.equals(5));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.equals(TRIP_B));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Trip editedTripA \u003d TripBuilder.of(TRIP_A).setName(new Name(VALID_NAME_BALI)).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.equals(editedTripA));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        editedTripA \u003d TripBuilder.of(TRIP_A).setStartDate("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                LocalDateTime.parse(VALID_STARTDATE_BALI_2, DATE_TIME_FORMATTER)).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.equals(editedTripA));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        editedTripA \u003d TripBuilder.of(TRIP_A).setEndDate("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                LocalDateTime.parse(VALID_ENDDATE_BALI_2, DATE_TIME_FORMATTER)).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.equals(editedTripA));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different Location -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "        editedTripA \u003d TripBuilder.of(TRIP_A).setLocation(new Location(VALID_DESTINATION_BALI)).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.equals(editedTripA));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different total budget -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": "        editedTripA \u003d TripBuilder.of(TRIP_A).setTotalBudget(new Expenditure(VALID_TOTAL_BUDGET_BALI)).build();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(TRIP_A.equals(editedTripA));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different daylist -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DayList days \u003d new DayList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "        days.add(DayBuilder.newInstance().setName(new Name(VALID_NAME_DAY_1))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setDescription(new Description(VALID_DESCRIPTION_DAY_1))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setStartDate(LocalDateTime.parse(VALID_STARTDATE_DAY_1_2, DATE_TIME_FORMATTER))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setEndDate(LocalDateTime.parse(VALID_ENDDATE_DAY_1_2, DATE_TIME_FORMATTER))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setTotalBudget(new Expenditure(VALID_TOTAL_BUDGET_DAY_1))"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setLocation(new Location(VALID_DESTINATION_DAY_1))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .build()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teoha"
        },
        "content": "        );"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "        editedTripA \u003d TripBuilder.of(TRIP_A).setDayList(days).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(TRIP_A.equals(editedTripA));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 90,
      "ang-zeyu": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTravelPalTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonSerializableTravelPalTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTravelPalTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonSerializableTravelPal dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "                JsonSerializableTravelPal.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal travelPalFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal typicalPersonsTravelPal \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(travelPalFromFile, typicalPersonsTravelPal);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonSerializableTravelPal dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "                JsonSerializableTravelPal.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonSerializableTravelPal dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "                JsonSerializableTravelPal.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTravelPal.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 17,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTravelPalStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonTravelPalStorageTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTravelPalStorageTest\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTravelPal\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new JsonTravelPalStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonTravelPalStorage jsonAddressBookStorage \u003d new JsonTravelPalStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ReadOnlyTravelPal readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(original, new TravelPal(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(original, new TravelPal(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(original, new TravelPal(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void saveAddressBook(ReadOnlyTravelPal addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": "            new JsonTravelPalStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new TravelPal(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 20,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userPrefs.setTravelPalFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "-": 120,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonTravelPalStorage addressBookStorage \u003d new JsonTravelPalStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Test @Disabled"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * {@link JsonTravelPalStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTravelPalStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ReadOnlyTravelPal retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(original, new TravelPal(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 10,
      "-": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DayBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.EventList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Builder class to accommodate optional properties using builder pattern."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Can be used to construct {@link Day} without optional fields."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DayBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Location destination;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Expenditure totalBudget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private EventList eventList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private DayBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        eventList \u003d new EventList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static DayBuilder newInstance() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new DayBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructs a {@code DayBuilder} from the specified day."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param day Day instance to use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return new DayBuilder instance."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static DayBuilder of(Day day) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(day.getName(), day.getStartDate(), day.getEndDate(), day.getDestination());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return DayBuilder.newInstance()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setName(day.getName())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setStartDate(day.getStartDate())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setEndDate(day.getEndDate())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setLocation(day.getDestination())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setTotalBudget(day.getTotalBudget().get())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setDescription(day.getDescription().get())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setEventList(day.getEventList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayBuilder setName(Name name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayBuilder setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayBuilder setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayBuilder setDescription(Description description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayBuilder setLocation(Location location) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d location;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayBuilder setTotalBudget(Expenditure totalBudget) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayBuilder setEventList(EventList eventList) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Day build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new Day(name, startDate, endDate, description, destination, totalBudget, eventList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 79,
      "ang-zeyu": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EventBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Builder class to accommodate optional properties using builder pattern."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Can be used to construct {@link Event} without optional fields."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "class EventBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Booking booking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Location destination;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Expenditure totalBudget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Inventory inventory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructs an empty {@code EventBuilder}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private EventBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventBuilder setName(Name name) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static EventBuilder newInstance() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new EventBuilder();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructs an {@code EventBuilder} from the specified event."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param event {@code Event} to use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return new EventBuilder instance."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static EventBuilder of(Event event) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireAllNonNull(event.getName(), event.getStartDate(), event.getEndDate(), event.getDestination());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return EventBuilder.newInstance()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .setName(event.getName())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .setStartDate(event.getStartDate())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .setEndDate(event.getEndDate())"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .setLocation(event.getDestination())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .setTotalBudget(event.getTotalBudget().get())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .setInventory(event.getInventory().get())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .setBooking(event.getBooking().get());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventBuilder setStartDate(LocalDateTime startTime) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startDate \u003d startTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventBuilder setEndDate(LocalDateTime endTime) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endDate \u003d endTime;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventBuilder setBooking(Booking booking) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.booking \u003d booking;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventBuilder setLocation(Location location) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d location;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventBuilder setTotalBudget(Expenditure totalBudget) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public EventBuilder setInventory(Inventory inventory) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new Event(name, startDate, endDate, booking, totalBudget, inventory, destination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 68,
      "ang-zeyu": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TravelPalBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * A utility class to help with building TravelPal objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": " * {@code TravelPal ab \u003d new TravelPalBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TravelPalBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TravelPal travelPal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPalBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal \u003d new TravelPal();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPalBuilder(TravelPal travelPal) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.travelPal \u003d travelPal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Adds a new {@code Person} to the {@code TravelPal} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPalBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.addPerson(person);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Adds a trip to the {@code travelPal} instance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param trip Trip instance to add."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return TravelPalBuilder."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPalBuilder withTrip(Trip trip) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            travelPal.addTrip(trip);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ClashingTripException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPal build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 23,
      "-": 20,
      "ang-zeyu": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TripBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Builder class to accommodate optional properties using builder pattern."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Can be used to construct {@link Trip} without optional fields."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TripBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private LocalDateTime startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private LocalDateTime endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Location destination;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private Expenditure totalBudget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private DayList dayList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TripBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        dayList \u003d new DayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static TripBuilder newInstance() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new TripBuilder();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructs a tripBuilder instance from the specified trip."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param trip Trip to use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return new TripBuilder instance."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static TripBuilder of(Trip trip) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(trip.getName(), trip.getStartDate(), trip.getEndDate(), trip.getDestination());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return TripBuilder.newInstance()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setName(trip.getName())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setStartDate(trip.getStartDate())"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setEndDate(trip.getEndDate())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setLocation(trip.getDestination())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setTotalBudget(trip.getBudget());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //.setDayList(trip.getDayList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TripBuilder setName(Name name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TripBuilder setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TripBuilder setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TripBuilder setLocation(Location location) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d location;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TripBuilder setTotalBudget(Expenditure totalBudget) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TripBuilder setDayList(DayList dayList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.dayList \u003d dayList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Terminal method to construct new {@link Trip}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Trip build() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new Trip(name, startDate, endDate, destination, totalBudget, dayList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 73,
      "ang-zeyu": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns an {@code TravelPal} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static TravelPal getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal ab \u003d new TravelPal();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTrips.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Collection of typical trip test cases."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TypicalTrips {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Trip TRIP_A \u003d TripBuilder.newInstance().setName(new Name(\"Australia Trip\"))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setStartDate(LocalDateTime.of(2019, 2, 6, 8, 0))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setEndDate(LocalDateTime.of(2019, 2, 20, 9, 0))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setLocation(new Location(\"Australia\"))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setTotalBudget(new Expenditure(123))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setDayList(new DayList())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Trip TRIP_B \u003d TripBuilder.newInstance().setName(new Name(\"Bangkok Trip\"))"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setStartDate(LocalDateTime.of(2019, 1, 4, 15, 0))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setEndDate(LocalDateTime.of(2019, 1, 16, 0, 0))"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setLocation(new Location(\"Bangkok\"))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setDayList(new DayList())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Trip TRIP_C \u003d TripBuilder.newInstance().setName(new Name(\"Canada Trip\"))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setStartDate(LocalDateTime.of(2019, 3, 5, 10, 0))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setEndDate(LocalDateTime.of(2019, 3, 10, 6, 0))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setLocation(new Location(\"Canada\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setDayList(new DayList())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Trip TRIP_D \u003d TripBuilder.newInstance().setName(new Name(\"Denmark Trip\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setStartDate(LocalDateTime.of(2019, 4, 4, 15, 0))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setEndDate(LocalDateTime.of(2019, 4, 16, 0, 0))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setLocation(new Location(\"Denmark\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setDayList(new DayList())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Trip TRIP_E \u003d TripBuilder.newInstance().setName(new Name(\"Ethiopia Trip\"))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setStartDate(LocalDateTime.of(2019, 5, 7, 3, 0))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setEndDate(LocalDateTime.of(2019, 5, 2, 9, 0))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setLocation(new Location(\"Ethiopia\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setDayList(new DayList())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Trip TRIP_F \u003d TripBuilder.newInstance().setName(new Name(\"Finland Trip\"))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setStartDate(LocalDateTime.of(2019, 6, 2, 19, 0))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setEndDate(LocalDateTime.of(2019, 6, 4, 17, 0))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setLocation(new Location(\"Finland\"))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setDayList(new DayList())"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final Trip TRIP_G \u003d TripBuilder.newInstance().setName(new Name(\"Germany Trip\"))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setStartDate(LocalDateTime.of(2019, 7, 3, 4, 0))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setEndDate(LocalDateTime.of(2019, 7, 17, 11, 0))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setLocation(new Location(\"Germany\"))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .setDayList(new DayList())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TypicalTrips() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static TravelPal getTypicalTravelPal() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal tp \u003d new TravelPal();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "            for (Trip trip : getTypicalTrips()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "                tp.addTrip(trip);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } catch (ClashingTripException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return tp;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return tp;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static List\u003cTrip\u003e getTypicalTrips() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TRIP_A, TRIP_B, TRIP_C, TRIP_D, TRIP_E, TRIP_F));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 73,
      "ang-zeyu": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 114,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import seedu.address.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"seedu.address.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "ang-zeyu": 1
    }
  }
]
