[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003d TravelPal"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T11-4[image:https://api.travis-ci.org/AY1920S1-CS2103T-T11-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "https://ci.appveyor.com/project/ang-zeyu/main[image:https://ci.appveyor.com/api/projects/status/nuedurfohk4st6o4?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T11-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T11-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* What is _TravelPal_? First and foremost, it is a cross-platform desktop application for those who love to plan and micromanage their travels!"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* It includes various features to help in planning the trip beforehand, such as an itinerary planner, a pre-trip inventory manager, bookings and expense manager."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* During the trip, there is also an inbuilt diary application that allows the user to record details of the trip, and a contacts manager to store important contacts related to the trip."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* In addition, it’s primary preferred form of input from the user is the Command Line Interface (CLI), but it also provides a Graphical User Interface (GUI) for those who like to use alternative inputs, such as a mouse. Jump to the quick start to get started!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cLearningOutcomes#, Learning Outcomes\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "* Original code source was from AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "ang-zeyu": 11
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    String javaFxVersion \u003d \u002711.0.2\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    archiveName \u003d \u0027travelpal.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 153,
      "ang-zeyu": 2
    }
  },
  {
    "path": "config/travis/deploy_github_pages.sh",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "#!/bin/sh"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "set -o errexit # exit with nonzero exit code if any line fails"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "if [ -z \"$GITHUB_TOKEN\" ]; then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  exit 0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "fi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "set -o nounset # exit if variable is unset"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "cd build/docs/html5"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "git init"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.name \u0027Deployment Bot (Travis)\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "git config user.email \u0027deploy@travis-ci.org\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "git config credential.helper \u0027store --file\u003d.git/credentials\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if git ls-remote --exit-code --heads upstream gh-pages; then"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \u0027Reset to gh-pages branch\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    git fetch --depth\u003d1 upstream gh-pages"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    git reset upstream/gh-pages"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \u0027Creating new gh-pages branch\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    git checkout --orphan gh-pages"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "else # error occurred"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo \u0027Error occured, ls-remote exit code is\u0027"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    echo $?"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    exit $?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "# Exit if there are no changes to gh-pages files."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    echo \u0027No changes to GitHub Pages files; exiting.\u0027"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    exit 0"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "fi"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "git add -A ."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "git push --quiet upstream HEAD:gh-pages"
      }
    ],
    "authorContributionMap": {
      "-": 42,
      "ang-zeyu": 4
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "TravelPal was developed by the https://github.com/AY1920S1-CS2103T-T11-4[AY1920S1-CS2103T-T11-4] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Ang Ze Yu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "image::ang-zeyu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/ang-zeyu[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: Logic, Deliverables and deadlines"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Derrick"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "image::teoha.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/teoha[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: Model, Storage"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Sakshi"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "image::sakshipradyumn.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/SakshiPradyumn[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: Testing, Integration"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Tianyi"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "image::arjunwangty.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/arjunwangty[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d\u003d Karan"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "image::Portrait_placeholder.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "{empty}[https://github.com/eizon05[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "Responsibilities: Code Quality, Documentation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "teoha": 5,
      "-": 32,
      "arjunwangty": 14,
      "ang-zeyu": 4
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T11-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* *Email us* : You can also reach us at the following email addresses:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "eizon05"
        },
        "content": "1. `e0322678 [at] u.nus.edu` (Ze Yu\u0027s email)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "eizon05"
        },
        "content": "2. `e0313722 [at] u.nus.edu` (Sakshi\u0027s email)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "eizon05"
        },
        "content": "3. `e0310242 [at] u.nus.edu` (Derrick\u0027s email)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "eizon05"
        },
        "content": "4. `e0322921 [at] u.nus.edu` (Tianyi\u0027s email)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "eizon05"
        },
        "content": "5. `e0311234 [at] u.nus.edu`(Karan\u0027s email)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "eizon05"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "eizon05"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "eizon05": 9,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Target user profile:**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Has a need to manage multiple trips"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Prefers using a notebook to other types"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Frequently uses the computer while overseas"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Wants to micromanage all parts of their trips"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Wants to plan all details of the trip before leaving"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "teoha"
        },
        "content": "  - Wants to manage a trip even without an internet connection"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Value proposition:** Able to micromanage a trip and access one’s plans"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teoha"
        },
        "content": "more conveniently than traditional forms of trip planning"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "teoha"
        },
        "content": "image::us1.PNG[]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "teoha"
        },
        "content": "image::us2.PNG[]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "teoha"
        },
        "content": "image::us3.PNG[]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "teoha"
        },
        "content": "image::us4.PNG[]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "teoha"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Use case: UC1 - Add Trip**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to **Trip Manager** to list trips"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal shows a list of **Trips**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User requests to add a specific **Trip** to the list"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  User \u003cspan class\u003d\"underline\"\u003eedits the **Trip** (UC2)\u003c/span\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teoha"
        },
        "content": "5.  TravelPal adds the **Trip**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teoha"
        },
        "content": "6.  TravelPal shows the list of **Trips**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a. The trip added clashes with another trip"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a2. TravelPal does not discard information the user has provided"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a3. TravelPal displays the **Edit Trip** page containing the user’s"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "teoha"
        },
        "content": "previous input"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "teoha"
        },
        "content": "5a4. TravelPal requests the user to change the dates of the **Trip**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 5a1-5a2 are repeated until no clashes occur between trips"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003cspan class\u003d\"underline\"\u003eUse case: UC2 – Edit Trip\u003c/span\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User chooses to edit specific **Trip**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  Travelpal shows **Edit Trip Screen** with fields to edit/enter"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User edits the information in the specified **Trip**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  User submits the details and confirms the edit"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Use case ends"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. User enters an invalid field"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not edit invalid field"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 2"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b. User requests to list of **Days** in the trip"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b1. TravelPal shows a list of days to the user (can be empty)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b2. User chooses to \u003cspan class\u003d\"underline\"\u003eadd/edit/delete (UC4/5/6)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Day**\u003c/span\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 4"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "teoha"
        },
        "content": "4b. User leaves necessary information empty"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a2. TravelPal does not submit the details and does not confirm the edit"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a3. User enters new data"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 4a1-4a3 are repeated until the data entered are non empty"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Use case: UC3 – Delete Trip**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to **Trip Manager** to list **Trips**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal shows a list of **Trips**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User requests to delete a specific **Trip** in the list"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  TravelPal deletes the **Trip**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "teoha"
        },
        "content": "`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "teoha"
        },
        "content": "2a. The list is empty"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. The **Name** provided is invalid"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not delete any trips"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Use case: UC4 – Add Day**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User chooses to add a **Day** to a specified **Trip**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  User _edits the day (UC5)_"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  TravelPal saves the **Day**"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a **Day** added clashes with other days in the **Trip**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not discard information the user has provided"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a3. TravelPal displays the **Edit Day** page containing the user’s"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "teoha"
        },
        "content": "input"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a4. TravelPal requests the user to change the date of the **Day**"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 3a1 – 3a4 are repeated until the user provided non clashing date"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Use case: UC5 – Edit Day**"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to edit specific **Day**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal shows the **Edit Day** page with fields to enter"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User edits information in the specified **Day**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  User submits and confirms the edit"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. User enters an invalid field"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not edit invalid field"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 2"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b. User requests to list of **Events** in the trip"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b1. TravelPal shows a list of **Events** to the user (can be empty)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b2. User chooses to _add/edit/delete (UC 7/8/9) **Event**_"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 4"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "teoha"
        },
        "content": "4b. User leaves necessary information empty"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a2. TravelPal does not submit the details and does not confirm the edit"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a3. User enters new data"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 4a1-4a3 are repeated until the data entered are correct"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "teoha"
        },
        "content": "**User case: UC6 – Delete Day**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to delete a specific **Day** in the list"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal deletes the **Day**"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "teoha"
        },
        "content": "2a. The list is empty"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. The **Name** provided is invalid"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not delete any **Day**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "teoha"
        },
        "content": "**User case: UC7 – Add Event**"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User chooses to add a **Event** to a specified **Day**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  User _edits the event (UC5)_"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  TravelPal saves the **Event**"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a **Event** added clashes with other **Events** in the **Day**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not discard information the user has provided"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a3. TravelPal displays the **Edit Event** page containing the user’s"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "teoha"
        },
        "content": "input"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a4. TravelPal requests the user to change the date of the **Event**"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 3a1 – 3a4 are repeated until the user provided non clashing date"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "teoha"
        },
        "content": "**User case UC8 – Edit Event**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to edit specific **Day**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal shows the **Edit Day** page with fields to enter"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  User edits information in the specified **Day**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  User submits and confirms the edit"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. User enters an invalid field"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not edit invalid field"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 2"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b. User requests to list of **Events** in the **trip**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b1. TravelPal shows a list of **Events** to the user (can be empty)"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "teoha"
        },
        "content": "3b2. User chooses to _add/edit/delete (UC 7/8/9) **Event**_"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case continues at step 4"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "teoha"
        },
        "content": "4b. User leaves necessary information empty"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a2. TravelPal does not submit the details and does not confirm the edit"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "teoha"
        },
        "content": "4a3. User enters new data"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "teoha"
        },
        "content": "Steps 4a1-4a3 are repeated until the data entered are non empty"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "teoha"
        },
        "content": "**User case UC9 – Delete Event**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "teoha"
        },
        "content": "***MSS***"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  User requests to delete a specific **Event** in the list"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  TravelPal deletes the **Event**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003e Use case ends"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "teoha"
        },
        "content": "***Extensions***"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "teoha"
        },
        "content": "2a. The list is empty"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a. The **Name** provided is invalid"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a1. TravelPal shows an error message"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "teoha"
        },
        "content": "3a2. TravelPal does not delete any **Event**"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "teoha"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "teoha"
        },
        "content": "1.  Should work on any [mainstream OS] as"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "teoha"
        },
        "content": "    long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "teoha"
        },
        "content": "2.  A user with above average typing speed for regular English text"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "teoha"
        },
        "content": "    (i.e. not code, not system admin commands) should be able to"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "teoha"
        },
        "content": "    accomplish most of the tasks faster using commands than using the"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "teoha"
        },
        "content": "    mouse."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "teoha"
        },
        "content": "3.  Should be able to hold up to 30 trips without a noticeable"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "teoha"
        },
        "content": "    sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "teoha"
        },
        "content": "4.  A user familiar with travelling should be able to navigate the app"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "teoha"
        },
        "content": "    easily"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "teoha"
        },
        "content": "5. \tA novice user should be able to navigate without prior experience"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "teoha"
        },
        "content": "6.\tApplication does not depend on online resources to operate"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "teoha"
        },
        "content": "7.\tProducts is not required to make decisions for the user"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "teoha"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "teoha"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "teoha"
        },
        "content": "**TravelPal** – Our cross-platform desktop application for those who"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "teoha"
        },
        "content": "love to plan and micromanage their travels"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "teoha"
        },
        "content": "**CLI** – Command Line Interface. CLI is a command line program that"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "teoha"
        },
        "content": "accepts text input to execute operating system functions."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "teoha"
        },
        "content": "**GUI** – Graphical User Interface. The graphical user interface is a"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "teoha"
        },
        "content": "form of user interface that allows users to interact"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "teoha"
        },
        "content": "**OS** - An operating system, or \"OS,\" is software that communicates"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "teoha"
        },
        "content": "with the hardware and allows other programs to run"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "teoha"
        },
        "content": "**Mainstream OS** - Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "teoha": 296,
      "-": 388
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d TravelPal - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "eizon05"
        },
        "content": "By: `Team 11-4`      Since: `In Development`      Licence: `None`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "eizon05"
        },
        "content": "What is TravelPal? First and foremost, it is a cross-platform desktop application for those who love to plan and micromanage their travels. It includes various features to help in planning the trip beforehand, such as an itinerary planner, a pre-trip inventory manager, bookings and expense manager. During the trip, there is also an inbuilt diary application that allows the user to record details of the trip, and a contacts manager to store important contacts related to the trip. In addition, it’s primary preferred form of input from the user is the Command Line Interface (CLI), but it also provides a Graphical User Interface (GUI) for those who like to use alternative inputs, such as a mouse. Jump to the \u003c\u003cQuick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Address Book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a contact named `John Doe` to the Address Book."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "eizon05"
        },
        "content": "*General Command tips*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "eizon05"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Most commands are in the format of \u003ccommand\u003e \u003cargument1\u003e \u003cargument2\u003e \u003c...\u003e."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** \u003ccommand\u003e is case insensitive, so typing it in any combination of UPPER_CASE or lower_case will work."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** When an argument is optional, it will be tagged be enclosed in square brackets [...] instead of angle brackets \u003c...\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** When required, a separator / delimiter between arguments will be displayed with *separator*."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Commands support tab-autocomplete when appropriate. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Autocompletion for commands : For example, typing he then pressing tab will autocomplete the command to help. "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "eizon05"
        },
        "content": "**Autocompletion for separators : When a command requires a separator, and the command name is already in the text input, pressing tab again will append the separator automatically."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Commands help popup"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Once the command name is already in the text input, a handy, non-intrusive popup will appear slightly above the text input."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** You can disable this feature in the user preferences."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Leading and trailing white spaces in the inputted command are ignored."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d General commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* help : brings a pdf version of the user guide"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* goto \u003cpage\u003e : all navigation between pages in the app follows this format. \u003cpage\u003e will be detailed in each of the relevant sections"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* undo : this will undo the last undoable operation attempted by the user, prompting the user with the details of the operation first."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* exit : this will exit the program, discarding any unsaved changes."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d User preferences"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* To access the user preferences gui, you can :"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Click the user icon in the top right of the app"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Type the command “preferences”"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* To change preferences, you can :"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** As per the user interface, you can click on various fields and edit them."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Use the command edit \u003cfield\u003e \u003cvalue\u003e, where field is the field you want to edit as shown in the interface, and value is the respective value for the field, as detailed below."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Types of fields :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Checkboxes \u0026 toggles : edit \u003cfield\u003e will toggle the current value of the checkbox"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Text fields : edit \u003cfield\u003e \u003cvalue\u003e will change the value of the checkbox to the new value specified."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** Dropdowns :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "eizon05"
        },
        "content": "*** To see the available options for a dropdown, first type edit \u003cfield\u003e "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "eizon05"
        },
        "content": "*** To change the value, type edit \u003cfield\u003e \u003cvalue\u003e, where \u003cvalue\u003e is one of the options shown, or the number of the option in the order in which they were shown."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Trip manager"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "eizon05"
        },
        "content": "The trip manager is the main starting ground of the application. Here, the user is able to create, delete and archive trips. There is also an archive section, where the archived trips are displayed exclusively."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* create \u003cname of trip\u003e : creates a new trip with specified name, then bringing up the trip creation user interface."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* delete \u003cname of trip\u003e *yes_i_am_sure* : deletes the trip with the specified name and all data associated with it."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* archive \u003cname of trip\u003e : moves the trip to the archive section of the trip manager."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* goto \u003cname of trip\u003e : enters the main day-by-day view of the trip."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Trip setup"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Trip setup is the first page in configuring a new/existing task. Upon commands to create or edit a specified trip from the Trip Manager, the user will be directed to a page where they can edit the necessary details to create a new trip. This page will contain a form with 2 necessary fields:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "eizon05"
        },
        "content": "1. Duration (Starting date, Ending date)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "eizon05"
        },
        "content": "2. Destination"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -startDate \u003cstarting Date\u003e -endDate \u003cending Date\u003e: sets the starting date and ending date of the trip being created/edited"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -dest \u003cdestination\u003e: sets the destination of the trip being created/edited"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -addDay \u003cname of day\u003e: adds a day after the last day previously added. If no days were previously added, add the first day "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Event Setup"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Event setup creates/edits properties of a specified event. It is necessary for event to contains a starting and ending time. Events contains mostly optional fields that the user can edit in future"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -name \u003cname of event\u003e: sets the name of the event"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -description \u003cdescription of event\u003e: sets the description of the event"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -startTime \u003cstarting time\u003e: sets the starting time of the event"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -endingTime \u003cending time\u003e: sets the ending time of the event"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -expenditure: sets the current known expenditure for a single event"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Itinerary"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "eizon05"
        },
        "content": "tinerary contains commands to view the list of relevant event/day/trips. The order can be changed by using different commands"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* list -id \u003cid of trip\u003e: Lists the days of a trip in chronological order"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* list -d \u003cid of trip\u003e -day \u003cindex of day\u003e: Lists the events of a day chronological order"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Additional tags:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* byExpenses: list all elements by expenses, from highest to lowest"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* byAlphabetical: list all elements by the alphabetical order of their names"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Expense Manager"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Expense manager records the expenditure by the user. Expenses are connected to bookings/events to automatically update the current known expenditure for any date/trip/event. There are two types of expenditure: 1. Planned expenditure 2. Miscellaneous/Unplanned expenditure"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -event \u003cindex of event\u003e -spend \u003camount spent\u003e: sets the total amount spent during an event which was unplanned"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -day \u003cindex of day\u003e -spent \u003camount spent\u003e: sets the total: sets the total amount spent during a day which was not planned"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Additional tags:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* time \u003ctime of expense\u003e: time which the expenditure occurred"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Bookings Manager"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Bookings manager manages bookings and reservations made by the user. The bookings under this feature include hotel reservations and transport bookings (flight, train and bus)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -name \u003cname of booking\u003e: sets the name of the booking"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -description \u003cdescription of booking\u003e: sets the description of the booking"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -from \u003ccheck-in time/date\u003e: sets the starting date and time of a hotel booking"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -to \u003ccheck-out time/date\u003e: sets the ending date and time of a hotel booking"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -time \u003cdeparture time\u003e: sets the departure time of a transport booking"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* edit -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e -expenditure: sets the known expenditure of a booking"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Contacts Manager"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "eizon05"
        },
        "content": "Throughout the Bookings Manager, there will be many contacts which you will come across. Contacts Manager helps in easy management of such contacts along with extra contacts the user wishes to enter. Default contacts include the Emergency Contacts of Police, Ambulance and Fire Brigade of the area."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* addcontact -id \u003cid of trip\u003e -booking \u003cindex of booking\u003e - name [name of the contact] -number [contact number] -email [email address]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Diary [coming in v2.0]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d Pre-trip Inventory Manager [coming in v2.0]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d General info"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Save data:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** The data of the trips is saved in the data directory located in the same directory as where TravelPal.jar is. "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** The data is stored in a human readable json format, allowing manual editing of the data files using a seperate text editor."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "eizon05"
        },
        "content": "* Most info, where relevant, can be sent to a printer or saved in pdf format, if the info is needed while travelling without your computer."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "eizon05"
        },
        "content": "** The pdfs are output in the output directory located in the same directory as TravelPal.jar"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "eizon05"
        },
        "content": "\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "eizon05": 88,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.storage.*;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TravelPal ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TravelPalStorage travelPalStorage \u003d new JsonTravelPalStorage(userPrefs.getTravelPalFilePath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        storage \u003d new StorageManager(travelPalStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        LogicManager logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        ui \u003d new UiManager(logic, model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        logic.setUi(ui);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Optional\u003cReadOnlyTravelPal\u003e addressBookOptional;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ReadOnlyTravelPal initialData;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TravelPal\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TravelPal\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "            initialData \u003d new TravelPal();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelPal\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "            initialData \u003d new TravelPal();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teoha"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelPal\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "teoha"
        },
        "content": "        logger.info(\"Starting TravelPal \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 14,
      "-": 161,
      "arjunwangty": 1,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String LOG_FILE \u003d \"travelpal.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 111,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_TYPE \u003d \"Invalid command type for the current page you\u0027re at! \\n %1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_INVALID_GENERIC_INDEX \u003d \"The index for the operation you provided was invalid!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                versionMatcher.group(4) !\u003d null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 112,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.TravelPalParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final TravelPalParser travelPalParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        travelPalParser \u003d new TravelPalParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assert ui !\u003d null : \"Tried to execute command without initialising ui.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Command command \u003d travelPalParser.parseCommand(commandText, model.getPageStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "            storage.saveAddressBook(model.getTravelPal());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the {@code Ui} instance associated with this {@code LogicManager} instance."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param ui Ui instance to use."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setUi(Ui ui) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.ui \u003d ui;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 45,
      "ang-zeyu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        model.setTravelPal(new TravelPal());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The page class to switch to, if any. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Class\u003c? extends MainWindow\u003e page;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, Class\u003c? extends MainWindow\u003e page) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.page \u003d page;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(feedbackToUser, showHelp, exit, null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and a page switch {@code Class} extending from {@code MainWindow} using {@code page},"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult(String feedbackToUser, Class\u003c? extends MainWindow\u003e page) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(feedbackToUser, false, false, page);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Optional\u003cClass\u003c? extends MainWindow\u003e\u003e getPage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return Optional.ofNullable(page);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 70,
      "ang-zeyu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/bookings/AddBookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.bookings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class AddBookingCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/bookings/BookingCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.bookings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class BookingCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/common/HelpCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/DeleteTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DeleteTripCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a trip from TravelPal. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_DELETE_TRIP_FAILURE \u003d \"Failed to delete your trip, \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"the index you specified is likely out of bounds!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_DELETE_TRIP_SUCCESS \u003d \"Deleted your trip : %1$s!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Index indexToDelete;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DeleteTripCommand(Index indexToDelete) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.indexToDelete \u003d indexToDelete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d model.getFilteredTripList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (indexToDelete.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToDelete \u003d lastShownList.get(indexToDelete.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            model.deleteTrip(tripToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_TRIP_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRIP_SUCCESS, tripToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof DeleteTripCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/EnterCreateTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.EditTripPage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterCreateTripCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the trip creation page of TravelPal. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered the trip creation screen.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().withNewPageType(PageType.ADD_TRIP));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS, EditTripPage.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof EnterCreateTripCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/EnterEditTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.EditTripPage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterEditTripCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the trip information editing screen\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_EDIT_TRIP_SUCCESS \u003d \" Welcome to your trip! %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Index indexToEdit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterEditTripCommand(Index indexToEdit) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.indexToEdit \u003d indexToEdit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d model.getFilteredTripList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (indexToEdit.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToEdit \u003d lastShownList.get(indexToEdit.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand.EditTripDescriptor editTripDescriptor \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new EditTripFieldCommand.EditTripDescriptor(tripToEdit);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewPageType(PageType.ADD_TRIP)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewTrip(tripToEdit)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewEditTripDescriptor(editTripDescriptor));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRIP_SUCCESS, tripToEdit), EditTripPage.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof EnterEditTripCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/EnterTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.DaysPage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterTripCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"goto\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Enters the main landing page of the trip. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_ENTER_TRIP_SUCCESS \u003d \" Welcome to your trip! %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Index indexToEnter;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterTripCommand(Index indexToEnter) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.indexToEnter \u003d indexToEnter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cTrip\u003e lastShownList \u003d model.getFilteredTripList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (indexToEnter.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_GENERIC_INDEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToEnter \u003d lastShownList.get(indexToEnter.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewPageType(PageType.ITINERARY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewTrip(tripToEnter));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ENTER_TRIP_SUCCESS, tripToEnter), DaysPage.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || other instanceof EnterTripCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/edit/CancelEditTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.TripsPage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CancelEditTripCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cancel\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Cancels editing or creating a new trip \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CANCEL_CREATE_SUCCESS \u003d \"Cancelled creating the trip!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CANCEL_EDIT_SUCCESS \u003d \"Cancelled editing the trip: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CancelEditTripCommand() { }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip currentlyEditingTrip \u003d model.getPageStatus().getTrip();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewEditTripDescriptor(null)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewPageType(PageType.TRIP_MANAGER)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .withNewTrip(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentlyEditingTrip \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(MESSAGE_CANCEL_CREATE_SUCCESS, TripsPage.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_CANCEL_EDIT_SUCCESS, currentlyEditingTrip), TripsPage.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other instanceof CancelEditTripCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/edit/DoneEditTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.TripsPage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Constructs a command that attempts to commit the current changes in the edit trip page."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DoneEditTripCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Commits your new or edited trip information \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CREATE_TRIP_SUCCESS \u003d \"Created Trip: %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_EDIT_TRIP_SUCCESS \u003d \"Edited Trip: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"All the fields must be provided!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CLASHING_TRIP \u003d \"This trip clashes with one of your other trips!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoneEditTripCommand() { }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand.EditTripDescriptor editTripDescriptor \u003d model.getPageStatus().getEditTripDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToEdit \u003d model.getPageStatus().getTrip();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Trip tripToAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (editTripDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (tripToEdit \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                //buildTrip() requires all fields to be non null, failing which NullPointerException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                //is caught below"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripToAdd \u003d editTripDescriptor.buildTrip();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.addTrip(tripToAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                //edit the current \"selected\" trip"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripToAdd \u003d editTripDescriptor.buildTrip(tripToEdit);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.setTrip(tripToEdit, tripToAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            model.setPageStatus(model.getPageStatus()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .withNewEditTripDescriptor(null)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    .withNewPageType(PageType.TRIP_MANAGER));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_TRIP_SUCCESS, tripToAdd), TripsPage.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (NullPointerException | TripNotFoundException ex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ClashingTripException ex) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CommandResult(MESSAGE_CLASHING_TRIP);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return other instanceof DoneEditTripCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trips/edit/EditTripFieldCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.commands.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Constructs a command that attempts to modify the current values in the edit trip page."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * It overwrites each of the values of the current pageStatus editTripDescriptor with"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * the provided editTripDescriptor\u0027s values if they are specified."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditTripFieldCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits or creates the details of the trip \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"by the index number used in the displayed trip list in the trip manager. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to must be provided!\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_EDIT_SUCCESS \u003d \"Edited the current form:%1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final EditTripDescriptor editTripDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param editTripDescriptor details to edit the person with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditTripFieldCommand(EditTripDescriptor editTripDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(editTripDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.editTripDescriptor \u003d editTripDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripDescriptor currentDescriptor \u003d model.getPageStatus().getEditTripDescriptor();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripDescriptor newEditTripDescriptor \u003d currentDescriptor \u003d\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                ? new EditTripDescriptor(editTripDescriptor)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                : new EditTripDescriptor(currentDescriptor, editTripDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setPageStatus("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                model.getPageStatus().withNewEditTripDescriptor(newEditTripDescriptor));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_SUCCESS, editTripDescriptor));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!(other instanceof EditTripFieldCommand)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand e \u003d (EditTripFieldCommand) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return editTripDescriptor.equals(e.editTripDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Stores the details to edit the trip with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static class EditTripDescriptor {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private LocalDateTime startDate;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private LocalDateTime endDate;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Location destination;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        private Expenditure totalBudget;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditTripDescriptor() {}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditTripDescriptor(EditTripDescriptor toCopy) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setDestination(toCopy.destination);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setBudget(toCopy.totalBudget);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditTripDescriptor(Trip toCopy) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setName(toCopy.getName());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setStartDate(toCopy.getStartDate());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setEndDate(toCopy.getEndDate());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setDestination(toCopy.getDestination());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setBudget(toCopy.getBudget());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Overwrite constructor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Constructs a new {@code EditTripDescriptor} using an {@code oldDescriptor}, overwritten with"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * values of the {@code newDescriptor} where they exist."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @param oldDescriptor Old {@code EditTripDescriptor} to use."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @param newDescriptor New {@code EditTripDescriptor} to use."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public EditTripDescriptor(EditTripDescriptor oldDescriptor, EditTripDescriptor newDescriptor) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setName(newDescriptor.name \u003d\u003d null"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ? oldDescriptor.name"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    : newDescriptor.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setStartDate(newDescriptor.startDate \u003d\u003d null"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ? oldDescriptor.startDate"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    : newDescriptor.startDate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setEndDate(newDescriptor.endDate \u003d\u003d null"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ? oldDescriptor.endDate"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    : newDescriptor.endDate);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setDestination(newDescriptor.destination \u003d\u003d null"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ? oldDescriptor.destination"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    : newDescriptor.destination);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            setBudget(newDescriptor.totalBudget \u003d\u003d null"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ? oldDescriptor.totalBudget"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    : newDescriptor.totalBudget);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Builds a new {@code Trip} instance."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Requires name, startDate, destination and budget to have been set minimally."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @return New {@code Trip} created."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Trip buildTrip() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            requireAllNonNull(name, startDate, endDate, destination, totalBudget);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new Trip(name, startDate, endDate, destination, totalBudget, new DayList());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Builds an edited {@code Trip} instance from this {@code EditTripDescriptor}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Uses the original trip information first, overwriting where the values exist."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @param trip Source {@code Trip} instance."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * @return Edited {@code Trip} instance."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Trip buildTrip(Trip trip) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Name tripName \u003d trip.getName();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            LocalDateTime startDate \u003d trip.getStartDate();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            LocalDateTime endDate \u003d trip.getEndDate();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Location destination \u003d trip.getDestination();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Expenditure budget \u003d trip.getBudget();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.name !\u003d null) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripName \u003d this.name;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.startDate !\u003d null) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                startDate \u003d this.startDate;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.endDate !\u003d null) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                endDate \u003d this.endDate;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.destination !\u003d null) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                destination \u003d this.destination;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (this.totalBudget !\u003d null) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                budget \u003d this.totalBudget;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new Trip(tripName, startDate, endDate, destination, budget, trip.getDayList());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, startDate, endDate, destination, totalBudget);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Name getName() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setStartDate(LocalDateTime startDate) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return startDate;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setEndDate(LocalDateTime endDate) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //end date is optional, but return null to conform with the rest."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return endDate;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setDestination(Location destination) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.destination \u003d destination;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Location getDestination() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return destination;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setBudget(Expenditure totalBudget) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public Expenditure getBudget() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return totalBudget;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (!(other instanceof EditCommand.EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            EditTripDescriptor e \u003d (EditTripDescriptor) other;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getDestination().equals(e.getDestination())"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 getBudget().equals(e.getBudget());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (name !\u003d null) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                builder.append(\" Name of trip: \").append(name);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (startDate !\u003d null) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                builder.append(\" Start date: \").append(ParserDateUtil.getDisplayTime(startDate));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (endDate !\u003d null) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                builder.append(\" End date: \").append(ParserDateUtil.getDisplayTime(endDate));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (destination !\u003d null) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                builder.append(\" Destination: \").append(destination);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (totalBudget !\u003d null) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                builder.append(\" Total Budget: \").append(totalBudget);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return builder.toString();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 293
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_INDEX \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_DATE_START \u003d new Prefix(\"ds/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_DATE_END \u003d new Prefix(\"de/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PageParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Represents a categorical Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public interface PageParser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses {@code command} into an exact, non-categorical {@code Parser}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * which then parses the arguments into a {@code Command} and returns the command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if {@code command} does not conform any of the expected formats"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Command parse(String command, String arguments) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserDateUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class ParserDateUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The required input date format to use. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DATE_TIME_FORMAT \u003d \"d/M/y HHmm\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The required input date format to use. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DATE_FORMAT \u003d \"d/M/y\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The required input time format to use. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String TIME_FORMAT \u003d \"HHmm\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The output format for displaying dates and times. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String DISPLAY_FORMAT \u003d \"d MMM y h:mma\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the DATE_TIME_FORMAT pattern. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the DATE_FORMAT pattern. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_FORMAT);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the TIME_FORMAT pattern. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(TIME_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The dateTime formatter that uses the DISPLAY_FORMAT pattern. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final DateTimeFormatter DISPLAY_FORMATTER \u003d DateTimeFormatter.ofPattern(DISPLAY_FORMAT);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** The error display message format to be shown if parsing fails. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d \"Invalid %1$s inputted, use %2$s.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the input string using the {@code DATE_TIME_FORMATTER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the LocalDateTime representation of the string."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dateTimeString The input string."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The localDateTime object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException If the input string format does not follow the pattern."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static LocalDateTime getDateTimeFromString(String dateTimeString) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return LocalDateTime.parse(dateTimeString.trim(), DATE_TIME_FORMATTER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FORMAT, \"date or time\", DATE_TIME_FORMAT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the input string using the {@code DATE_FORMATTER}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the LocalDateTime representation of the string."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dateString The input string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The localDateTime object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException If the input string format does not follow the pattern."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static LocalDateTime getDateFromString(String dateString) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return LocalDate.parse(dateString.trim(), DATE_FORMATTER).atStartOfDay();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FORMAT, \"date\", DATE_FORMAT));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the input string using the timeFormatter."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the LocalTime representation of the string."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param timeString The input string."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The LocalTime object."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException If the input string format does not follow the pattern."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static LocalTime getTimeFromString(String timeString) throws ParseException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return LocalTime.parse(timeString.trim(), TIME_FORMATTER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (DateTimeParseException ex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_FORMAT, \"time\", TIME_FORMAT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the string representation of the LocalDateTime object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Uses the displayFormatter and DISPLAY_FORMAT to format the string."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param dateTime The input LocalDateTime object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The string representation of the localDateTime."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static String getDisplayTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return DISPLAY_FORMATTER.format(dateTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Converts the input {@code localDateTime} using the {@code DATE_FORMATTER}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Returns the date string representation."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param localDateTime The input localDateTime."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return The string representation."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static String getStringFromDate(LocalDateTime localDateTime) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return DATE_FORMATTER.format(localDateTime);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 123,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TravelPalParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.common.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.bookings.BookingsParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.common.CommonParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.contacts.ContactsParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.diary.DiaryParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.expense.ExpenseParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.inventory.InventoryParser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.itinerary.addday.AddDayParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.itinerary.addevent.AddEventParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.itinerary.dayview.DayViewParser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.itinerary.eventview.EventViewParser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.itinerary.overallview.OverallViewParser;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.preferences.PreferencesParser;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.trips.TripManagerParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.trips.edit.EditTripParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageStatus;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TravelPalParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Message to display when the command for the page has not been implemented. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String UNKNOWN_PAGE_MESSAGE \u003d \"The commands for the page have not been implemented yet!\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Logger associated with TravelPalParser instance. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(TravelPalParser.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @param pageStatus the PageStatus instance with which to parse this input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parseCommand(String userInput, PageStatus pageStatus) throws ParseException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\").toUpperCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        PageParser commonParser;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Command commonCommand \u003d  new CommonParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return commonCommand;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            logger.info(\"User command executed was not a common command\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        PageType currentPage \u003d pageStatus.getPageType();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (currentPage) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case PREFERENCES:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new PreferencesParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case TRIP_MANAGER:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new TripManagerParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ADD_TRIP:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EditTripParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ADD_DAY:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new AddDayParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ADD_EVENT:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new AddEventParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case ITINERARY:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DayViewParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case OVERALL_VIEW:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new OverallViewParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EVENT_PAGE:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EventViewParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case PRETRIP_INVENTORY:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new InventoryParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EXPENSE_MANAGER:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new ExpenseParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DIARY:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DiaryParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case CONTACTS_MANAGER:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new ContactsParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case BOOKINGS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new BookingsParser().parse(commandWord, arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(UNKNOWN_PAGE_MESSAGE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/bookings/BookingsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.bookings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class BookingsParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/common/CommonParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CommonParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new ParseException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/contacts/ContactsParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.contacts;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class ContactsParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/diary/DiaryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DiaryParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/expense/ExpenseParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class ExpenseParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class InventoryParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/addday/AddDayParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.addday;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class AddDayParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/addevent/AddEventParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.addevent;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class AddEventParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/dayview/DayViewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.dayview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DayViewParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/eventview/EventViewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.eventview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EventViewParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/overallview/OverallViewParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.itinerary.overallview;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class OverallViewParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/preferences/PreferencesParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.preferences;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class PreferencesParser implements PageParser {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        throw new UnsupportedOperationException(getClass().getSimpleName() + \" parser not implemented yet.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/DeleteTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.DeleteTripCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DeleteTripParser implements Parser\u003cDeleteTripCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DeleteTripCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DeleteTripCommand(index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTripCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/EnterCreateTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterCreateTripCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterCreateTripParser implements Parser\u003cEnterCreateTripCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterCreateTripCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new EnterCreateTripCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/EnterEditTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterEditTripCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterEditTripParser implements Parser\u003cEnterEditTripCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterEditTripCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterEditTripCommand(index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterEditTripCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/EnterTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterTripCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EnterTripParser implements Parser\u003cEnterTripCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EnterTripCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterTripCommand(index);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EnterTripCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/TripManagerCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum TripManagerCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    CREATE,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    GOTO,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DELETE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/TripManagerParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterCreateTripCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.DeleteTripCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterEditTripCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterTripCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripManagerParser implements PageParser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EnterCreateTripCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + DeleteTripCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EnterTripCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EnterEditTripCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripManagerCommand commandType;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            commandType \u003d TripManagerCommand.valueOf(command);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case CREATE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterCreateTripParser().parse(arguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DELETE:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DeleteTripParser().parse(arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case GOTO:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterTripParser().parse(arguments);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EnterEditTripParser().parse(arguments);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/TripParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class TripParserUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the given {@code Location} is invalid."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses a {@code String budget} into a {@code Expenditure}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the given {@code Expenditure} is invalid."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static Expenditure parseBudget(String budget) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String trimmedName \u003d budget.trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!Expenditure.isValidExpenditure(trimmedName)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Expenditure(trimmedName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/CancelEditTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.CancelEditTripCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class CancelEditTripParser implements Parser\u003cCancelEditTripCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public CancelEditTripCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new CancelEditTripCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/DoneEditTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.DoneEditTripCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DoneEditTripParser implements Parser\u003cDoneEditTripCommand\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DoneEditTripCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new DoneEditTripCommand();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/EditTripCommand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum EditTripCommand {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EDIT,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    CANCEL"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/EditTripFieldParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.trips.TripParserUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INDEX;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditTripFieldParser implements Parser\u003cEditTripFieldCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditTripFieldCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_DATE_START,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_DATE_END,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_BUDGET,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_LOCATION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        PREFIX_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Optional\u003cIndex\u003e index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            index \u003d Optional.ofNullable(ParserUtil.parseIndex(argMultimap.getPreamble()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            index \u003d Optional.empty();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //        EditTripFieldCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!index.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            //edit by field specified by index only"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new UnsupportedOperationException(\"Parsing edit trip by index not yet supported.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //edit by prefixes"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand.EditTripDescriptor editTripDescriptor \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                new EditTripFieldCommand.EditTripDescriptor();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setName(TripParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_START).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setStartDate("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ParserDateUtil.getDateFromString(argMultimap.getValue(PREFIX_DATE_START).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE_END).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setEndDate("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    ParserDateUtil.getDateFromString(argMultimap.getValue(PREFIX_DATE_END).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setBudget(TripParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            editTripDescriptor.setDestination(TripParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!editTripDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(EditTripFieldCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new EditTripFieldCommand(editTripDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/trips/edit/EditTripParser.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.logic.parser.trips.edit;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.CancelEditTripCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.DoneEditTripCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.PageParser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EditTripParser implements PageParser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String MESSAGE_COMMAND_TYPES \u003d \" Available command types: \\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + EditTripFieldCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + DoneEditTripCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + CancelEditTripCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Command parse(String command, String arguments) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripCommand commandType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            commandType \u003d EditTripCommand.valueOf(command);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        switch (commandType) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case EDIT:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new EditTripFieldParser().parse(arguments);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case DONE:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new DoneEditTripParser().parse(arguments);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        case CANCEL:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return new CancelEditTripParser().parse(arguments);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_TYPE, MESSAGE_COMMAND_TYPES));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageStatus;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Replaces address book data with the data in {@code travelPal}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void setTravelPal(ReadOnlyTravelPal travelPal);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /** Returns the TravelPal */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ReadOnlyTravelPal getTravelPal();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void setPageStatus(PageStatus editedPageStatus);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "    PageStatus getPageStatus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void addTrip(Trip trip) throws ClashingTripException;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void setTrip(Trip target, Trip replacement) throws ClashingTripException, TripNotFoundException;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void deleteTrip(Trip target) throws TripNotFoundException;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "    FilteredList\u003cTrip\u003e getFilteredTripList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 14,
      "-": 83,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageStatus;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final TravelPal travelPal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final FilteredList\u003cTrip\u003e filteredTripList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private PageStatus pageStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Initializes a ModelManager with the given travelPal and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ModelManager(ReadOnlyTravelPal addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.travelPal \u003d new TravelPal(addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.pageStatus \u003d new PageStatus(PageType.TRIP_MANAGER, null, null, null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.travelPal.getPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        filteredTripList \u003d new FilteredList\u003c\u003e(this.travelPal.getTripList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this(new TravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return userPrefs.getTravelPalFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userPrefs.setTravelPalFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelPal \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTravelPal(ReadOnlyTravelPal travelPal) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.travelPal.resetData(travelPal);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ReadOnlyTravelPal getTravelPal() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal.hasPerson(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.removePerson(target);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.addPerson(person);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public FilteredList\u003cTrip\u003e getFilteredTripList() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return filteredTripList;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal.equals(other.travelPal)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setPageStatus(PageStatus pageStatus) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireNonNull(pageStatus);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.pageStatus \u003d pageStatus;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageStatus getPageStatus() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return pageStatus;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void addTrip(Trip trip) throws ClashingTripException {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.addTrip(trip);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setTrip(Trip target, Trip replacement) throws ClashingTripException, TripNotFoundException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        requireAllNonNull(target, replacement);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        travelPal.setTrip(target, replacement);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void deleteTrip(Trip target) throws TripNotFoundException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.deleteTrip(target);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 41,
      "-": 132,
      "ang-zeyu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTravelPal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "public interface ReadOnlyTravelPal {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    ObservableList\u003cTrip\u003e getTripList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Path getTravelPalFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TravelPal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.TripList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TravelPal implements ReadOnlyTravelPal {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final TripList tripList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        tripList \u003d new TripList();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPal() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Creates an TravelPal using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPal(ReadOnlyTravelPal toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void setTripList(List\u003cTrip\u003e trips){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.tripList.set(trips);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Resets the existing data of this {@code TravelPal} with {@code newData}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void resetData(ReadOnlyTravelPal newData) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        setTripList(newData.getTripList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean hasClashingTrip(Trip trip){"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return tripList.containsClashing(trip);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Removes {@code key} from this {@code TravelPal}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof TravelPal // instanceof handles nulls"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 persons.equals(((TravelPal) other).persons));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void addTrip(Trip trip) throws ClashingTripException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teoha"
        },
        "content": "        tripList.add(trip);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setTrip(Trip target, Trip replacement) throws ClashingTripException, TripNotFoundException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripList.set(target, replacement);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void deleteTrip(Trip trip) throws TripNotFoundException {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teoha"
        },
        "content": "        tripList.remove(trip);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean hasTrip(Trip trip){"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return tripList.contains(trip);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ObservableList\u003cTrip\u003e getTripList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return tripList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 40,
      "-": 111,
      "ang-zeyu": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Path travelPalFilePath \u003d Paths.get(\"data\" , \"travelpal.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setTravelPalFilePath(newUserPrefs.getTravelPalFilePath());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Path getTravelPalFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return travelPalFilePath;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setTravelPalFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.travelPalFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 travelPalFilePath.equals(o.travelPalFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return Objects.hash(guiSettings, travelPalFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + travelPalFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "ang-zeyu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appstatus/PageStatus.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.appstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class PageStatus {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final PageType pageType;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Trip trip;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Day day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final EditTripFieldCommand.EditTripDescriptor editTripDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus(PageType pageType, Trip trip, Day day,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            EditTripFieldCommand.EditTripDescriptor editTripDescriptor) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.pageType \u003d pageType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.editTripDescriptor \u003d editTripDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewPageType(PageType pageType) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(pageType, getTrip(), getDay(), getEditTripDescriptor());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewTrip(Trip trip) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), trip, getDay(), getEditTripDescriptor());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewDay(Day day) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), getTrip(), day, getEditTripDescriptor());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public PageStatus withNewEditTripDescriptor(EditTripFieldCommand.EditTripDescriptor editTripDescriptor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new PageStatus(getPageType(), getTrip(), getDay(), editTripDescriptor);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public PageType getPageType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return pageType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Trip getTrip() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return trip;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Day getDay() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public EditTripFieldCommand.EditTripDescriptor getEditTripDescriptor() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return editTripDescriptor;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 21,
      "ang-zeyu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/appstatus/PageType.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.appstatus;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public enum PageType {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    PREFERENCES,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TRIP_MANAGER,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    BOOKINGS,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    DIARY,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    CONTACTS_MANAGER,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EXPENSE_MANAGER,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    PRETRIP_INVENTORY,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ITINERARY,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    EVENT_PAGE,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    OVERALL_VIEW,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ADD_TRIP,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ADD_DAY,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    ADD_EVENT"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Accomodation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Accomodation extends Booking{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Activities.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Activities extends Booking {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Booking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public abstract class Booking {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/BookingList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class BookingList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //implements Iterable\u003cBooking\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/RestaurantBooking.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class RestaurantBooking extends Booking {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/booking/Travel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.booking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Travel extends Booking {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/DuplicateEntityExcpetion.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DuplicateEntityExcpetion {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/Inventory.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Inventory {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final Name name;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Inventory(Name name) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/InventoryList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class InventoryList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/inventory/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ConsecutiveOccurrenceList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public abstract class ConsecutiveOccurrenceList\u003cT\u003e implements Iterable\u003cT\u003e{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public abstract boolean contains(T toCheck);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public abstract boolean containsClashing(T toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void add(T toAdd) throws ClashingTripException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void set(T target, T edited) throws TripNotFoundException, ClashingTripException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void remove(T toRemove) throws TripNotFoundException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(ConsecutiveOccurrenceList\u003cT\u003e replacement){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public abstract void set(List\u003cT\u003e entities);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof ConsecutiveOccurrenceList // instanceof handles nulls"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 internalList.equals(((ConsecutiveOccurrenceList) other).internalList));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public abstract boolean areConsecutive(List\u003cT\u003e persons);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 81,
      "ang-zeyu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Date.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Follows conventions of  ISO 8601 compatible week parameters, \" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \"smallest degree of separation by seconds, and it should not be blank\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final Calendar date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param day A valid day."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param month A valid month."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param hour A valid hour."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param minute A valid minute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Date (int day, int month, int year, int hour, int minute) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(hour);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(minute);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidDate(day, month, year, hour, minute), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Calendar date \u003d new Calendar.Builder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setCalendarType(\"iso8601\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setDate(year, month, day)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .setTimeOfDay(hour, minute, 0, 0)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Date (java.util.Date date){"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.date \u003d calendar;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidDate (int day, int month, int year, int hour, int minute) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        boolean isValidDay \u003d day \u003c\u003d 31 \u0026\u0026 day \u003e\u003d 1;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        boolean isValidMonth \u003d month \u003c\u003d12 \u0026\u0026 month \u003e\u003d 1;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        boolean isValidYear \u003d year \u003e\u003d0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        boolean isValidHour \u003d hour \u003e\u003d0 \u0026\u0026 hour \u003c\u003d 23;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        boolean isValidMinute \u003d minute \u003e\u003d 0 \u0026\u0026 minute \u003c\u003d 59;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return isValidDay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 isValidMonth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 isValidYear"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 isValidHour"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 isValidMinute;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidDate (java.util.Date date){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        calendar.setTime(date);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return isValidDate(calendar.get(Calendar.DAY_OF_WEEK)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "                , calendar.get(calendar.get(Calendar.MONTH))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "                , calendar.get(Calendar.YEAR)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "                , calendar.get(Calendar.HOUR_OF_DAY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "                , calendar.get(Calendar.MINUTE)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int compareTo(Date date){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return this.date.compareTo(date.date);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Description.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid email."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 description.equals(((Description) other).description)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return description.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Expenditure.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Expenditure {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Expenditure can take any positive numerical value with \""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            + \"no more than 2 decimal places, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[+]?[0-9]+([.][0-9]{1,2})?$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final Double value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs an {@code Expenditure}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param value A valid expenditure."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Expenditure(String value) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidExpenditure(value), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.value \u003d Double.parseDouble(value);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Expenditure(double value){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.value \u003d (double) Math.round(value * 100) / 100;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid expenditure."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidExpenditure(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidExpenditure(double test){"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Expenditure // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 value.equals(((Expenditure) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 61,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Id.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public interface Id {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Location.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public static final String MESSAGE_CONSTRAINTS \u003d \"Location can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Constructs an {@code Address}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "         *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * @param location A valid address."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public Location(String location) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "            requireNonNull(location);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "            value \u003d location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "                    \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 52,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/Day.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.event.EventList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final EventList eventList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Day(EventList eventList){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.eventList \u003d eventList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isSameDay(Day day) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isClashingWith(Day editedDay) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/DayList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.ConsecutiveOccurrenceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.exceptions.ClashingDayException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.exceptions.DayNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DayList extends ConsecutiveOccurrenceList\u003cDay\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean contains(Day toCheck) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameDay);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean containsClashing(Day toCheck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void add(Day toAdd) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(Day targetDay, Day editedDay) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(targetDay, editedDay);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        int index \u003d internalList.indexOf(targetDay);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if(index \u003d\u003d -1){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!targetDay.isClashingWith(editedDay) \u0026\u0026 contains(editedDay)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingDayException();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.set(index, editedDay);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void remove(Day toRemove) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new DayNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(ConsecutiveOccurrenceList\u003cDay\u003e replacement) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(List\u003cDay\u003e persons) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean areConsecutive(List\u003cDay\u003e persons) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 66,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/exceptions/ClashingDayException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class ClashingDayException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/day/exceptions/DayNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.day.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class DayNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/event/Event.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.booking.Booking;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.inventory.Inventory;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Event {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Date from;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Date to;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Booking booking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Expenditure expenditure;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Inventory inventory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Event(Name name, Date from, Date to, Booking booking, Expenditure expenditure, Inventory inventory) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(name, from, to, booking, expenditure, inventory);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.from \u003d from;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.to \u003d to;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.booking \u003d booking;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.expenditure \u003d expenditure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.inventory \u003d inventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Date getFrom() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return from;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Date getTo() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return to;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Booking getBooking() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return booking;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Expenditure getExpenditure() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return expenditure;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Inventory getInventory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if both {@link Event} contain the same booking and their to and from time are the same."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isSameEvent(Event otherEvent){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (otherEvent \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return otherEvent !\u003d null"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherEvent.getBooking().equals(getBooking())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 (otherEvent.getTo().equals(getTo()) || otherEvent.getFrom().equals(getFrom()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isClashingWith(Event other){"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return (this.getFrom().compareTo(other.getTo()) \u003d\u003d -1 \u0026\u0026 this.getTo().compareTo(other.getFrom()) \u003d\u003d 1)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "                || (this.getTo().compareTo(other.getFrom()) \u003d\u003d -1 \u0026\u0026 this.getFrom().compareTo(other.getTo()) \u003d\u003d 1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/event/EventList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.event;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class EventList {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //extends ConsecutiveOccurrenceList\u003cEvent\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/trip/Trip.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class Trip {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final LocalDateTime endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final TripId tripId;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final Location destination;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final Expenditure totalBudget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final DayList dayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Trip(Name name, LocalDateTime startDate, LocalDateTime endDate,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                Location destination, Expenditure totalBudget, DayList dayList) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.dayList \u003d dayList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.tripId \u003d new TripId();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public LocalDateTime getStartDate() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public LocalDateTime getEndDate() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TripId getTripId() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return tripId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Location getDestination() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return destination;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Expenditure getBudget() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return totalBudget;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public DayList getDayList() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return dayList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns true if both {@link Trip} contain the same booking and their to and from time are the same."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * This defines a weaker notion of equality between two events."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isSameTrip(Trip otherTrip) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (otherTrip \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return otherTrip.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 otherTrip.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 otherTrip.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    \u0026\u0026 otherTrip.getDestination().equals(getDestination());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!(other instanceof Trip)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Trip otherTrip \u003d (Trip) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return otherTrip.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 otherTrip.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 otherTrip.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 otherTrip.getDestination().equals(getDestination())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teoha"
        },
        "content": "                \u0026\u0026 otherTrip.getDayList().equals(getDayList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean isClashingWith(Trip other){"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return (this.getStartDate().compareTo(other.getEndDate()) \u003d\u003d -1"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 this.getEndDate().compareTo(other.getStartDate()) \u003d\u003d 1)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                || (this.getEndDate().compareTo(other.getStartDate()) \u003d\u003d -1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u0026\u0026 this.getStartDate().compareTo(other.getEndDate()) \u003d\u003d 1);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(name.toString())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" From: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(ParserDateUtil.getDisplayTime(startDate))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" To: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(ParserDateUtil.getDisplayTime(endDate))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" Destination: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(destination.toString())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(\" Total Budget: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .append(totalBudget.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 64,
      "ang-zeyu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/trip/TripId.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TripId {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final UUID tripUuid;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    TripId() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.tripUuid \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return tripUuid.hashCode();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!(other instanceof TripId)) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return tripUuid.equals(((TripId) other).tripUuid);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "ang-zeyu": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/trip/TripList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.ConsecutiveOccurrenceList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TripList extends ConsecutiveOccurrenceList\u003cTrip\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean contains(Trip toCheck) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTrip);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean containsClashing(Trip toCheck) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isClashingWith);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void add(Trip toAdd) throws ClashingTripException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (containsClashing(toAdd)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new ClashingTripException();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void set(Trip targetTrip, Trip editedTrip) throws TripNotFoundException, ClashingTripException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(targetTrip, editedTrip);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        int index \u003d internalList.indexOf(targetTrip);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new TripNotFoundException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        internalList.remove(index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (containsClashing(editedTrip)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            internalList.add(index, targetTrip);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new ClashingTripException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        internalList.add(index, editedTrip);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void remove(Trip toRemove) throws TripNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new TripNotFoundException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(ConsecutiveOccurrenceList\u003cTrip\u003e replacement) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void set(List\u003cTrip\u003e persons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public boolean areConsecutive(List\u003cTrip\u003e persons) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 67,
      "ang-zeyu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/trip/exceptions/ClashingTripException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class ClashingTripException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/trip/exceptions/DuplicateTripException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DuplicateTripException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/trip/exceptions/TripNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.model.itinerary.trip.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripNotFoundException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Contains utility methods for populating {@code TravelPal} with sample data."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static ReadOnlyTravelPal getSampleAddressBook() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal sampleAb \u003d new TravelPal();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 5,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonAdaptedDay {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonAdaptedDay(Day day) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Day toModelType() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedEvent.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonAdaptedEvent {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTrip.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teoha"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teoha"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.Day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.day.DayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonAdaptedTrip {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Trip\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final LocalDateTime startDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final LocalDateTime endDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final String destination;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final double totalBudget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final List\u003cJsonAdaptedDay\u003e dayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonAdaptedTrip("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"startDate\")LocalDateTime startDate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"endDate\") LocalDateTime endDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"destination\")String destination,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"totalBudget\")double totalBudget,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            @JsonProperty(\"dayList\")List\u003cJsonAdaptedDay\u003e dayList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.destination \u003d destination;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.totalBudget \u003d totalBudget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if(dayList !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "            this.dayList.addAll(dayList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonAdaptedTrip(Trip source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.startDate \u003d source.getStartDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.endDate \u003d source.getEndDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.destination \u003d source.getDestination().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.totalBudget \u003d source.getBudget().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.dayList.addAll(source.getDayList()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .stream().map(JsonAdaptedDay::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "        );"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Trip toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final List\u003cDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (JsonAdaptedDay day : dayList){"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "            days.add(day.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if(name \u003d\u003d null){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if(!Name.isValidName(name)){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if(startDate \u003d\u003d null){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Start Date\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final LocalDateTime modelStartDate \u003d startDate;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (endDate \u003d\u003d null){"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"End Date\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        final LocalDateTime modelEndDate \u003d endDate;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "        if(destination \u003d\u003d null){"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if(!Location.isValidLocation(destination)){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Location modelDestination \u003d new Location(destination);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        //No check for TotalBudget (defaults to 0)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teoha"
        },
        "content": "        final Expenditure modelTotalBudget \u003d new Expenditure(totalBudget);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        DayList modelDayList \u003d new DayList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "        modelDayList.set(days);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teoha"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Trip(modelName, modelStartDate, modelEndDate,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                modelDestination, modelTotalBudget ,modelDayList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teoha"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 81,
      "ang-zeyu": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTravelPal.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": " * An Immutable TravelPal that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "@JsonRootName(value \u003d \"travelpal\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "class JsonSerializableTravelPal {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRIP \u003d \"Trip list contains duplicate trip(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static final String MESSAGE_CLASHING_TRIP \u003d \"Trip list contains clashing trip\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final List\u003cJsonAdaptedTrip\u003e trips \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Constructs a {@code JsonSerializableTravelPal} with the given persons."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public JsonSerializableTravelPal(@JsonProperty(\"trips\") List\u003cJsonAdaptedTrip\u003e trips) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.trips.addAll(trips);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts a given {@code ReadOnlyTravelPal} into this class for Jackson use."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTravelPal}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonSerializableTravelPal(ReadOnlyTravelPal source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        trips.addAll(source.getTripList().stream().map(JsonAdaptedTrip::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Converts this address book into the model\u0027s {@code TravelPal} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPal toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal travelPal \u003d new TravelPal();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "        for (JsonAdaptedTrip jsonAdaptedTrip : trips) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "            Trip trip \u003d jsonAdaptedTrip.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "            if (travelPal.hasTrip(trip)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teoha"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRIP);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teoha"
        },
        "content": "                travelPal.addTrip(trip);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (ClashingTripException ex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                throw new IllegalValueException(MESSAGE_CLASHING_TRIP);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 26,
      "-": 35,
      "ang-zeyu": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTravelPalStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": " * A class to access TravelPal data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonTravelPalStorage implements TravelPalStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTravelPalStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public JsonTravelPalStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cReadOnlyTravelPal\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cReadOnlyTravelPal\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        Optional\u003cJsonSerializableTravelPal\u003e jsonSerializableTravelPal \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teoha"
        },
        "content": "                filePath, JsonSerializableTravelPal.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!jsonSerializableTravelPal.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return Optional.of(jsonSerializableTravelPal.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void saveAddressBook(ReadOnlyTravelPal addressBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyTravelPal)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void saveAddressBook(ReadOnlyTravelPal addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTravelPal(addressBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 12,
      "-": 65,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "public interface Storage extends TravelPalStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Optional\u003cReadOnlyTravelPal\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void saveAddressBook(ReadOnlyTravelPal addressBook) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "-": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Manages storage of TravelPal data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TravelPalStorage travelPalStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public StorageManager(TravelPalStorage travelPalStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.travelPalStorage \u003d travelPalStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teoha"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelPal methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPalStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cReadOnlyTravelPal\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return readAddressBook(travelPalStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public Optional\u003cReadOnlyTravelPal\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPalStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void saveAddressBook(ReadOnlyTravelPal addressBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teoha"
        },
        "content": "        saveAddressBook(addressBook, travelPalStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public void saveAddressBook(ReadOnlyTravelPal addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPalStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 15,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TravelPalStorage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teoha"
        },
        "content": " * Represents a storage for {@link TravelPal}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "public interface TravelPalStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns TravelPal data as a {@link ReadOnlyTravelPal}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Optional\u003cReadOnlyTravelPal\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "    Optional\u003cReadOnlyTravelPal\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Saves the given {@link ReadOnlyTravelPal} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void saveAddressBook(ReadOnlyTravelPal addressBook) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyTravelPal)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "    void saveAddressBook(ReadOnlyTravelPal addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 11,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.animation.PauseTransition;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.ResultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.DaysPage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.EditDayPage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.EditEventPage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.itinerary.EventsPage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.EditTripPage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.TripsPage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.utility.PreferencesPage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public abstract class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    HelpWindow helpWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public MainWindow(String fxmlFileName, Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(fxmlFileName, primaryStage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //setAccelerators();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //Temporary hacky workaround for scene switch leading to node placement incorrect problem"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        PauseTransition t \u003d new PauseTransition(new Duration(10));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.setHeight(primaryStage.getHeight() - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.setMaximized(!primaryStage.isMaximized());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        t.setOnFinished((e) -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            logger.log(Level.WARNING, \"Hacky workaround for page switch still in use.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            primaryStage.setHeight(primaryStage.getHeight() + 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            primaryStage.setMaximized(!primaryStage.isMaximized());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        t.play();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *//*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "*/"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected abstract void fillInnerParts();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void show() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (commandResult.getPage().isPresent()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                switchWindow(commandResult.getPage().get());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void switchWindow(Class\u003c? extends MainWindow\u003e mainWindowClass) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        WindowNavigation navigation \u003d null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (TripsPage.class.equals(mainWindowClass)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            navigation \u003d TripsPage::switchTo;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else if (EditTripPage.class.equals(mainWindowClass)) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            navigation \u003d EditTripPage::switchTo;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else if (DaysPage.class.equals(mainWindowClass)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            navigation \u003d DaysPage::switchTo;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else if (EditDayPage.class.equals(mainWindowClass)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            navigation \u003d EditDayPage::switchTo;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else if (EventsPage.class.equals(mainWindowClass)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            navigation \u003d EventsPage::switchTo;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else if (EditEventPage.class.equals(mainWindowClass)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            navigation \u003d EditEventPage::switchTo;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } else if (PreferencesPage.class.equals(mainWindowClass)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            navigation \u003d PreferencesPage::switchTo;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (navigation !\u003d null) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            navigation.switchToThisWindow(primaryStage, logic, model);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 105,
      "arjunwangty": 10,
      "ang-zeyu": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.trips.TripsPage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/dummytrip.jpeg\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public UiManager(Logic logic, Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        setWindowDefaultSize(model.getGuiSettings());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            MainWindow mainWindow \u003d new TripsPage(primaryStage, logic, model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            mainWindow.show();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        showAlertDialogAndWait(primaryStage, type, title, headerText, contentText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 78,
      "arjunwangty": 5,
      "ang-zeyu": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/WindowNavigation.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of an interface supporting a window navigation operation that switches to"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * the implementing window."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public interface WindowNavigation {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    void switchToThisWindow(Stage stage, Logic logic, Model model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 9,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/CommandBox.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/CommandBox.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 75,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/NavigationSideBar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class NavigationSideBar extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static final String FXML \u003d \"Sidebar.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public NavigationSideBar() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private void handleButton1() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // switch to trip planner page"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private void handleButton2() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        // switch to bookings page"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 19,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/PersonCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on TravelPal level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 71,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/PersonListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPerson\u003e personListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(personList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    static class PersonListViewCell extends ListCell\u003cPerson\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(Person person, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(new PersonCard(person, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 43,
      "ang-zeyu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/ResultDisplay.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/StatusBarFooter.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/DateFormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.DatePicker;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a form item allowing the user to choose a date."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Backed by JavaFx\u0027s {@code DatePicker} control."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class DateFormItem extends FormItem\u003cLocalDate\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/forms/DateFormItem.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DatePicker formDateField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DateFormItem(String textFormItemName, LocalDate initialDate, Consumer\u003cLocalDate\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, executeChangeHandler);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemLabel.setText(textFormItemName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDateField.setValue(initialDate);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        splitPaneItems.add(formDateField);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public DateFormItem(String textFormItemName, Consumer\u003cLocalDate\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(textFormItemName, null, executeChangeHandler);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return formDateField.getValue();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setValue(LocalDate value) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formDateField.setValue(value);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * JavaFX handler to call when value of the form field changes."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleChange() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        executeChangeHandler.accept(getValue());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/ExpenditureFormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.Expenditure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a expenditure form item allowing the user to enter expenditure."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Backed by JavaFX\u0027s {@code TextField} control."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class ExpenditureFormItem extends FormItem\u003cExpenditure\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/forms/ExpenditureFormItem.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextField formExpenditureField;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public ExpenditureFormItem(String textFormItemName, Expenditure initialAmount, Consumer\u003cExpenditure\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, executeChangeHandler);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemLabel.setText(textFormItemName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formExpenditureField.setText(initialAmount.toString());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //tie execute changeHandler to focusedProperty"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formExpenditureField.focusedProperty().addListener((observableVal, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (!newVal) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                executeChangeHandler.accept(getValue());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        splitPaneItems.add(formExpenditureField);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public ExpenditureFormItem(String textFormItemName, Consumer\u003cExpenditure\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(textFormItemName, new Expenditure(0.0), executeChangeHandler);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public Expenditure getValue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return new Expenditure(formExpenditureField.getText());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setValue(Expenditure value) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formExpenditureField.setText(value.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/FormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a javaFX form item, consisting of a label and a form control."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * It is backed by a SplitPane, with the label on the left and item on the right."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Supports setters and getters for changing the content of the form item."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Requires all implementing classes to set the executeChangeHandler, to be executed when"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * the value of the form field changes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public abstract class FormItem\u003cT\u003e extends UiPart\u003cSplitPane\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    final ObservableList\u003cNode\u003e splitPaneItems;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /** Form field change handler that receives the form field value of type {@code T}. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Consumer\u003cT\u003e executeChangeHandler;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    Label formItemLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    FormItem(String FXML, Consumer\u003cT\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.executeChangeHandler \u003d executeChangeHandler;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        splitPaneItems \u003d this.getRoot().getItems();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        splitPaneItems.clear();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        splitPaneItems.add(formItemLabel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Retrieves the underlying value of the field."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * @return T value of the form item field."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract T getValue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     * Sets the underlying value of the field."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public abstract void setValue(T value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/components/form/TextFormItem.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.components.form;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.function.Consumer;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Abstraction of a text form item allowing the user to enter text."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Backed by JavaFX\u0027s {@code TextField} control."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TextFormItem extends FormItem\u003cString\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"components/forms/TextFormItem.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextField formTextField;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TextFormItem(String textFormItemName, String initialText, Consumer\u003cString\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML, executeChangeHandler);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemLabel.setText(textFormItemName);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formTextField.setText(initialText);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //tie execute changeHandler to focusedProperty"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formTextField.focusedProperty().addListener((observableVal, oldVal, newVal) -\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            if (!newVal) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                executeChangeHandler.accept(getValue());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        splitPaneItems.add(formTextField);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TextFormItem(String textFormItemName, Consumer\u003cString\u003e executeChangeHandler) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this(textFormItemName, \"\", executeChangeHandler);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return formTextField.getText();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public void setValue(String value) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formTextField.setText(value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/DaysPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.WindowWithSidebar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class DaysPage extends WindowWithSidebar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static final String FXML \u003d \"DaysPage.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public DaysPage(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(FXML, primaryStage, logic, model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static void switchTo(Stage stage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        DaysPage p \u003d new DaysPage(stage, logic, model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 22,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/EditDayPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.WindowWithSidebar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class EditDayPage extends WindowWithSidebar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static final String FXML \u003d \"EditDayPage.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public EditDayPage(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(FXML, primaryStage, logic, model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static void switchTo(Stage stage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        EditDayPage p \u003d new EditDayPage(stage, logic, model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 22,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/EditEventPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.WindowWithSidebar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class EditEventPage extends WindowWithSidebar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static final String FXML \u003d \"EditEventPage.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public EditEventPage(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(FXML, primaryStage, logic, model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static void switchTo(Stage stage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        EditEventPage p \u003d new EditEventPage(stage, logic, model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 22,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/itinerary/EventsPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.WindowWithSidebar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class EventsPage extends WindowWithSidebar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static final String FXML \u003d \"EventsPage.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public EventsPage(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(FXML, primaryStage, logic, model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static void switchTo(Stage stage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        EventsPage p \u003d new EventsPage(stage, logic, model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 22,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/template/WindowWithSidebar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Template class for windows with the navigation sidebar."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public abstract class WindowWithSidebar extends MainWindow {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public WindowWithSidebar(String fxmlFileName, Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(fxmlFileName, primaryStage, logic, model);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 11,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/template/WindowWithoutSidebar.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.template;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " * Template class for windows without the navigation sidebar."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public abstract class WindowWithoutSidebar extends MainWindow {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public WindowWithoutSidebar(String fxmlFileName, Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(fxmlFileName, primaryStage, logic, model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 10,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/trips/EditTripPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.CancelEditTripCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.edit.EditTripFieldCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.CommandBox;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.ResultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.StatusBarFooter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.form.DateFormItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.form.ExpenditureFormItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.form.TextFormItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.WindowWithoutSidebar;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_END;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE_START;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class EditTripPage extends WindowWithoutSidebar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static final String FXML \u003d \"EditTripPage.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem tripNameFormItem;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private TextFormItem tripDestinationFormItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DateFormItem tripStartDateFormItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private DateFormItem tripEndDateFormItem;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private ExpenditureFormItem tripTotalBudgetFormItem;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private VBox formItemsPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public EditTripPage(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(FXML, primaryStage, logic, model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(model.getAddressBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //create new trip, use fresh display data"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripNameFormItem \u003d new TextFormItem(\"Name of trip : \", nameFormValue -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                executeCommand(EditTripFieldCommand.COMMAND_WORD + \" \" + PREFIX_NAME + nameFormValue);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripStartDateFormItem \u003d new DateFormItem(\"Start date : \","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                startDate -\u003e {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        executeCommand(EditTripFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                + \" \" + PREFIX_DATE_START"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                + ParserDateUtil.getStringFromDate(startDate.atStartOfDay()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripEndDateFormItem \u003d new DateFormItem(\"End date : \","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                endDate -\u003e {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        executeCommand(EditTripFieldCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                + \" \" + PREFIX_DATE_END"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                                + ParserDateUtil.getStringFromDate(endDate.atStartOfDay()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        e.printStackTrace();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                });"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripTotalBudgetFormItem \u003d new ExpenditureFormItem(\"Total budget : \", totalBudget -\u003e {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                executeCommand(EditTripFieldCommand.COMMAND_WORD + \" \" + PREFIX_BUDGET + totalBudget);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripDestinationFormItem \u003d new TextFormItem(\"Destination : \", destinationValue -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                executeCommand(EditTripFieldCommand.COMMAND_WORD + \" \" + PREFIX_LOCATION + destinationValue);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //update with existing edit descriptor"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillFormWithModel();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        formItemsPlaceholder.getChildren().addAll("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripNameFormItem.getRoot(),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripStartDateFormItem.getRoot(),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripEndDateFormItem.getRoot(),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripTotalBudgetFormItem.getRoot(),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                tripDestinationFormItem.getRoot());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEditTripDone() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //handle edit done"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleEditCancel() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //handle cancel"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        String commandText \u003d CancelEditTripCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            executeCommand(commandText);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        } catch (ParseException | CommandException ex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            resultDisplay.setFeedbackToUser(ex.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void fillFormWithModel() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        EditTripFieldCommand.EditTripDescriptor currentEditDescriptor"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003d model.getPageStatus().getEditTripDescriptor();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentEditDescriptor \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentEditDescriptor.getName() !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            tripNameFormItem.setValue(currentEditDescriptor.getName().toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentEditDescriptor.getDestination() !\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            tripDestinationFormItem.setValue(currentEditDescriptor.getDestination().toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentEditDescriptor.getStartDate() !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            tripStartDateFormItem.setValue(currentEditDescriptor.getStartDate().toLocalDate());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentEditDescriptor.getEndDate() !\u003d null) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            tripEndDateFormItem.setValue(currentEditDescriptor.getEndDate().toLocalDate());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (currentEditDescriptor.getBudget() !\u003d null) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            tripTotalBudgetFormItem.setValue(currentEditDescriptor.getBudget());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        CommandResult executionResult \u003d super.executeCommand(commandText);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillFormWithModel();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return executionResult;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static void switchTo(Stage stage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        new EditTripPage(stage, logic, model);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 22,
      "ang-zeyu": 157
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/trips/TripCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.ParserDateUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripCard extends UiPart\u003cGridPane\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"TripCard.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripDisplayIndexLabel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripNameLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripBudgetLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripDestinationLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripStartDateLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripEndDateLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Trip trip;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Index displayedIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TripCard(Trip trip, Index displayedIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        fillTripCardLabels();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void fillTripCardLabels() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripDisplayIndexLabel.setText(displayedIndex.getOneBased() + \"\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripNameLabel.setText(trip.getName().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripBudgetLabel.setText(trip.getBudget().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripDestinationLabel.setText(trip.getDestination().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripStartDateLabel.setText(ParserDateUtil.getDisplayTime(trip.getStartDate()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripEndDateLabel.setText(ParserDateUtil.getDisplayTime(trip.getEndDate()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!(other instanceof TripCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripCard otherCard \u003d (TripCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return trip.equals(otherCard.trip)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 this.displayedIndex.equals(otherCard.displayedIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/trips/TripPane.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TripPane extends UiPart\u003cAnchorPane\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"TripPane.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Label tripName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private Trip trip;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private int displayedIndex;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public TripPane(Trip trip, int displayedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.trip \u003d trip;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.displayedIndex \u003d displayedIndex;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        this.tripName.setText(trip.getName().toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        if (!(other instanceof TripPane)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        TripPane card \u003d (TripPane) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        return trip.equals(card.trip)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u0026\u0026 this.displayedIndex \u003d\u003d card.displayedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/trips/TripsPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.trips;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.geometry.HPos;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.geometry.VPos;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.trips.EnterCreateTripCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.CommandBox;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.ResultDisplay;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.components.StatusBarFooter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.WindowWithoutSidebar;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class TripsPage extends WindowWithoutSidebar {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final String FXML \u003d \"TripsPage.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private static final int MAX_COLUMNS \u003d 5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private int nextRowToFill \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private int nextColToFill \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private GridPane tripGridPane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private Button addButton;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public TripsPage(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(FXML, primaryStage, logic, model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(model.getAddressBookFilePath());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cTrip\u003e trips \u003d model.getTravelPal().getTripList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cNode\u003e tripCards \u003d IntStream.range(0, trips.size())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .mapToObj(i -\u003e Index.fromZeroBased(i))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                .map(index -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    TripCard tripCard \u003d new TripCard(trips.get(index.getZeroBased()), index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    int column \u003d index.getZeroBased() % MAX_COLUMNS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    int row \u003d index.getZeroBased() / MAX_COLUMNS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    //set starting positions of the trip cards with index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    GridPane.setConstraints(tripCard.getRoot(), column, row,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            1, 1,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            HPos.CENTER, VPos.CENTER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                    return tripCard.getRoot();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                }).collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        tripGridPane.getChildren().addAll(FXCollections.observableArrayList(tripCards));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private void handleAddTrip() throws CommandException, ParseException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        executeCommand(EnterCreateTripCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    public static void switchTo(Stage stage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        new TripsPage(stage, logic, model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 38,
      "ang-zeyu": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/utility/PreferencesPage.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "package seedu.address.ui.utility;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.ui.template.WindowWithoutSidebar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "public class PreferencesPage extends WindowWithoutSidebar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    private static final String FXML \u003d \"PreferencesPage.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    PreferencesPage(Stage primaryStage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        super(FXML, primaryStage, logic, model);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    protected void fillInnerParts() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    public static void switchTo(Stage stage, Logic logic, Model model) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        PreferencesPage p \u003d new PreferencesPage(stage, logic, model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        p.show();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        p.fillInnerParts();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 24,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/main/resources/view/EditTripPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TravelPal\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cImage url\u003d\"@/images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cScene stylesheets\u003d\"@LightTheme.css\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cVBox fx:id\u003d\"formItemsPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cGridPane alignment\u003d\"BOTTOM_CENTER\" style\u003d\"-fx-background-color: #50514F;\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditTripDone\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Done\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleEditCancel\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Cancel\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 54
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         title\u003d\"TravelPal\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cImage url\u003d\"@/images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 54,
      "ang-zeyu": 5
    }
  },
  {
    "path": "src/main/resources/view/Sidebar.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003cVBox maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"120.0\" style\u003d\"-fx-background-color: #3e4d52#3e4d52;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "      \u003cButton mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleButton1\" prefHeight\u003d\"40.0\" prefWidth\u003d\"141.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Planner\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "      \u003cButton mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleButton2\" prefHeight\u003d\"40.0\" prefWidth\u003d\"132.0\" style\u003d\"-fx-background-color: #79a0ab#79a0ab;\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"Bookings\" textFill\u003d\"WHITE\" wrapText\u003d\"true\" VBox.vgrow\u003d\"SOMETIMES\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003cFont size\u003d\"6.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "         \u003c/font\u003e\u003c/Button\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 18
    }
  },
  {
    "path": "src/main/resources/view/TripCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cGridPane alignment\u003d\"CENTER\" gridLinesVisible\u003d\"true\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"350.0\" minWidth\u003d\"200.0\" style\u003d\"-fx-background-color: #C0BCB5;\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" percentHeight\u003d\"50.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cImageView fitHeight\u003d\"150.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cImage url\u003d\"@../images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cLabel fx:id\u003d\"tripNameLabel\" text\u003d\"Label\" GridPane.rowIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cFont name\u003d\"Book Antiqua\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cLabel fx:id\u003d\"tripBudgetLabel\" text\u003d\"Label\" GridPane.rowIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cLabel fx:id\u003d\"tripDestinationLabel\" text\u003d\"Label\" GridPane.rowIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cFont name\u003d\"Book Antiqua\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/font\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cAnchorPane prefHeight\u003d\"200.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"tripDisplayIndexLabel\" layoutX\u003d\"14.0\" layoutY\u003d\"14.0\" text\u003d\"Label\" AnchorPane.leftAnchor\u003d\"1.0\" AnchorPane.topAnchor\u003d\"1.0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cFont name\u003d\"Book Antiqua Bold\" size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cGridPane GridPane.rowIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"tripStartDateLabel\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cFont name\u003d\"Book Antiqua\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"tripEndDateLabel\" text\u003d\"Label\" wrapText\u003d\"true\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cFont name\u003d\"Book Antiqua\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cInsets bottom\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cInsets left\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 85
    }
  },
  {
    "path": "src/main/resources/view/TripManager.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TravelPal\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        \u003cImage url\u003d\"@/images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003cBorderPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003ctop\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003cVBox prefHeight\u003d\"66.0\" prefWidth\u003d\"600.0\" BorderPane.alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        \u003cchildren\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                            \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                \u003cmenus\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                \u003c/menus\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                            \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                            \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" prefHeight\u003d\"33.0\" prefWidth\u003d\"600.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                    \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003c/top\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003cleft\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003cVBox fx:id\u003d\"sidebarPlaceholder\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"290.0\" prefWidth\u003d\"120.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003c/left\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003cbottom\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\"  prefHeight\u003d\"39.0\" prefWidth\u003d\"600.0\" BorderPane.alignment\u003d\"CENTER\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003c/bottom\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\"  maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefHeight\u003d\"319.0\" prefWidth\u003d\"538.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                            \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" prefHeight\u003d\"273.0\" prefWidth\u003d\"434.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 69,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/main/resources/view/TripPane.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cLabel fx:id\u003d\"tripName\" text\u003d\"Label\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 11
    }
  },
  {
    "path": "src/main/resources/view/TripsPage.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TravelPal\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cImage url\u003d\"@/images/dummytrip.jpeg\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003cAnchorPane style\u003d\"-fx-background-color: #F2DFD7;\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cVBox style\u003d\"-fx-background-color: #F2DFD7;\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "      "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "      "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "      "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "              \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cScrollPane fitToHeight\u003d\"true\" fitToWidth\u003d\"true\" hbarPolicy\u003d\"NEVER\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #F2DFD7;\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cGridPane fx:id\u003d\"tripGridPane\" alignment\u003d\"TOP_CENTER\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" style\u003d\"-fx-background-color: #F2DFD7;\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                          \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210.0\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                              \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"210\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                          \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                          \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \u003cRowConstraints minHeight\u003d\"360.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                            \u003cRowConstraints minHeight\u003d\"360.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                          \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003c/ScrollPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cGridPane style\u003d\"-fx-background-color: #50514F;\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" percentWidth\u003d\"50.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                \u003cRowConstraints minHeight\u003d\"-Infinity\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "              \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleAddTrip\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Add Trip\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cInsets bottom\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003cButton alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" mnemonicParsing\u003d\"false\" onMouseClicked\u003d\"#handleHelp\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" text\u003d\"Help\" textAlignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"1\" GridPane.halignment\u003d\"CENTER\" GridPane.valignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cFont name\u003d\"Consolas\" size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                        \u003cInsets bottom\u003d\"2.0\" top\u003d\"2.0\" /\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                     \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "                  \u003c/Button\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "arjunwangty"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "arjunwangty": 31,
      "ang-zeyu": 65
    }
  },
  {
    "path": "src/main/resources/view/components/forms/DateFormItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.DatePicker?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.29797979797979796\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"formItemLabel\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cDatePicker fx:id\u003d\"formDateField\" onAction\u003d\"#handleChange\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 19
    }
  },
  {
    "path": "src/main/resources/view/components/forms/ExpenditureFormItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.29797979797979796\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"formItemLabel\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cTextField fx:id\u003d\"formExpenditureField\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 19
    }
  },
  {
    "path": "src/main/resources/view/components/forms/TextFormItem.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.29797979797979796\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cLabel fx:id\u003d\"formItemLabel\" text\u003d\"Label\" textAlignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            \u003cTextField fx:id\u003d\"formTextField\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ang-zeyu": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/dummytrip.jpeg\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 35,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.storage.JsonTravelPalStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonTravelPalStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teoha"
        },
        "content": "                new JsonTravelPalStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // Setup LogicManager with JsonTravelPalIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonTravelPalStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teoha"
        },
        "content": "                new JsonTravelPalIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static class JsonTravelPalIoExceptionThrowingStub extends JsonTravelPalStorage {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "teoha"
        },
        "content": "        private JsonTravelPalIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void saveAddressBook(ReadOnlyTravelPal addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 11,
      "-": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Person personInList \u003d model.getTravelPal().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.appstatus.PageStatus;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.Trip;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.ClashingTripException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.model.itinerary.trip.exceptions.TripNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "@Disabled(\"until complete refactor\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public FilteredList\u003cTrip\u003e getFilteredTripList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void deleteTrip(Trip target) throws TripNotFoundException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setTrip(Trip target, Trip replacement) throws ClashingTripException, TripNotFoundException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void addTrip(Trip trip) throws ClashingTripException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public PageStatus getPageStatus() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        public void setPageStatus(PageStatus editedPageStatus) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        //tests from AB3 ----------------------------------------------------"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public void setTravelPal(ReadOnlyTravelPal newData) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public ReadOnlyTravelPal getTravelPal() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "teoha"
        },
        "content": "        public ReadOnlyTravelPal getTravelPal() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "teoha"
        },
        "content": "            return new TravelPal();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 6,
      "-": 188,
      "ang-zeyu": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        expectedModel.setTravelPal(new TravelPal());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal expectedTravelPal \u003d new TravelPal(actualModel.getTravelPal());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(expectedTravelPal, actualModel.getTravelPal());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "-": 125
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTravelPal().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 3,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPal(model.getTravelPal()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPal(model.getTravelPal()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPal(model.getTravelPal()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new TravelPal(model.getTravelPal()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teoha"
        },
        "content": "        Person personInList \u003d model.getTravelPal().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTravelPal().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 7,
      "-": 166
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import static seedu.address.logic.commands.common.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.common.HelpCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getTravelPal(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TravelPalParserTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import seedu.address.logic.commands.common.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "@Disabled(\"until complete refactor\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "public class TravelPalParserTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "/*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    private final TravelPalParser parser \u003d new TravelPalParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": " */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 97,
      "ang-zeyu": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(new TravelPal(), new TravelPal(modelManager.getTravelPal()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userPrefs.setTravelPalFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userPrefs.setTravelPalFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal travelPal \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal differentTravelPal \u003d new TravelPal();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teoha"
        },
        "content": "        modelManager \u003d new ModelManager(travelPal, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(travelPal, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teoha"
        },
        "content": "        // different travelPal -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentTravelPal, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(travelPal, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        differentUserPrefs.setTravelPalFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(travelPal, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 9,
      "-": 120,
      "ang-zeyu": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TravelPalTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class TravelPalTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private final TravelPal travelPal \u003d new TravelPal();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(Collections.emptyList(), travelPal.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e travelPal.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(newData, travelPal);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPalStub newData \u003d new TravelPalStub(newPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e travelPal.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e travelPal.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertFalse(travelPal.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(travelPal.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertTrue(travelPal.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPal.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * A stub ReadOnlyTravelPal whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    @Disabled"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static class TravelPalStub implements ReadOnlyTravelPal {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPalStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 19,
      "-": 83,
      "ang-zeyu": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTravelPalFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "import org.junit.jupiter.api.Disabled;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "@Disabled(\"until complete refactor\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //note list references in these two tests were originally of type UniquePersonList(AB3)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons(null));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        List\u003cPerson\u003e expectedUniquePersonList \u003d new ArrayList\u003cPerson\u003e();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "    //-------------------------------------------------------------------"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 168,
      "ang-zeyu": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTravelPalTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonSerializableTravelPalTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTravelPalTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonSerializableTravelPal dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teoha"
        },
        "content": "                JsonSerializableTravelPal.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal travelPalFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal typicalPersonsTravelPal \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(travelPalFromFile, typicalPersonsTravelPal);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonSerializableTravelPal dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teoha"
        },
        "content": "                JsonSerializableTravelPal.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonSerializableTravelPal dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teoha"
        },
        "content": "                JsonSerializableTravelPal.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableTravelPal.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 13,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTravelPalStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teoha"
        },
        "content": "public class JsonTravelPalStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTravelPalStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTravelPal\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return new JsonTravelPalStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonTravelPalStorage jsonAddressBookStorage \u003d new JsonTravelPalStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ReadOnlyTravelPal readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(original, new TravelPal(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(original, new TravelPal(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(original, new TravelPal(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private void saveAddressBook(ReadOnlyTravelPal addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teoha"
        },
        "content": "            new JsonTravelPalStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new TravelPal(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 15,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ang-zeyu"
        },
        "content": "        userPrefs.setTravelPalFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "ang-zeyu": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.ReadOnlyTravelPal;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        JsonTravelPalStorage addressBookStorage \u003d new JsonTravelPalStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * {@link JsonTravelPalStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teoha"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTravelPalStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teoha"
        },
        "content": "        ReadOnlyTravelPal retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teoha"
        },
        "content": "        assertEquals(original, new TravelPal(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 8,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teoha"
        },
        "content": " *     {@code TravelPal ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teoha"
        },
        "content": "    private TravelPal travelPal;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal \u003d new TravelPal();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public AddressBookBuilder(TravelPal travelPal) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teoha"
        },
        "content": "        this.travelPal \u003d travelPal;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Adds a new {@code Person} to the {@code TravelPal} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teoha"
        },
        "content": "        travelPal.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public TravelPal build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teoha"
        },
        "content": "        return travelPal;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 10,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teoha"
        },
        "content": "import seedu.address.model.TravelPal;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teoha"
        },
        "content": "     * Returns an {@code TravelPal} with all the typical persons."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teoha"
        },
        "content": "    public static TravelPal getTypicalAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teoha"
        },
        "content": "        TravelPal ab \u003d new TravelPal();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teoha": 4,
      "-": 72
    }
  }
]
