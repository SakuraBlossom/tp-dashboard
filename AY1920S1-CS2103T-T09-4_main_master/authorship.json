[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d SELLER MANAGER Lite"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "https://travis-ci.org/AY1920S1-CS2103T-T09-4[image:https://travis-ci.org/AY1920S1-CS2103T-T09-4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "https://ci.appveyor.com/project/EugeneTeu/main/branch/master[image:https://ci.appveyor.com/api/projects/status/h3v2fp6lbwji077b/branch/master?svg\u003dtrue[Build Status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "https://coveralls.io/github/AY1920S1-CS2103T-T09-4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/AY1920S1-CS2103T-T09-4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d The ultimate management system for your business needs! Tailored to fufil the needs of the solo Handphone retailer!"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "* This is a desktop Sales Management application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "* It is a Java sample application intended for handphone sellers selling their goods on online platforms such as Carousell."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "* AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org[se-edu]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 2,
      "EugeneTeu": 8,
      "-": 26
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Seller Manager Lite was developed by the https://github.com/orgs/AY1920S1-CS2103T-T09-4/teams/developers[CS2103T T09-4] team."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Yan Wei Liang"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::ubersaiyan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty} [https://github.com/uberSaiyan[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role: Project Architect, Testing, Team Lead"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: Storage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Eugene Teu"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::eugeneteu.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty}[https://github.com/EugeneTeu[github]] [https://eugeneteu.github.io/myWebsite/[Portfolio]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role:  DevOps, deliverables and deadlines"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: Statistics generation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Yeo Dong Han"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::yeodonghan.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty}[https://github.com/yeodonghan[github]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role: Developer , Scheduling and tracking"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: Schedule + CRUD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Oon Zhi Xiang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::zhixianggg.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty}[https://github.com/zhixianggg[github]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role: Code Quality, Logic"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: Parsing + CRUD"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d\u003d\u003d Ooi Qiu Jia"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "image::qiujiaaa.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "{empty}[https://github.com/qiujiaaa[github]]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Role: Documentation, Code Coverage"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "In Charge of: CRUD + storage"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 32,
      "EugeneTeu": 29
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S1-CS2103T-T09-4/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Email us* : You can also reach us at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Yan Wei Liang e0310639@u.nus.edu`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Eugene Teu e0309299@u.nus.edu`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Yeo Dong Han e0321479@u.nus.edu`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Oon Zhi Xiang e0310291@u.nus.edu`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** `Ooi Qiu Jia e0335622@u.nus.edu`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 8,
      "-": 5
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003d Seller Manager Lite - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "By: `Team T09-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Undo/Redo feature"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Proposed Implementation"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState0.png[]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState1.png[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState2.png[]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState3.png[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoSequenceDiagram.png[]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState4.png[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoState5.png[]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommitActivityDiagram.png[]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* has a need to manage a significant number of phones, orders and customers."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* is a one-man/two-man handphone re-seller who has multiple phones to sell."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* likes single view application."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Value proposition*: Keep track of your phone, orders and customers faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *` |handphone seller |schedule my orders| deconflict and view the schedule of my sales meetings."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *` |handphone seller |generate an invoice |give my customers the invoice."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *` |handphone seller |sort my sales statistics|find out which products are selling well."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *` |handphone seller |generate sales report |track my revenues, profits and costs."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *` |handphone seller |find my handphone model easily| not waste time searching for the handphone."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller |record and track the quantity of my phones |decide when to get more phones."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller |copy the email address/handphone number of my customer easily |email them/text them easily."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`| handphone seller |use a price optimization algorithm| easily price my products."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller | find out the market price of the phones| decide what price to set for my phones."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller | generate a visualisation of my meeting schedule | have a better idea of my schedule"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller |use an auto-generated mailing list |keep track of the mails that I have to send out."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|organise my replies in terms of hot, medium, cold |find out how to best reply to a certain type of customer."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|use the trust meter system|remember which buyers cheated me before."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller|check notification dialog|see upcoming deadlines"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|add images to my handphone| better visualise my products."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|integrate the app with an e-commerce platform|automatically update my order in my app and on the platform."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|view customer profile|see the number of transactions and the types of goods they bought."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller|undo and redo|correct my mistakes."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* *`|handphone seller|import my sales data from csv file|save the trouble of manual importing."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|add, edit and delete the phones that I have|update when there is a need to."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|create a new order|schedule the order."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|cancel order|reflect the changes made by customer."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|sort statistics by brand|find out which brand is the most popular."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|generate statistics for total sales or total profit per month| find out how much I earn."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|find the details of the order that I want easily| save time searching for an order."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`* * *`|handphone seller|delete a phone that I am no longer selling| get rid of it on the database."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|track my customer age|know the suitability of my product."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "|`*`|handphone seller|use an in-built messenger to communicate with my customer| talk to them without switching to another application."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "(For all use cases below, the *System* is the `SML` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Delete customer (UC01)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1.  User requests to list customer"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2.  SML shows a list of customers"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3.  User requests to delete a specific customer in the list"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "4.  SML deletes the customer"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 3a1. SML shows an error message."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Add new phone (UC02)"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor input phone name and quantity."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. System adds phone to the list of phones."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3. System shows the new list of phones."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 1a. Actor inputs wrong date format."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 1a1. SML requests for correct data."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Check quantity of phone (UC03)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor requests to check stock of a phone."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. System displays the stock status for a phone."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 1a. System is unable to find the phone as it does not exist."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 1a1. System shows error message that phone does not exist."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Confirm order (UC04)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor requests to check stock of a phone (UC03)."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. Actor add order to the system. System displays the new order list."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3. Actor schedule order. (UC05)"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "4. Actor mark order as completed. System displays completed order message."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 2a. System is unable to add as command is missing fields."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 2a1. System shows error message that command is missing fields."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Actor schedule order (UC05)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor adds order to schedule by some identifier."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. System check for conflict in timings."
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3. System displays the scheduled order."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 2a. System finds out that there is a conflict in timing for 2 or more orders."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 2a1. System displays the 2 or more orders that have the same schedule timing."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "\u003d\u003d\u003d Use case: Actor input data via .csv file (UC06)"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "1. Actor requests to import .csv file."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "2. System loads file into memory."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "3. System reads the file and saves it."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "4. System displays the updated data."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 1a. System finds that no file is found."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "* 1b. System finds that there is an error with the formatting."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 1a1. System displays error message and does not add new data from the file."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "** 1b1. System displays error message and does not add the new data from the file."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "+"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "Use case resumes at step 1."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  Single User for each session"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  No internet required"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  Quality and helpful information/feedback upon user action"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  System should ideally respond within 5 seconds"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  System allows for wrong input from user and recovers from erroneous input"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ".  App can be downloaded and run via a jar file"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "_ {More to be added}_"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "[[order]] Order::"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "A order consisting of customer and phone"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "[[Phone]] Phone::"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "Any mobile device being sold by seller"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 175,
      "EugeneTeu": 14,
      "-": 409
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d Seller Manager Lite - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ":repoURL: https://github.com/AY1920S1-CS2103T-T09-4/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "By: `Team T09-4`      Since: `Sep 2019`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Seller Manager Lite (SML) is for those who *prefer to use a desktop app for managing their sales*. More importantly, SML is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, SML can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ".  Download the latest `sellermanagerlite.jar` https://github.com/AY1920S1-CS2103T-T09-4/main/releasesreleases[here]."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Seller Manager Lite."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *`list -c`* : lists all customer contacts"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* **`add -c`**`n/John Doe p/98765432 e/johnd@example.com a/John street, block 123, #01-01` : adds a customer named `John Doe` to SML."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* **`delete -c`**`3` : deletes the 3rd customer shown in the current list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add -c n/NAME`, `NAME` is a parameter which can be used as `add -c n/John Doe`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Lists out the commands you need to navigate SML. +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Phone Commands"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Commands that work on phones that you have in your inventory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Add a phone : `add -p`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Adds a phone or updates the inventory. +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `add -p n/NAME q/QUANTITY [p/PRICE] [t/TAG]…​`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a phone : `delete -p`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Deletes a phone from the inventory. +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `delete -p INDEX`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Find a phone : `find -p`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Returns all the information pertaining to phone with matching name. +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `find -p p/PHONE`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d List the phones : `list -p`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "List all the phones in lexicographical order. +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `list -p`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Update a phone : `update -p`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Updates the appropriate fields of a phone. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `update -p n/NAME [p/PRICE] [q/QUANTITY] [t/TAG]...`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Copy phone field : `copy -p`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Copies a phone field to clipboard. +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `copy -p \u003cfield\u003e`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Order Commands"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Commands that work on orders that you have."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Add an order : `add -o`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Adds an order to the list of orders. +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `add -o p/PHONE_NUMBER i/ITEM...`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Find an order : `find -o`"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Returns all the information pertaining to the order. +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `find -o INDEX`"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Complete an order : `complete -o`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Completes the order, order status changed to `COMPLETED`. +"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `complete -o INDEX`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Schedule an order : `schedule -o`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Schedule the order for meet up.  +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `schedule -o INDEX DD/MM/YY HHMM`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Cancel an order : `cancel -o`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Cancels the order at the specified index. +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `cancel -o INDEX`"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d List the orders : `list -o`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "List all the orders in the list. +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `list -o`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Copy order field : `copy -o`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Copies an order field to clipboard. +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `copy -o \u003cfield\u003e`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Duplicate an order : `duplicate -o`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Duplicate an order of the specified index. +"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `duplicate -o INDEX`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Customer Commands"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Commands that work on customers in your list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Add a customer : `add -c`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Adds a customer to the address book. +"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `add -c n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "A person can have any number of tags, including 0."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Delete a customer : `delete -c`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Deletes a customer in the address book. +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `delete -c INDEX`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Find a customer : `find -c`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Finds customers whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `find -c KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d List the customers : `list -c`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "List every single customer in SML. +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `list -c`"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Update a customer : `update -c`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Updates an existing customer. +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `update -c INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Copy customer field : `copy -c`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Copies a customer field to clipboard. +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `copy -c \u003cfield\u003e`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Utility Commands"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Undo : `undo`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Undo the previous command.  +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Redo : `redo`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "redo the previous command.  +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Generate stats : `generate`"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Generates the statistics either in normal viewing format or chart format (in pop-up modal dialog). +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `generate -s s/STAT -d d/ -t t/TYPE` +"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Possible stats: `general` , `bestseller` etc +"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Possible type: `view` , `graph`"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Check : `check`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Check for stock etc. For stock, see the phones that have \u003c threshold quantity.   +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `check \u003cflag\u003e` +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Possible flag: `-p` for phone stock, `check -p \u003cthreshold\u003e`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Schedule : `schedule`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Check for schedule.   +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `schedule`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Clears all entries of items, orders and customers. +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Import/export data : `import / export`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Import csv file into the application. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Export application data into csv file. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Export application stats. +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Format: `import \u003cflag\u003e \u003cfile name\u003e` / `export \u003cflag\u003e \u003cfile name\u003e` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Possible flag: `-p` for phone, `-c` for customer, `-o` for order."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "SML data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Encrypting data files `[coming in v2.0]`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Explain how the user can enable/disable data encryption"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Autocomplete  `[coming in v2.0]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Press kbd:[Tab] to autocomplete the line. (like in command line)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Notification for reminders/alerts  `[coming in v2.0]`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Notification page to show any notifications of reminders or alerts."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d\u003d Export data to PDF  `[coming in v2.0]`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "Export any of the data in SML to PDF format."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous SML folder."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Add* +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `add -c n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS [t/TAG]…`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `add -p n/NAME q/QUANTITY [p/PRICE] [t/TAG]…`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `add -o p/PHONE_NUMBER i/ITEM...`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Cancel* +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `cancel -o INDEX`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Check* +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** stock : `check -p \u003cthreshold\u003e`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Complete* +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `complete -o INDEX`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Copy* +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `copy -c \u003cfield\u003e`"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `copy -p \u003cfield\u003e`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `copy -o \u003cfield\u003e`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Delete* +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `delete -c INDEX`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `delete -p INDEX`"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Duplicate* +"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `duplicate -o INDEX`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Export* +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `export -c`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `export -p`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `export -o`"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Find* +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `find -c KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `find -p p/PHONE`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `find -o INDEX`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Generate* : `generate -s s/STAT -d d/ -t t/TYPE`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Import* +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `import -c`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `import -p`"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `import -o`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *List* +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `list -c`"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `list -p`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `list -o`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Schedule* +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** order : `schedule -o INDEX DD/MM/YY HHMM`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "* *Update* +"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** customer : `update -c INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "** phone : `update -p n/NAME [p/PRICE] [q/QUANTITY] [t/TAG]...`"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 180,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing T09-4 project  ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // return new ModelManager(new CustomerBook(), new PhoneBook(), new OrderBook(), new ScheduleBook(), userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 1,
      "-": 182,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public static final Prefix PREFIX_CONTACT \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Parses a {@code String phone} into a {@code phone}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 123,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Duplicates are not allowed (by .isSameCustomer comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CustomerBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.UniqueCustomerList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Wraps all data at the customer-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Duplicates are not allowed (by .isSameCustomer comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class CustomerBook implements ReadOnlyDataBook\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final UniqueCustomerList customers;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customers \u003d new UniqueCustomerList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CustomerBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates an CustomerBook using the Customers in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public CustomerBook(ReadOnlyDataBook\u003cCustomer\u003e toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the contents of the customer list with {@code customers}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code customers} must not contain duplicate customers."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCustomers(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.customers.setCustomers(customers);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Resets the existing data of this {@code CustomerBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void resetData(ReadOnlyDataBook\u003cCustomer\u003e newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        setCustomers(newData.getList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// customer-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the customer book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customers.contains(customer);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds a customer to the customer book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The customer must not already exist in the customer book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addCustomer(Customer c) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customers.add(c);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the customer book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(editedCustomer);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customers.setCustomer(target, editedCustomer);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Removes {@code key} from this {@code CustomerBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code key} must exist in the customer book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void removeCustomer(Customer key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customers.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customers.asUnmodifiableObservableList().size() + \" customers\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customers.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof CustomerBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 customers.equals(((CustomerBook) other).customers));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customers.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Predicate\u003cCustomer\u003e PREDICATE_SHOW_ALL_CUSTOMERS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Predicate\u003cPhone\u003e PREDICATE_SHOW_ALL_PHONES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Predicate\u003cOrder\u003e PREDICATE_SHOW_ALL_ORDER \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    Predicate\u003cSchedule\u003e PREDICATE_SHOW_ALL_SCHEDULE \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ////customer operations"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces address book data with the data in {@code customerBook}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns the CustomerBook */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cCustomer\u003e getCustomerBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a customer with the same identity as {@code customer} exists in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasCustomer(Customer customer);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given customer."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The customer must exist in the address book."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deleteCustomer(Customer target);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given customer."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code customer} must not already exist in the address book."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addCustomer(Customer customer);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given customer {@code target} with {@code editedCustomer}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the customer book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setCustomer(Customer target, Customer editedCustomer);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered customer list */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cCustomer\u003e getFilteredCustomerList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered customer list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// phone operations"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces phone book data with the data in {@code phoneBook}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setPhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns the PhoneBook */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cPhone\u003e getPhoneBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a phone with the same identity as {@code phone} exists in the phone book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasPhone(Phone phone);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given phone."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone must exist in the phone book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deletePhone(Phone target);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given phone."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code phone} must not already exist in the address book."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addPhone(Phone phone);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given phone {@code target} with {@code editedPhone}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone identity of {@code editedPhone} must not be the same as another existing phone in the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setPhone(Phone target, Phone editedPhone);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered phone list */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cPhone\u003e getFilteredPhoneList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered phone list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredPhoneList(Predicate\u003cPhone\u003e predicate);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ////order operations"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces order book data with the data in {@code orderBook}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cOrder\u003e getOrderBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a order with the same identity as {@code order} exists in the address book."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasOrder(Order order);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given order."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order must exist in the address book."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deleteOrder(Order target);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given order."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code order} must not already exist in the address book."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addOrder(Order order);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given order {@code target} with {@code editedOrder}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the address book."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setOrder(Order target, Order editedOrder);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered order list */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ////schedule operations"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces schedule book data with the data in {@code scheduleBook}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ReadOnlyDataBook\u003cSchedule\u003e getScheduleBook();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a schedule with the same identity as {@code schedule} exists in the address book."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    boolean hasSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Deletes the given schedule."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule must exist in the address book."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void deleteSchedule(Schedule target);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds the given schedule."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code schedule} must not already exist in the address book."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void addSchedule(Schedule schedule);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given schedule {@code target} with {@code editedSchedule}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule identity of {@code editedSchedule} must not be the same as another existing schedule."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void setSchedule(Schedule target, Schedule editedSchedule);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered schedule list */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cSchedule\u003e getFilteredScheduleList();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Updates the filter of the filtered schedule list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 188,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Represents the in-memory model of the SML data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final CustomerBook customerBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final PhoneBook phoneBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final OrderBook orderBook;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final ScheduleBook scheduleBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cCustomer\u003e filteredCustomers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cPhone\u003e filteredPhones;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final FilteredList\u003cSchedule\u003e filteredSchedules;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.customerBook \u003d new CustomerBook();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.phoneBook \u003d new PhoneBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.orderBook \u003d new OrderBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.scheduleBook \u003d new ScheduleBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredCustomers \u003d new FilteredList\u003c\u003e(this.customerBook.getList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredPhones \u003d new FilteredList\u003c\u003e(this.phoneBook.getList());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredOrders \u003d new FilteredList\u003c\u003e(this.orderBook.getList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredSchedules \u003d new FilteredList\u003c\u003e(this.scheduleBook.getList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ModelManager(ReadOnlyDataBook\u003cCustomer\u003e customerBook, ReadOnlyDataBook\u003cPhone\u003e phoneBook,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        ReadOnlyDataBook\u003cOrder\u003e orderBook, ReadOnlyDataBook\u003cSchedule\u003e scheduleBook,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(customerBook, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        logger.fine(\"Initializing with customer book: \" + customerBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.customerBook \u003d new CustomerBook(customerBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.phoneBook \u003d new PhoneBook(phoneBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.orderBook \u003d new OrderBook(orderBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.scheduleBook \u003d new ScheduleBook(scheduleBook);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredCustomers \u003d new FilteredList\u003c\u003e(this.customerBook.getList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredPhones \u003d new FilteredList\u003c\u003e(this.phoneBook.getList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredOrders \u003d new FilteredList\u003c\u003e(this.orderBook.getList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredSchedules \u003d new FilteredList\u003c\u003e(this.scheduleBook.getList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d customerBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCustomerBook(ReadOnlyDataBook\u003cCustomer\u003e customerBook) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.customerBook.resetData(customerBook);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cCustomer\u003e getCustomerBook() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customerBook;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasCustomer(Customer customer) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(customer);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customerBook.hasCustomer(customer);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteCustomer(Customer target) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customerBook.removeCustomer(target);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addCustomer(Customer customer) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customerBook.addCustomer(customer);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredCustomerList(PREDICATE_SHOW_ALL_CUSTOMERS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customerBook.setCustomer(target, editedCustomer);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Customer List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Customer} backed by the internal list of"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cCustomer\u003e getFilteredCustomerList() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredCustomers;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredCustomerList(Predicate\u003cCustomer\u003e predicate) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredCustomers.setPredicate(predicate);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d phoneBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhoneBook(ReadOnlyDataBook\u003cPhone\u003e phoneBook) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.phoneBook.resetData(phoneBook);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cPhone\u003e getPhoneBook() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phoneBook;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phoneBook.hasPhone(phone);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deletePhone(Phone target) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneBook.removePhone(target);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addPhone(Phone phone) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneBook.addPhone(phone);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredPhoneList(PREDICATE_SHOW_ALL_PHONES);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhone(Phone target, Phone editedPhone) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedPhone);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneBook.setPhone(target, editedPhone);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Phone List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Phone} backed by the internal list of"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cPhone\u003e getFilteredPhoneList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredPhones;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredPhoneList(Predicate\u003cPhone\u003e predicate) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredPhones.setPredicate(predicate);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d OrderBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrderBook(ReadOnlyDataBook\u003cOrder\u003e orderBook) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.orderBook.resetData(orderBook);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cOrder\u003e getOrderBook() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orderBook;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orderBook.hasOrder(order);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteOrder(Order target) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderBook.removeOrder(target);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addOrder(Order order) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderBook.addOrder(order);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredOrderList(PREDICATE_SHOW_ALL_ORDER);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderBook.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Order} backed by the internal list of"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredOrders;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ScheduleBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e scheduleBook) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.scheduleBook.resetData(scheduleBook);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ReadOnlyDataBook\u003cSchedule\u003e getScheduleBook() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return scheduleBook;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return scheduleBook.hasSchedule(schedule);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void deleteSchedule(Schedule target) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        scheduleBook.removeSchedule(target);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        scheduleBook.addSchedule(schedule);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        updateFilteredScheduleList(PREDICATE_SHOW_ALL_SCHEDULE);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedSchedule);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        scheduleBook.setSchedule(target, editedSchedule);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Schedule List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Schedule} backed by the internal list of"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getFilteredScheduleList() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return filteredSchedules;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void updateFilteredScheduleList(Predicate\u003cSchedule\u003e predicate) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        filteredSchedules.setPredicate(predicate);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return customerBook.equals(other.customerBook)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 phoneBook.equals(other.phoneBook)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 orderBook.equals(other.orderBook)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 scheduleBook.equals(other.scheduleBook)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredCustomers.equals(other.filteredCustomers)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredPhones.equals(other.filteredPhones)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredOrders.equals(other.filteredOrders)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 filteredSchedules.equals(other.filteredSchedules);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 275,
      "-": 146,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/OrderBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.UniqueOrderList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Wraps all data at the order-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Duplicates are not allowed (by .isSameOrder comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class OrderBook implements ReadOnlyDataBook\u003cOrder\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final UniqueOrderList orders;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates an OrderBook using the Orders in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderBook(ReadOnlyDataBook\u003cOrder\u003e toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the contents of the order list with {@code orders}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code orders} must not contain duplicate orders."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.orders.setOrders(orders);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Resets the existing data of this {@code OrderBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void resetData(ReadOnlyDataBook\u003cOrder\u003e newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        setOrders(newData.getList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// order-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a order with the same identity as {@code order} exists in the order book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasOrder(Order order) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orders.contains(order);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds a order to the order book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order must not already exist in the order book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addOrder(Order o) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the order book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the order book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orders.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Removes {@code key} from this {@code OrderBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code key} must exist in the order book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void removeOrder(Order key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orders.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orders.asUnmodifiableObservableList().size() + \" orders\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cOrder\u003e getList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orders.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof OrderBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 orders.equals(((OrderBook) other).orders));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return orders.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/PhoneBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.UniquePhoneList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Wraps all data at the phone-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Duplicates are not allowed (by .isSamePhone comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class PhoneBook implements ReadOnlyDataBook\u003cPhone\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final UniquePhoneList phones;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phones \u003d new UniquePhoneList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public PhoneBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates an PhoneBook using the Phones in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public PhoneBook(ReadOnlyDataBook\u003cPhone\u003e toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the contents of the phone list with {@code phones}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code phone} must not contain duplicate phones."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhones(List\u003cPhone\u003e phones) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.phones.setPhones(phones);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Resets the existing data of this {@code PhoneBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void resetData(ReadOnlyDataBook\u003cPhone\u003e newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        setPhones(newData.getList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// phone-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a phone with the same identity as {@code phone} exists in the phone book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasPhone(Phone phone) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phones.contains(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds a phone to SML."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone must not already exist in the phone book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addPhone(Phone p) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phones.add(p);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given phone {@code target} in the list with {@code editedPhone}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the phone book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone identity of {@code editedPhone} must not be the same as another existing phone in the phone book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhone(Phone target, Phone editedPhone) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(editedPhone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phones.setPhone(target, editedPhone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Removes {@code key} from this {@code PhoneBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code key} must exist in the phone book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void removePhone(Phone key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phones.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phones.asUnmodifiableObservableList().size() + \" phones\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cPhone\u003e getList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phones.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof PhoneBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 phones.equals(((PhoneBook) other).phones));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return phones.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyDataBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public interface ReadOnlyDataBook\u003cT\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    ObservableList\u003cT\u003e getList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ScheduleBook.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.UniqueScheduleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Wraps all data at the schedule-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Duplicates are not allowed (by .isSameSchedule comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ScheduleBook implements ReadOnlyDataBook\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final UniqueScheduleList schedules;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        schedules \u003d new UniqueScheduleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ScheduleBook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Creates an ScheduleBook using the Schedules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ScheduleBook(ReadOnlyDataBook\u003cSchedule\u003e toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the contents of the schedule list with {@code schedules}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code schedules} must not contain duplicate schedules."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setSchedules(List\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.schedules.setSchedules(schedules);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Resets the existing data of this {@code ScheduleBook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void resetData(ReadOnlyDataBook\u003cSchedule\u003e newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        setSchedules(newData.getList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// schedule-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if a schedule with the same identity as {@code schedule} exists in the schedule book."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean hasSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(schedule);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return schedules.contains(schedule);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds a schedule to the schedule book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule must not already exist in the schedule book."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void addSchedule(Schedule s) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        schedules.add(s);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the given schedule {@code target} in the list with {@code editedSchedule}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the schedule book."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule identity of {@code editedSchedule} must not be the same as another existing schedule."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(editedSchedule);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        schedules.setSchedule(target, editedSchedule);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Removes {@code key} from this {@code ScheduleBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code key} must exist in the schedule book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void removeSchedule(Schedule key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        schedules.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return schedules.asUnmodifiableObservableList().size() + \" schedules\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cSchedule\u003e getList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return schedules.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof ScheduleBook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 schedules.equals(((ScheduleBook) other).schedules));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return schedules.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/ContactNumber.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents a Customer\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContactNumber(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class ContactNumber {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"ContactNumber numbers should only contain numbers, and it should be at least 8 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{8,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs a {@code ContactNumber}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param contactNumber A valid contactNumber."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ContactNumber(String contactNumber) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(contactNumber);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        checkArgument(isValidContactNumber(contactNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        value \u003d contactNumber;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if a given string is a valid contactNumber."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static boolean isValidContactNumber(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof ContactNumber // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 value.equals(((ContactNumber) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Customer.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents a Customer in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class Customer implements Cloneable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final ContactNumber contactNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Customer(Name name, ContactNumber contactNumber, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireAllNonNull(name, contactNumber, email, tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.contactNumber \u003d contactNumber;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ContactNumber getContactNumber() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return contactNumber;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean isSameCustomer(Customer otherCustomer) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (otherCustomer \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return otherCustomer !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 (otherCustomer.getContactNumber().equals(getContactNumber())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || otherCustomer.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if both customers have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * This defines a stronger notion of equality between two customers."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        Customer otherCustomer \u003d (Customer) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return otherCustomer.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 otherCustomer.getContactNumber().equals(getContactNumber())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 otherCustomer.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 otherCustomer.getTags().equals(getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Object clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return super.clone();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return Objects.hash(name, contactNumber, email, tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(\" ContactNumber: \")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(getContactNumber())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 5,
      "EugeneTeu": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Email.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents a Customer\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Represents a Customer\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/NameContainsKeywordsPredicate.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean test(Customer customer) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(customer.getName().fullName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/UniqueCustomerList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.exceptions.CustomerNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.exceptions.DuplicateCustomerException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A list of customers that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A customer is considered unique by comparing using {@code Customer#isSameCustomer(Customer)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * customers uses Customer#isSameCustomer(Customer) for equality so as to ensure that the customers"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * unique in terms of identity in the UniqueCustomerList. However, the removal of a customer uses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Customer#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * as to ensure that the customer with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * @see Customer#isSameCustomer(Customer)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class UniqueCustomerList implements Iterable\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final ObservableList\u003cCustomer\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if the list contains an equivalent customer as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean contains(Customer toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameCustomer);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Adds a customer to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * The customer must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void add(Customer toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Replaces the customer {@code target} in the list with {@code editedCustomer}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * The customer identity of {@code editedCustomer} must not be the same as another existing customer in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param editedCustomer"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void setCustomer(Customer target, Customer editedCustomer) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireAllNonNull(target, editedCustomer);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!target.isSameCustomer(editedCustomer) \u0026\u0026 contains(editedCustomer)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        internalList.set(index, editedCustomer);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Removes the equivalent customer from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * The customer must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void remove(Customer toRemove) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new CustomerNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void setCustomers(UniqueCustomerList replacement) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Replaces the contents of this list with {@code customers}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * {@code customers} must not contain duplicate customers."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public void setCustomers(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        requireAllNonNull(customers);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!customersAreUnique(customers)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            throw new DuplicateCustomerException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        internalList.setAll(customers);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public ObservableList\u003cCustomer\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public Iterator\u003cCustomer\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                || (other instanceof UniqueCustomerList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueCustomerList) other).internalList));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Returns true if {@code customers} contains only unique customers."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private boolean customersAreUnique(List\u003cCustomer\u003e customers) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        for (int i \u003d 0; i \u003c customers.size() - 1; i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            for (int j \u003d i + 1; j \u003c customers.size(); j++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                if (customers.get(i).isSameCustomer(customers.get(j))) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/exceptions/CustomerNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Signals that the operation is unable to find the specified customer."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class CustomerNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/customer/exceptions/DuplicateCustomerException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.model.customer.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Signals that the operation will result in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * duplicate Customers (Customers  are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class DuplicateCustomerException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public DuplicateCustomerException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(\"Operation would result in duplicate Customers\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Order.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents an Order in the SML."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: details are present, field values are validated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class Order implements Cloneable {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final UUID id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Customer customer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Price price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Status status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Schedule schedule;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @throws CloneNotSupportedException If Customer/Phone class does not implement Cloneable interface."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Order(Customer customer, Phone phone, Price price, Set\u003cTag\u003e tags) throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireAllNonNull(customer, phone, price, tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.id \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.customer \u003d (Customer) customer.clone();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.phone \u003d (Phone) phone.clone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.status \u003d Status.UNSCHEDULED;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.schedule \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public UUID getId() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Customer getCustomer() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return customer;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Price getPrice() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return price;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if both orders have the same identity fields."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * This defines a weaker notion of equality between two orders."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean isSameOrder(Order otherOrder) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (otherOrder \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return otherOrder !\u003d null"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getId().equals(getId());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if both orders have the same identity and data fields."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * This defines a stronger notion of equality between two orders."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!(other instanceof Order)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Order otherOrder \u003d (Order) other;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return otherOrder.getId().equals(getId())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getCustomer().equals(getCustomer())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getPrice().equals(getPrice())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getStatus().equals(getStatus())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getSchedule().equals(getSchedule())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherOrder.getTags().equals((getTags()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Object clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return super.clone();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Objects.hash(id, customer, phone, price, status, tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        builder.append(\" # \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Customer: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getCustomer())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Order Status: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Price.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents a Phone\u0027s selling price in an Order in the SML."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPrice(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Price {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"Prices must be non-negative, start with \\\u0027$\\\u0027 and have at most 2 decimals.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Price}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param price A valid price."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Price(String price) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidPrice(price), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d price;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid price."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidPrice(String price) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            Number number \u003d NumberFormat.getCurrencyInstance().parse(price);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return number !\u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Price // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((Price) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 59,
      "qiujiaaa": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Status.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents an Order\u0027s status in the SML."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: Only 4 valid status."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    UNSCHEDULED(\"Unscheduled\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SCHEDULED(\"Scheduled\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    COMPLETED(\"Completed\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    CANCELLED(\"Cancelled\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final String label;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private Status(String label) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.label \u003d label;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return this.label;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/UniqueOrderList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A list of orders that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A orderr is considered unique by comparing using {@code Order#isSameOrder(Order)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * orders uses Order#isSameOrder(Order) for equality so as to ensure that the orders"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * being added or updated is"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * unique in terms of identity in the UniqueOrderList. However, the removal of an order uses"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Order#equals(Object) so"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * as to ensure that the order with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * @see Order#isSameOrder(Order)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if the list contains an equivalent Order as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameOrder);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds an order to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void add(Order toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order identity of {@code editedOrder} must not be the same as another existing order in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param target"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param editedOrder"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrder(Order target, Order editedOrder) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedOrder);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!target.isSameOrder(editedOrder) \u0026\u0026 contains(editedOrder)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The order must exist in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @param toRemove"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void remove(Order toRemove) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrders(UniqueOrderList replacement) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the contents of this list with {@code orders}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code orders} must not contain duplicate orders."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(orders);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!ordersAreUnique(orders)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.setAll(orders);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cOrder\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof UniqueOrderList // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueOrderList) other).internalList));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if {@code orders} contains only unique orders."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private boolean ordersAreUnique(List\u003cOrder\u003e orders) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (int i \u003d 0; i \u003c orders.size() - 1; i++) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            for (int j \u003d i + 1; j \u003c orders.size(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                if (orders.get(i).isSameOrder(orders.get(j))) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/DuplicateOrderException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Signals that the operation will result in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * duplicate Order (Orders are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DuplicateOrderException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public DuplicateOrderException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(\"Operation would result in duplicate Orders\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/OrderNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Signals that the operation is unable to find the specified order."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class OrderNotFoundException extends RuntimeException { }"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/UniquePersonList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of persons that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * A person is considered unique by comparing using {@code Person#isSamePerson((Person)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * persons uses Person#isSamePerson(Person) for equality so as to ensure that the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * person being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * unique in terms of identity in the UniquePersonList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * However, the removal of a person uses Person#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the person with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Person#isSamePerson(Person)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonList implements Iterable\u003cPerson\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent person as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Person toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Person toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSamePerson(editedPerson) \u0026\u0026 contains(editedPerson)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent person from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Person toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(UniquePersonList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code persons}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(persons);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personsAreUnique(persons)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(persons);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cPerson\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniquePersonList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniquePersonList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code persons} contains only unique persons."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private boolean personsAreUnique(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c persons.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                if (persons.get(i).isSamePerson(persons.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "EugeneTeu": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Brand.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s brand in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBrand(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Brand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Brands can take any values, and should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The first character of the brand must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Brand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param brand A valid brand."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Brand(String brand) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(brand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidBrand(brand), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d brand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid brand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidBrand(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Brand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((Brand) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Capacity.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s memory capacity in the SML."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public enum Capacity {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_8GB(\"8GB\"),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_16GB(\"16GB\"),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_32GB(\"32GB\"),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_64GB(\"64GB\"),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_128GB(\"128GB\"),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_256GB(\"256GB\"),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_512GB(\"512GB\"),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    SIZE_1024GB(\"1024GB\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Capacity(String value) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 7,
      "qiujiaaa": 15,
      "EugeneTeu": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Colour.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s colour in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidColour(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Colour {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Colours must be from the rainbow.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Colour}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param colour A valid colour."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Colour(String colour) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(colour);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidColour(colour), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d colour;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid colour."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidColour(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Colour // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((Colour) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Cost.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s cost in the SML."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCost(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Cost {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"Costs must be non-negative, start with \\\u0027$\\\u0027 and have at most 2 decimals.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Cost}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param cost A valid cost."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Cost(String cost) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidCost(cost), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        value \u003d cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid cost."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidCost(String cost) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            Number number \u003d NumberFormat.getCurrencyInstance().parse(cost);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return number !\u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Cost // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 value.equals(((Cost) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Name.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone\u0027s name in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/Phone.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import java.util.UUID;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Represents a Phone in the SML."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "public class Phone implements Cloneable {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final UUID id;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Brand brand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Capacity capacity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Colour colour;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Phone(Name name, Brand brand, Capacity capacity, Colour colour, Cost cost,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                 Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        requireAllNonNull(name, brand, capacity, colour, cost, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.id \u003d UUID.randomUUID();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.brand \u003d brand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.capacity \u003d capacity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.colour \u003d colour;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public UUID getId() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Brand getBrand() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return brand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Capacity getCapacity() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return capacity;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Colour getColour() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return colour;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if both phones have the same identity fields."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * This defines a weaker notion of equality between two phones."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean isSamePhone(Phone otherPhone) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (otherPhone \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return otherPhone !\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getId().equals(getId())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getName().equals(getName())"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getBrand().equals((getBrand()))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getCapacity().equals((getCapacity()))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getColour().equals((getColour()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * Returns true if both phones have the same identity and data fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     * This defines a stronger notion of equality between two phones."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        if (!(other instanceof Phone)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        Phone otherPhone \u003d (Phone) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return otherPhone.getId().equals(getId())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getName().equals(getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getBrand().equals((getBrand()))"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getCapacity().equals((getCapacity()))"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getColour().equals((getColour()))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getCost().equals(getCost())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                \u0026\u0026 otherPhone.getTags().equals((getTags()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Object clone() throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return super.clone();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return Objects.hash(id, name, brand, capacity, colour, cost, tags);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        builder.append(\" # \")"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getId())"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Brand: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getBrand())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Capacity: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getCapacity())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Color: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getColour())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Cost: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(getCost())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "uberSaiyan"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "uberSaiyan": 141,
      "qiujiaaa": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/UniquePhoneList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.exceptions.DuplicatePhoneException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.phone.exceptions.PhoneNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A list of phones that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A phone is considered unique by comparing using {@code Phone#isSamePhone((Phone)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * phones uses Phone#isSamePhone(Phone) for equality so as to ensure that the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * phone being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * unique in terms of identity in the UniquePhoneList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * However, the removal of a phone uses Phone#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * as to ensure that the phone with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * @see Phone#isSamePhone(Phone)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class UniquePhoneList implements Iterable\u003cPhone\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final ObservableList\u003cPhone\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final ObservableList\u003cPhone\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if the list contains an equivalent phone as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean contains(Phone toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSamePhone);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds a phone to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void add(Phone toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicatePhoneException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the phone {@code target} in the list with {@code editedPhone}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone identity of {@code editedPhone} must not be the same as another existing phone in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhone(Phone target, Phone editedPhone) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedPhone);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new PhoneNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!target.isSamePhone(editedPhone) \u0026\u0026 contains(editedPhone)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicatePhoneException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.set(index, editedPhone);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Removes the equivalent phone from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The phone must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void remove(Phone toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new PhoneNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhones(UniquePhoneList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the contents of this list with {@code phones}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code phones} must not contain duplicate phones."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setPhones(List\u003cPhone\u003e phones) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(phones);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!phonesAreUnique(phones)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicatePhoneException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.setAll(phones);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cPhone\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public Iterator\u003cPhone\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof UniquePhoneList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniquePhoneList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if {@code phones} contains only unique phones."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private boolean phonesAreUnique(List\u003cPhone\u003e phones) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (int i \u003d 0; i \u003c phones.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            for (int j \u003d i + 1; j \u003c phones.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                if (phones.get(i).isSamePhone(phones.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/exceptions/DuplicatePhoneException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Signals that the operation will result in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * duplicate Phones (Phones  are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DuplicatePhoneException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public DuplicatePhoneException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(\"Operation would result in duplicate Phones\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/phone/exceptions/PhoneNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.phone.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Signals that the operation is unable to find the specified phone."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class PhoneNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Schedule.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents a Schedule in the SML."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Order order;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Calendar calendar;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Venue venue;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @throws CloneNotSupportedException If Order class does not implement Cloneable interface."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Schedule(Order order, Calendar calendar, Venue venue, Set\u003cTag\u003e tags) throws CloneNotSupportedException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireAllNonNull(order, calendar, venue, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.order \u003d (Order) order.clone();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.calendar \u003d calendar;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Order getOrder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return order;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Calendar getCalendar() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Venue getVenue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if both schedules have the identity field."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * This defines a weaker notion of equality between two schedules."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean isSameSchedule(Schedule otherSchedule) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (otherSchedule \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return otherSchedule !\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherSchedule.getOrder().isSameOrder(getOrder());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if both schedules have the same identity and data fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * This defines a stronger notion of equality between two schedules."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        if (!(other instanceof Schedule)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        Schedule otherSchedule \u003d (Schedule) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return otherSchedule.getOrder().equals(getOrder())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherSchedule.getCalendar().equals(getCalendar())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherSchedule.getVenue().equals(getVenue())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 otherSchedule.getTags().equals((getTags()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return Objects.hash(order, calendar, venue, tags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        builder.append(\"Order: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getOrder())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Date and Time: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getCalendar().getTime())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Venue: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(getVenue())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/UniqueScheduleList.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.exceptions.DuplicateScheduleException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.exceptions.ScheduleNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A list of schedules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * A schedule is considered unique by comparing using {@code Schedule#isSameSchedule((Schedule)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * schedules uses Schedule#isSameSchedule(Schedule) for equality so as to ensure that the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * schedule being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * unique in terms of identity in the UniqueScheduleList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * However, the removal of a schedule uses Schedule#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * as to ensure that the schedule with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * @see Schedule#isSameSchedule(Schedule)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class UniqueScheduleList implements Iterable\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final ObservableList\u003cSchedule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final ObservableList\u003cSchedule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if the list contains an equivalent schedule as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean contains(Schedule toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameSchedule);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Adds a schedule to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void add(Schedule toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicateScheduleException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the schedule {@code target} in the list with {@code editedSchedule}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule identity of {@code editedSchedule} must not be the same as another existing schedule in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setSchedule(Schedule target, Schedule editedSchedule) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(target, editedSchedule);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ScheduleNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!target.isSameSchedule(editedSchedule) \u0026\u0026 contains(editedSchedule)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicateScheduleException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.set(index, editedSchedule);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Removes the equivalent schedule from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * The schedule must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void remove(Schedule toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new ScheduleNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setSchedules(UniqueScheduleList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Replaces the contents of this list with {@code schedules}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * {@code schedules} must not contain duplicate schedules."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public void setSchedules(List\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        requireAllNonNull(schedules);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!schedulesAreUnique(schedules)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            throw new DuplicateScheduleException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        internalList.setAll(schedules);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ObservableList\u003cSchedule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public Iterator\u003cSchedule\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                || (other instanceof UniqueScheduleList // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueScheduleList) other).internalList));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Returns true if {@code schedules} contains only unique schedules."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private boolean schedulesAreUnique(List\u003cSchedule\u003e schedules) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        for (int i \u003d 0; i \u003c schedules.size() - 1; i++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            for (int j \u003d i + 1; j \u003c schedules.size(); j++) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                if (schedules.get(i).isSameSchedule(schedules.get(j))) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/Venue.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "package seedu.address.model.schedule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Represents a Schedule\u0027s venue in the SML."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVenue(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "public class Venue {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Venue can take any string, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public final String venue;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Constructs an {@code venue}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * @param venue A valid venue."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public Venue(String venue) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        requireNonNull(venue);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        checkArgument(isValidVenue(venue), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        this.venue \u003d venue;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     * Returns true if a given string is a valid venue."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public static boolean isValidVenue(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return venue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                || (other instanceof Venue // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "                \u0026\u0026 venue.equals(((Venue) other).venue)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "        return venue.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qiujiaaa"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qiujiaaa": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/exceptions/DuplicateScheduleException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.schedule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Signals that the operation will result in"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * duplicate Schedules (Schedules are considered duplicates if they have the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class DuplicateScheduleException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public DuplicateScheduleException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(\"Operation would result in duplicate Schedules\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/schedule/exceptions/ScheduleNotFoundException.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.model.schedule.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Signals that the operation is unable to find the specified schedule."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ScheduleNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    //private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*@FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "*/"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane tabPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel \u003d new TabPanel(this.logic);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanelPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        //personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /*public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 186,
      "EugeneTeu": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * class containing TabPane class"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private PersonListPanel personListPanel2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private PersonListPanel personListPanel3;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private PersonListPanel personListPanel4;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane phoneListPanelPlaceholder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane customerListPanelPlaceholder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane orderListPanelPlaceholder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private StackPane scheduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private TabPane tabPanel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public TabPanel(Logic logic) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customerListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        personListPanel2 \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneListPanelPlaceholder.getChildren().add(personListPanel2.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        personListPanel3 \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        orderListPanelPlaceholder.getChildren().add(personListPanel3.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        personListPanel4 \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        scheduleListPanelPlaceholder.getChildren().add(personListPanel4.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        tabPanel.setTabClosingPolicy(TabPane.TabClosingPolicy.UNAVAILABLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/CustomerCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * An UI component that displays information of a {@code Customer}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class CustomerCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final Customer customer;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label contactNumber;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CustomerCard(Customer customer, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.customer \u003d customer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        name.setText(customer.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        contactNumber.setText(customer.getContactNumber().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        email.setText(customer.getEmail().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customer.getTags().stream()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!(other instanceof CustomerCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        CustomerCard card \u003d (CustomerCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 customer.equals(card.customer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/OrderCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * An UI component that displays information of a {@code Order}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class OrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String FXML \u003d \"OrderListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public final Order order;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label customerName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneColour;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneCapacity;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label orderId;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label orderPrice;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label orderStatus;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        index.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customerName.setText(order.getCustomer().getName().fullName);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneName.setText(order.getPhone().getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneColour.setText(order.getPhone().getColour().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneCapacity.setText(order.getPhone().getCapacity().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderId.setText(order.getId().toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderPrice.setText(order.getPrice().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderStatus.setText(order.getStatus().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        order.getTags().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!(other instanceof OrderCard)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        OrderCard card \u003d (OrderCard) other;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 order.equals(card.order);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/PhoneCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * An UI component that displays information of a {@code Phone}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class PhoneCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"PhoneListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public final Phone phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    // No price displayed here for phone"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label colour;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label capacity;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label brand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PhoneCard(Phone phone, int displayedIndex) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        brand.setText(phone.getBrand().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        capacity.setText(phone.getCapacity().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        colour.setText(phone.getColour().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        cost.setText(phone.getCost().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        name.setText(phone.getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phone.getTags().stream()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        if (!(other instanceof PhoneCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        PhoneCard card \u003d (PhoneCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u0026\u0026 phone.equals(card.phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ScheduleCard.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * An UI component that displays information of a {@code Schedule}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ScheduleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String FXML \u003d \"ScheduleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public final Schedule schedule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label customerName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label customerNumber;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneColour;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label phoneCapacity;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label orderId;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private Label venue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ScheduleCard(Schedule schedule, int displayedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        index.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customerName.setText(schedule.getOrder().getCustomer().getName().fullName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        customerNumber.setText(schedule.getOrder().getCustomer().getContactNumber().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneName.setText(schedule.getOrder().getPhone().getName().fullName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneColour.setText(schedule.getOrder().getPhone().getColour().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        phoneCapacity.setText(schedule.getOrder().getPhone().getCapacity().value);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderId.setText(schedule.getOrder().getId().toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        time.setText(schedule.getCalendar().getTime().toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        venue.setText(schedule.getVenue().venue);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        schedule.getTags().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        if (!(other instanceof ScheduleCard)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        ScheduleCard card \u003d (ScheduleCard) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        return index.getText().equals(card.index.getText())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                \u0026\u0026 schedule.equals(card.schedule);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/CustomerListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.customer.Customer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.cards.CustomerCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Panel containing the list of customers."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class CustomerListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CustomerListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private ListView\u003cCustomer\u003e customerListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public CustomerListPanel(ObservableList\u003cCustomer\u003e customerList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customerListView.setItems(customerList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        customerListView.setCellFactory(listView -\u003e new CustomerListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Customer} using a {@code CustomerCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    class CustomerListViewCell extends ListCell\u003cCustomer\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        protected void updateItem(Customer customer, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            super.updateItem(customer, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            if (empty || customer \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(new CustomerCard(customer, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/OrderListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.cards.OrderCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class OrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String FXML \u003d \"OrderListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private ListView\u003cOrder\u003e orderListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderListView.setItems(orderList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Order} using a {@code OrderCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrder\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        protected void updateItem(Order order, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setGraphic(new OrderCard(order, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/PhoneListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.model.phone.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "import seedu.address.ui.cards.PhoneCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " * Panel containing the list of phones."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "public class PhoneListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CustomerListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    private ListView\u003cPhone\u003e phoneListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    public PhoneListPanel(ObservableList\u003cPhone\u003e phoneList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneListView.setItems(phoneList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        phoneListView.setCellFactory(listView -\u003e new PhoneListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Phone} using a {@code PhoneCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    class PhoneListViewCell extends ListCell\u003cPhone\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        protected void updateItem(Phone phone, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            super.updateItem(phone, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            if (empty || phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                setGraphic(new PhoneCard(phone, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/panels/ScheduleListPanel.java",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "package seedu.address.ui.panels;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.model.schedule.Schedule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "import seedu.address.ui.cards.ScheduleCard;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " * Panel containing the list of schedules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "public class ScheduleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private static final String FXML \u003d \"ScheduleListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ScheduleListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    private ListView\u003cSchedule\u003e scheduleListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    public ScheduleListPanel(ObservableList\u003cSchedule\u003e scheduleList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        scheduleListView.setItems(scheduleList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        scheduleListView.setCellFactory(listView -\u003e new ScheduleListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Schedule} using a {@code ScheduleCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    class ScheduleListViewCell extends ListCell\u003cSchedule\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        protected void updateItem(Schedule schedule, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            super.updateItem(schedule, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            if (empty || schedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "                setGraphic(new ScheduleCard(schedule, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 48
    }
  },
  {
    "path": "src/main/resources/view/CustomerListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"contactNumber\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$contactNumber\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 35
    }
  },
  {
    "path": "src/main/resources/view/CustomerListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         title\u003d\"Address App\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"20\" bottom\u003d\"10\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"20\" bottom\u003d\"10\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cVBox id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"ALWAYS\" fx:id\u003d\"tabPanelPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   minHeight\u003d\"200\"  \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"20\" bottom\u003d\"10\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c!--"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"20\" bottom\u003d\"5\" left\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "EugeneTeu": 14
    }
  },
  {
    "path": "src/main/resources/view/OrderListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderId\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"customerName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$customerName\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneName\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneColour\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneColour\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneCapacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneCapacity\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderPrice\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderPrice\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderStatus\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderStatus\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yeodonghan": 40
    }
  },
  {
    "path": "src/main/resources/view/OrderListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003cListView fx:id\u003d\"orderListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yeodonghan": 8
    }
  },
  {
    "path": "src/main/resources/view/PersonListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cListView fx:id\u003d\"personListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/resources/view/PhoneListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"brand\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$brand\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"capacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$capacity\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"colour\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$colour\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 37
    }
  },
  {
    "path": "src/main/resources/view/PhoneListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cListView fx:id\u003d\"phoneListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 8
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "EugeneTeu": 1
    }
  },
  {
    "path": "src/main/resources/view/ScheduleListCard.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"orderId\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$orderId\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"customerName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$customerName\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneName\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneName\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneColour\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneColour\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"phoneCapacity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phoneCapacity\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "            \u003cLabel fx:id\u003d\"venue\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$venue\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yeodonghan": 40
    }
  },
  {
    "path": "src/main/resources/view/ScheduleListPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "    \u003cListView fx:id\u003d\"scheduleListView\" VBox.vgrow\u003d\"ALWAYS\" styleClass\u003d\"pane-with-border\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yeodonghan"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yeodonghan": 8
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "fileType": "functional",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabPanel\" styleClass\u003d\"STYLE_CLASS_FLOATING stack-pane\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "      \u003ctabs\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003cTab text\u003d\"Customers\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003cVBox fx:id\u003d\"customerList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                       \u003cInsets top\u003d\"20\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cLabel text\u003d\"Customers\"\u003e \u003c/Label\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"customerListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003cTab text\u003d\"Phones\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003cVBox fx:id\u003d\"phoneList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                       \u003cInsets top\u003d\"20\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cLabel text\u003d\"Phones\"\u003e \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"phoneListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003cTab text\u003d\"Order\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003cVBox fx:id\u003d\"orderList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                       \u003cInsets top\u003d\"20\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cLabel text\u003d\"Order\"\u003e \u003c/Label\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"orderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003cTab text\u003d\"Schedule\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003ccontent\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003cVBox fx:id\u003d\"scheduleList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                       \u003cInsets top\u003d\"20\" right\u003d\"0\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cLabel text\u003d\"schedule\"\u003e \u003c/Label\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "                   \u003cStackPane fx:id\u003d\"scheduleListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "               \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "           \u003c/content\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "         \u003c/Tab\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "      \u003c/tabs\u003e\u003c/TabPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EugeneTeu"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "EugeneTeu": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "/*"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "*/"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 8,
      "-": 187
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "tests",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "//import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhixianggg"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhixianggg": 7,
      "-": 125
    }
  }
]
